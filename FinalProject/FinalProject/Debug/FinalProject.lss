
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000b74  00000c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010e  0080010e  00000c16  2**0
                  ALLOC
  3 .stab         00001698  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a6c  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00004d1c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d60  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000002b0  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001efa  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b9c  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000117f  00000000  00000000  00007ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000544  00000000  00000000  00008c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000086c  00000000  00000000  000091ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000785  00000000  00000000  00009a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000250  00000000  00000000  0000a19d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  9e:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configure_push_button_array>:
#include "button_driver.h"

void configure_push_button_array()
{
	DDR(BUTTON_PIN) &= ~(1<<BUTTONA_LOC);
  a6:	21 98       	cbi	0x04, 1	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONB_LOC);
  a8:	24 98       	cbi	0x04, 4	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONC_LOC);
  aa:	25 98       	cbi	0x04, 5	; 4
	PORT(BUTTON_PIN) |= (1<<BUTTONA_LOC);
  ac:	29 9a       	sbi	0x05, 1	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONB_LOC);
  ae:	2c 9a       	sbi	0x05, 4	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONC_LOC);
  b0:	2d 9a       	sbi	0x05, 5	; 5
  b2:	08 95       	ret

000000b4 <init_buzzer>:
 */

#include "main.h"

void init_buzzer(){
	DDR(BUZZER_PORT) |= (BUZZER_PIN);
  b4:	22 9a       	sbi	0x04, 2	; 4
	TIMER1_CLK |= ( (1<<0)	| (1<<4) | (1<<5) );
  b6:	e0 e8       	ldi	r30, 0x80	; 128
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 63       	ori	r24, 0x31	; 49
  be:	80 83       	st	Z, r24
	TIMER2_CLK |= (1<<4);
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <playFrequency>:
}
void playFrequency(uint32_t freq, uint8_t dur)
{
  cc:	cf 93       	push	r28
  ce:	c4 2f       	mov	r28, r20
	if (freq < 40) freq = 40;	
  d0:	68 32       	cpi	r22, 0x28	; 40
  d2:	71 05       	cpc	r23, r1
  d4:	81 05       	cpc	r24, r1
  d6:	91 05       	cpc	r25, r1
  d8:	20 f4       	brcc	.+8      	; 0xe2 <playFrequency+0x16>
  da:	68 e2       	ldi	r22, 0x28	; 40
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	21 31       	cpi	r18, 0x11	; 17
  e8:	87 e2       	ldi	r24, 0x27	; 39
  ea:	38 07       	cpc	r19, r24
  ec:	41 05       	cpc	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	20 f0       	brcs	.+8      	; 0xfa <playFrequency+0x2e>
  f2:	20 e1       	ldi	r18, 0x10	; 16
  f4:	37 e2       	ldi	r19, 0x27	; 39
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
	if (freq > 10000) freq = 10000;    
 
	uint32_t top = (F_CPU/freq);
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	72 e4       	ldi	r23, 0x42	; 66
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4b 05 	call	0xa96	; 0xa96 <__udivmodsi4>
	TIMER2_CLK |= (1<<0);
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
	OCR1A = top;	
 110:	30 93 89 00 	sts	0x0089, r19
 114:	20 93 88 00 	sts	0x0088, r18
	OCR1B = (top>>2);
 118:	da 01       	movw	r26, r20
 11a:	c9 01       	movw	r24, r18
 11c:	b6 95       	lsr	r27
 11e:	a7 95       	ror	r26
 120:	97 95       	ror	r25
 122:	87 95       	ror	r24
 124:	b6 95       	lsr	r27
 126:	a7 95       	ror	r26
 128:	97 95       	ror	r25
 12a:	87 95       	ror	r24
 12c:	90 93 8b 00 	sts	0x008B, r25
 130:	80 93 8a 00 	sts	0x008A, r24
	
	uint8_t i;
	for (i=0;i<dur; i++){
 134:	cc 23       	and	r28, r28
 136:	69 f0       	breq	.+26     	; 0x152 <playFrequency+0x86>
 138:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	9f e9       	ldi	r25, 0x9F	; 159
 13c:	26 e8       	ldi	r18, 0x86	; 134
 13e:	31 e0       	ldi	r19, 0x01	; 1
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <playFrequency+0x74>
 148:	00 c0       	rjmp	.+0      	; 0x14a <playFrequency+0x7e>
 14a:	00 00       	nop
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	8c 13       	cpse	r24, r28
 150:	f4 cf       	rjmp	.-24     	; 0x13a <playFrequency+0x6e>
		
		_delay_ms(500);
	}
	TIMER2_CLK &= ~(1<<0);
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	80 83       	st	Z, r24
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <set_DB_input>:
	DDR(E_PORT) |= (1<<E_LOC);
}

static void set_DB_input()
{
	DDR(DB0_PORT) &= ~(1<<DB0_LOC);
 160:	21 98       	cbi	0x04, 1	; 4
	DDR(DB1_PORT) &= ~(1<<DB1_LOC);
 162:	24 98       	cbi	0x04, 4	; 4
	DDR(DB2_PORT) &= ~(1<<DB2_LOC);
 164:	25 98       	cbi	0x04, 5	; 4
	DDR(DB3_PORT) &= ~(1<<DB3_LOC);
 166:	57 98       	cbi	0x0a, 7	; 10
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 168:	29 9a       	sbi	0x05, 1	; 5
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 16a:	2c 9a       	sbi	0x05, 4	; 5
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 16c:	2d 9a       	sbi	0x05, 5	; 5
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	08 95       	ret

00000172 <set_DB_output>:
}

static void set_DB_output()
{
	DDR(DB0_PORT) |= (1<<DB0_LOC);
 172:	21 9a       	sbi	0x04, 1	; 4
	DDR(DB1_PORT) |= (1<<DB1_LOC);
 174:	24 9a       	sbi	0x04, 4	; 4
	DDR(DB2_PORT) |= (1<<DB2_LOC);
 176:	25 9a       	sbi	0x04, 5	; 4
	DDR(DB3_PORT) |= (1<<DB3_LOC);
 178:	57 9a       	sbi	0x0a, 7	; 10
 17a:	08 95       	ret

0000017c <pulse_E>:
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
}

static void set_E()
{
	PORT(E_PORT) |= (1<<E_LOC);
 17c:	5c 9a       	sbi	0x0b, 4	; 11
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <pulse_E+0x6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <pulse_E+0xc>
 188:	00 00       	nop
}

static bool get_DB0()
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
 18a:	83 b1       	in	r24, 0x03	; 3
static uint8_t pulse_E()
{
	uint8_t num=0;
	set_E();
	_delay_ms(10);
	if(get_DB0()) num |= (1<<0);
 18c:	86 95       	lsr	r24
 18e:	81 70       	andi	r24, 0x01	; 1
	if(get_DB1()) num|= (1<<1);
 190:	1c 99       	sbic	0x03, 4	; 3
 192:	82 60       	ori	r24, 0x02	; 2
	if(get_DB2()) num |= (1<<2);
 194:	1d 99       	sbic	0x03, 5	; 3
 196:	84 60       	ori	r24, 0x04	; 4
	if(get_DB3()) num |= (1<<3);
 198:	4f 99       	sbic	0x09, 7	; 9
 19a:	88 60       	ori	r24, 0x08	; 8
	PORT(RW_PORT) &= ~(1<<RW_LOC);
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 19c:	5c 98       	cbi	0x0b, 4	; 11
	if(get_DB1()) num|= (1<<1);
	if(get_DB2()) num |= (1<<2);
	if(get_DB3()) num |= (1<<3);
	clear_E();
	return num;
}
 19e:	08 95       	ret

000001a0 <nibble_out>:
	while(num&(BUSY_FLAG));

}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
 1a0:	80 ff       	sbrs	r24, 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <nibble_out+0x8>
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
}
static void set_DB0()
{
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 1a4:	29 9a       	sbi	0x05, 1	; 5
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <nibble_out+0xa>
	PORT(E_PORT) &= ~(1<<E_LOC);
}

static void clear_DB0()
{
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
 1a8:	29 98       	cbi	0x05, 1	; 5
}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
 1aa:	81 ff       	sbrs	r24, 1
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <nibble_out+0x12>
	PORT(DB0_PORT) |= (1<<DB0_LOC);
}

static void set_DB1()
{
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 1ae:	2c 9a       	sbi	0x05, 4	; 5
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <nibble_out+0x14>
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
}

static void clear_DB1()
{
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
 1b2:	2c 98       	cbi	0x05, 4	; 5
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
 1b4:	82 ff       	sbrs	r24, 2
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <nibble_out+0x1c>
	PORT(DB1_PORT) |= (1<<DB1_LOC);
}

static void set_DB2()
{
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 1b8:	2d 9a       	sbi	0x05, 5	; 5
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <nibble_out+0x1e>
	PORT(DB3_PORT) |= (1<<DB3_LOC);
}

static void clear_DB2()
{
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
 1bc:	2d 98       	cbi	0x05, 5	; 5
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
 1be:	83 ff       	sbrs	r24, 3
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <nibble_out+0x26>
	PORT(DB2_PORT) |= (1<<DB2_LOC);
}

static void set_DB3()
{
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <nibble_out+0x28>
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
}

static void clear_DB3()
{
	PORT(DB3_PORT) &= ~(1<<DB3_LOC);
 1c6:	5f 98       	cbi	0x0b, 7	; 11
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
	else clear_DB3();
	pulse_E();
 1c8:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 1cc:	08 95       	ret

000001ce <write_reg>:
}
static void write_reg(uint8_t num, uint8_t rs)
{
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	d8 2f       	mov	r29, r24
 1d6:	16 2f       	mov	r17, r22
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 1d8:	5a 98       	cbi	0x0b, 2	; 11
 1da:	83 ec       	ldi	r24, 0xC3	; 195
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <write_reg+0x10>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <write_reg+0x16>
 1e4:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 1e6:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 1ea:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1ec:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 1f0:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 1f2:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1f6:	c2 95       	swap	r28
 1f8:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 1fa:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 1fc:	6c f3       	brlt	.-38     	; 0x1d8 <write_reg+0xa>
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 1fe:	28 98       	cbi	0x05, 0	; 5
}
static void write_reg(uint8_t num, uint8_t rs)
{
	busywait();
	clear_RW();
	if(rs) set_RS();
 200:	11 23       	and	r17, r17
 202:	11 f0       	breq	.+4      	; 0x208 <write_reg+0x3a>
	return PIN(DB3_PORT)&(1<<DB3_LOC);
}

static void set_RS()
{
	PORT(RS_PORT) |= (1<<RS_LOC);
 204:	5a 9a       	sbi	0x0b, 2	; 11
 206:	01 c0       	rjmp	.+2      	; 0x20a <write_reg+0x3c>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 208:	5a 98       	cbi	0x0b, 2	; 11
{
	busywait();
	clear_RW();
	if(rs) set_RS();
	else clear_RS();
	set_DB_output();
 20a:	0e 94 b9 00 	call	0x172	; 0x172 <set_DB_output>
	nibble_out(num>>4);
 20e:	8d 2f       	mov	r24, r29
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	nibble_out(num);
 218:	8d 2f       	mov	r24, r29
 21a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	set_DB_input();
 21e:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	08 95       	ret

0000022a <lcd_initialize>:
static void nibble_out(uint8_t num);
static void write_reg(uint8_t num, uint8_t rs);


void lcd_initialize()
{
 22a:	cf 93       	push	r28
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 22c:	28 98       	cbi	0x05, 0	; 5
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 22e:	5c 98       	cbi	0x0b, 4	; 11
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 230:	5a 98       	cbi	0x0b, 2	; 11
	while(*str) lcd_putc(*str++);
}

static void setup_RS_RW_E()
{
	DDR(RS_PORT) |= (1<<RS_LOC);
 232:	52 9a       	sbi	0x0a, 2	; 10
	DDR(RW_PORT) |= (1<<RW_LOC);
 234:	20 9a       	sbi	0x04, 0	; 4
	DDR(E_PORT) |= (1<<E_LOC);
 236:	54 9a       	sbi	0x0a, 4	; 10
{
	clear_RW();
	clear_E();
	clear_RS();
	setup_RS_RW_E();
	set_DB_output();
 238:	0e 94 b9 00 	call	0x172	; 0x172 <set_DB_output>
 23c:	83 ec       	ldi	r24, 0xC3	; 195
 23e:	99 e0       	ldi	r25, 0x09	; 9
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_initialize+0x16>
 244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_initialize+0x1c>
 246:	00 00       	nop
	
	_delay_ms(10);
	nibble_out(0x3);
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_initialize+0x28>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_initialize+0x2e>
 258:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_initialize+0x3a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_initialize+0x40>
 26a:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 272:	83 ec       	ldi	r24, 0xC3	; 195
 274:	99 e0       	ldi	r25, 0x09	; 9
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_initialize+0x4c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_initialize+0x52>
 27c:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x2);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 284:	5a 98       	cbi	0x0b, 2	; 11
 286:	83 ec       	ldi	r24, 0xC3	; 195
 288:	99 e0       	ldi	r25, 0x09	; 9
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_initialize+0x60>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_initialize+0x66>
 290:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 292:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 296:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 298:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 29c:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 29e:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 2a2:	c2 95       	swap	r28
 2a4:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 2a6:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 2a8:	6c f3       	brlt	.-38     	; 0x284 <lcd_initialize+0x5a>
	_delay_ms(10);
	nibble_out(0x3);
	_delay_ms(10);
	nibble_out(0x2);
	busywait();
	write_reg(0x28,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x08,0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x01,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x06,0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
}
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <lcd_display_on>:
	set_DB_input();
}

void lcd_display_on()
{
	write_reg(0x0C, 0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
 2d6:	08 95       	ret

000002d8 <lcd_putc>:
}


void lcd_putc(const char x)
{
	write_reg(x,1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
 2de:	08 95       	ret

000002e0 <lcd_puts>:
}

void lcd_puts(const char *str)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	while(*str) lcd_putc(*str++);
 2e6:	88 81       	ld	r24, Y
 2e8:	88 23       	and	r24, r24
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <lcd_puts+0x18>
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_putc>
 2f2:	89 91       	ld	r24, Y+
 2f4:	81 11       	cpse	r24, r1
 2f6:	fb cf       	rjmp	.-10     	; 0x2ee <lcd_puts+0xe>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:
#include "main.h"


int main()
{
	lcd_initialize();
 2fe:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_initialize>
	lcd_display_on();
 302:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_display_on>
	configure_left_motor();
 306:	0e 94 bb 01 	call	0x376	; 0x376 <configure_left_motor>
	configure_right_motor();
 30a:	0e 94 c4 01 	call	0x388	; 0x388 <configure_right_motor>
	init_buzzer();
 30e:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_buzzer>
	configure_reflectance_sensors();
 312:	0e 94 1e 02 	call	0x43c	; 0x43c <configure_reflectance_sensors>
	configure_push_button_array();
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <configure_push_button_array>
	
	playFrequency(500,1); //Code Uploaded
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	64 ef       	ldi	r22, 0xF4	; 244
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 66 00 	call	0xcc	; 0xcc <playFrequency>
	sensortest();
 328:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <sensortest>

	lcd_goto_xy(0,0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <lcd_goto_xy>
	lcd_puts("Final");
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_puts>
	lcd_goto_xy(0,1);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <lcd_goto_xy>
	lcd_puts("Project");
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_puts>
	

	
	//while(!button_pressed());
	//lcd_erase();
				shift_right_motor_forward();
 34c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <shift_right_motor_forward>
			shift_left_motor_forward();
 350:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <shift_left_motor_forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x58>
 35a:	00 00       	nop
		*/

	
return 0;

}
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	08 95       	ret

00000362 <disable_PWM_LA>:
static void clear_RB()
{	PORT(RMOTORB_PORT) &= ~(1<<RMOTORB_LOC);}
static void enable_PWM_LA()
{	TCCR0A |= PWM_A_MASK;}
static void disable_PWM_LA()
{	TCCR0A &= ~PWM_A_MASK;}
 362:	84 b5       	in	r24, 0x24	; 36
 364:	8f 73       	andi	r24, 0x3F	; 63
 366:	84 bd       	out	0x24, r24	; 36
 368:	08 95       	ret

0000036a <disable_PWM_RA>:
static void disable_PWM_LB()
{	TCCR0A &= ~PWM_B_MASK;}
static void enable_PWM_RA()
{	TCCR2A |= PWM_A_MASK;}
static void disable_PWM_RA()
{	TCCR2A &= ~PWM_A_MASK;}
 36a:	e0 eb       	ldi	r30, 0xB0	; 176
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	8f 73       	andi	r24, 0x3F	; 63
 372:	80 83       	st	Z, r24
 374:	08 95       	ret

00000376 <configure_left_motor>:
	 configure_right_motor();
}

void configure_left_motor()
{
	DDR(LMOTORA_PORT) |= (1<<LMOTORA_LOC);
 376:	56 9a       	sbi	0x0a, 6	; 10
	DDR(LMOTORB_PORT) |= (1<<LMOTORB_LOC);
 378:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = 0x03;
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((TCCR0B&0xC0)|0x01);
 37e:	85 b5       	in	r24, 0x25	; 37
 380:	80 7c       	andi	r24, 0xC0	; 192
 382:	81 60       	ori	r24, 0x01	; 1
 384:	85 bd       	out	0x25, r24	; 37
 386:	08 95       	ret

00000388 <configure_right_motor>:
}

void configure_right_motor()
{
	DDR(RMOTORA_PORT) |= (1<<RMOTORA_LOC);
 388:	23 9a       	sbi	0x04, 3	; 4
	DDR(RMOTORB_PORT) |= (1<<RMOTORB_LOC);
 38a:	53 9a       	sbi	0x0a, 3	; 10
	TCCR2A = 0x03;
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = ((TCCR2B&0xC0)|0x01);
 392:	e1 eb       	ldi	r30, 0xB1	; 177
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	80 7c       	andi	r24, 0xC0	; 192
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	80 83       	st	Z, r24
 39e:	08 95       	ret

000003a0 <shift_left_motor_forward>:
	else if (get_RB_PWM()) return RB_PWM_MATCH;
}

void shift_left_motor_forward()
{
	disable_PWM_LA();
 3a0:	0e 94 b1 01 	call	0x362	; 0x362 <disable_PWM_LA>




static void set_LA()
{	PORT(LMOTORA_PORT) |= (1<<LMOTORA_LOC);}
 3a4:	5e 9a       	sbi	0x0b, 6	; 11
static void enable_PWM_LA()
{	TCCR0A |= PWM_A_MASK;}
static void disable_PWM_LA()
{	TCCR0A &= ~PWM_A_MASK;}
static void enable_PWM_LB()
{	TCCR0A |= PWM_B_MASK;}
 3a6:	84 b5       	in	r24, 0x24	; 36
 3a8:	80 63       	ori	r24, 0x30	; 48
 3aa:	84 bd       	out	0x24, r24	; 36
 3ac:	08 95       	ret

000003ae <shift_right_motor_forward>:
	enable_PWM_LB();
}

void shift_right_motor_forward()
{
	disable_PWM_RA();
 3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <disable_PWM_RA>
static void set_LB()
{	PORT(LMOTORB_PORT) |= (1<<LMOTORB_LOC);}
static void clear_LB()
{	PORT(LMOTORB_PORT) &= ~(1<<LMOTORB_LOC);}
static void set_RA()
{	PORT(RMOTORA_PORT) |= (1<<RMOTORA_LOC);}
 3b2:	2b 9a       	sbi	0x05, 3	; 5
static void enable_PWM_RA()
{	TCCR2A |= PWM_A_MASK;}
static void disable_PWM_RA()
{	TCCR2A &= ~PWM_A_MASK;}
static void enable_PWM_RB()
{	TCCR2A |= PWM_B_MASK;}
 3b4:	e0 eb       	ldi	r30, 0xB0	; 176
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	80 63       	ori	r24, 0x30	; 48
 3bc:	80 83       	st	Z, r24
 3be:	08 95       	ret

000003c0 <duty_to_match>:
	clear_RB();
}

uint8_t duty_to_match(uint8_t duty)
{
	if(duty>=0&&duty<=100) return duty*2.55;
 3c0:	85 36       	cpi	r24, 0x65	; 101
 3c2:	80 f4       	brcc	.+32     	; 0x3e4 <duty_to_match+0x24>
 3c4:	68 2f       	mov	r22, r24
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__floatsisf>
 3d0:	23 e3       	ldi	r18, 0x33	; 51
 3d2:	33 e3       	ldi	r19, 0x33	; 51
 3d4:	43 e2       	ldi	r20, 0x23	; 35
 3d6:	50 e4       	ldi	r21, 0x40	; 64
 3d8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
 3dc:	0e 94 b3 02 	call	0x566	; 0x566 <__fixunssfsi>
 3e0:	86 2f       	mov	r24, r22
 3e2:	08 95       	ret
	else return (duty%100)*2.55;
 3e4:	99 e2       	ldi	r25, 0x29	; 41
 3e6:	89 9f       	mul	r24, r25
 3e8:	91 2d       	mov	r25, r1
 3ea:	11 24       	eor	r1, r1
 3ec:	92 95       	swap	r25
 3ee:	9f 70       	andi	r25, 0x0F	; 15
 3f0:	68 2f       	mov	r22, r24
 3f2:	24 e6       	ldi	r18, 0x64	; 100
 3f4:	92 9f       	mul	r25, r18
 3f6:	60 19       	sub	r22, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__floatsisf>
 404:	23 e3       	ldi	r18, 0x33	; 51
 406:	33 e3       	ldi	r19, 0x33	; 51
 408:	43 e2       	ldi	r20, 0x23	; 35
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
 410:	0e 94 b3 02 	call	0x566	; 0x566 <__fixunssfsi>
 414:	86 2f       	mov	r24, r22
}
 416:	08 95       	ret

00000418 <set_left_motor_speed>:
	TCCR2B = ((TCCR2B&0xC0)|0x01);
}

void set_left_motor_speed(uint8_t speed)
{
	if(speed<5) speed=0;
 418:	85 30       	cpi	r24, 0x05	; 5
 41a:	08 f4       	brcc	.+2      	; 0x41e <set_left_motor_speed+0x6>
 41c:	80 e0       	ldi	r24, 0x00	; 0
	LA_PWM_MATCH = duty_to_match(speed);
 41e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <duty_to_match>
 422:	87 bd       	out	0x27, r24	; 39
	LB_PWM_MATCH = duty_to_match(speed);
 424:	88 bd       	out	0x28, r24	; 40
 426:	08 95       	ret

00000428 <set_right_motor_speed>:
}

void set_right_motor_speed(uint8_t speed)
{
	if(speed<5) speed=0;
 428:	85 30       	cpi	r24, 0x05	; 5
 42a:	08 f4       	brcc	.+2      	; 0x42e <set_right_motor_speed+0x6>
 42c:	80 e0       	ldi	r24, 0x00	; 0
	RA_PWM_MATCH = duty_to_match(speed);
 42e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <duty_to_match>
 432:	80 93 b3 00 	sts	0x00B3, r24
	RB_PWM_MATCH = duty_to_match(speed);
 436:	80 93 b4 00 	sts	0x00B4, r24
 43a:	08 95       	ret

0000043c <configure_reflectance_sensors>:
#include "sensor.h"

void configure_reflectance_sensors()
{
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
 43c:	87 b1       	in	r24, 0x07	; 7
 43e:	80 7e       	andi	r24, 0xE0	; 224
 440:	87 b9       	out	0x07, r24	; 7
	PORT(SENSORS_PORT) |= SENSORS_PIN;
 442:	88 b1       	in	r24, 0x08	; 8
 444:	8f 61       	ori	r24, 0x1F	; 31
 446:	88 b9       	out	0x08, r24	; 8
 448:	08 95       	ret

0000044a <all_white>:

}

bool all_white()
{
	return !(PIN(SENSORS_PORT)&SENSORS_PIN);
 44a:	96 b1       	in	r25, 0x06	; 6
 44c:	9f 71       	andi	r25, 0x1F	; 31
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	09 f0       	breq	.+2      	; 0x454 <all_white+0xa>
 452:	80 e0       	ldi	r24, 0x00	; 0
}
 454:	08 95       	ret

00000456 <get_SENSORA>:

bool get_SENSORA()
{
		return PIN(SENSORS_PORT)&(SENSORA);
 456:	86 b1       	in	r24, 0x06	; 6
}
 458:	81 70       	andi	r24, 0x01	; 1
 45a:	08 95       	ret

0000045c <get_SENSORB>:
bool get_SENSORB()
{	
	return PIN(SENSORS_PORT)&(SENSORB);
 45c:	86 b1       	in	r24, 0x06	; 6
	}
 45e:	86 95       	lsr	r24
 460:	81 70       	andi	r24, 0x01	; 1
 462:	08 95       	ret

00000464 <get_SENSORC>:
bool get_SENSORC()
{	
	return PIN(SENSORS_PORT)&(SENSORC);
 464:	86 b1       	in	r24, 0x06	; 6
}
 466:	82 fb       	bst	r24, 2
 468:	88 27       	eor	r24, r24
 46a:	80 f9       	bld	r24, 0
 46c:	08 95       	ret

0000046e <get_SENSORD>:
bool get_SENSORD()
{	
	return PIN(SENSORS_PORT)&(SENSORD);
 46e:	86 b1       	in	r24, 0x06	; 6
}
 470:	83 fb       	bst	r24, 3
 472:	88 27       	eor	r24, r24
 474:	80 f9       	bld	r24, 0
 476:	08 95       	ret

00000478 <get_SENSORE>:
bool get_SENSORE()
{	
	return PIN(SENSORS_PORT)&(SENSORE);
 478:	86 b1       	in	r24, 0x06	; 6
	}
 47a:	82 95       	swap	r24
 47c:	81 70       	andi	r24, 0x01	; 1
 47e:	08 95       	ret

00000480 <get_sensor_location>:
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
	PORT(SENSORS_PORT) |= SENSORS_PIN;
}

int8_t get_sensor_location()
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
	int8_t pos = 0;
	uint8_t i = 0;
	if(get_SENSORA())// if 1 --> then over line 
 484:	0e 94 2b 02 	call	0x456	; 0x456 <get_SENSORA>
 488:	88 23       	and	r24, r24
 48a:	19 f0       	breq	.+6      	; 0x492 <get_sensor_location+0x12>
	{	
		pos-=100;
		i++;
 48c:	c1 e0       	ldi	r28, 0x01	; 1
{
	int8_t pos = 0;
	uint8_t i = 0;
	if(get_SENSORA())// if 1 --> then over line 
	{	
		pos-=100;
 48e:	dc e9       	ldi	r29, 0x9C	; 156
 490:	02 c0       	rjmp	.+4      	; 0x496 <get_sensor_location+0x16>
}

int8_t get_sensor_location()
{
	int8_t pos = 0;
	uint8_t i = 0;
 492:	c0 e0       	ldi	r28, 0x00	; 0
	PORT(SENSORS_PORT) |= SENSORS_PIN;
}

int8_t get_sensor_location()
{
	int8_t pos = 0;
 494:	d0 e0       	ldi	r29, 0x00	; 0
	if(get_SENSORA())// if 1 --> then over line 
	{	
		pos-=100;
		i++;
	}
	if(get_SENSORB())
 496:	0e 94 2e 02 	call	0x45c	; 0x45c <get_SENSORB>
 49a:	88 23       	and	r24, r24
 49c:	11 f0       	breq	.+4      	; 0x4a2 <get_sensor_location+0x22>
	{
		pos-=30;
 49e:	de 51       	subi	r29, 0x1E	; 30
		i++;
 4a0:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORC())
 4a2:	0e 94 32 02 	call	0x464	; 0x464 <get_SENSORC>
 4a6:	81 11       	cpse	r24, r1
	{	pos+=0;
		i++;
 4a8:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORD())
 4aa:	0e 94 37 02 	call	0x46e	; 0x46e <get_SENSORD>
 4ae:	88 23       	and	r24, r24
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <get_sensor_location+0x36>
	{
		pos+=30;
 4b2:	d2 5e       	subi	r29, 0xE2	; 226
		i++;
 4b4:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORE())
 4b6:	0e 94 3c 02 	call	0x478	; 0x478 <get_SENSORE>
 4ba:	88 23       	and	r24, r24
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <get_sensor_location+0x44>
	{
		pos+=100;
 4be:	dc 59       	subi	r29, 0x9C	; 156
		i++;
 4c0:	cf 5f       	subi	r28, 0xFF	; 255
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <get_sensor_location+0x50>
	}
	else if(all_white())
 4c4:	0e 94 25 02 	call	0x44a	; 0x44a <all_white>
 4c8:	88 23       	and	r24, r24
 4ca:	11 f0       	breq	.+4      	; 0x4d0 <get_sensor_location+0x50>
	{
		pos=-128;
		i=1;
 4cc:	c1 e0       	ldi	r28, 0x01	; 1
		pos+=100;
		i++;
	}
	else if(all_white())
	{
		pos=-128;
 4ce:	d0 e8       	ldi	r29, 0x80	; 128
		i=1;
	}
	print(pos/i);
 4d0:	8d 2f       	mov	r24, r29
 4d2:	dd 0f       	add	r29, r29
 4d4:	99 0b       	sbc	r25, r25
 4d6:	6c 2f       	mov	r22, r28
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	0e 94 37 05 	call	0xa6e	; 0xa6e <__divmodhi4>
 4de:	c6 2f       	mov	r28, r22
 4e0:	97 2f       	mov	r25, r23
 4e2:	86 2f       	mov	r24, r22
 4e4:	0e 94 c6 04 	call	0x98c	; 0x98c <print>
	delay_ms(100);
 4e8:	84 e6       	ldi	r24, 0x64	; 100
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 34 05 	call	0xa68	; 0xa68 <delay_ms>
	return pos/i;
}
 4f0:	8c 2f       	mov	r24, r28
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <sensortest>:
	}
	return pos/i;
}
void sensortest(){
	
	configure_left_motor();
 4f8:	0e 94 bb 01 	call	0x376	; 0x376 <configure_left_motor>
	configure_right_motor();
 4fc:	0e 94 c4 01 	call	0x388	; 0x388 <configure_right_motor>

	set_left_motor_speed(15);
 500:	8f e0       	ldi	r24, 0x0F	; 15
 502:	0e 94 0c 02 	call	0x418	; 0x418 <set_left_motor_speed>
	set_right_motor_speed(15);
 506:	8f e0       	ldi	r24, 0x0F	; 15
 508:	0e 94 14 02 	call	0x428	; 0x428 <set_right_motor_speed>
	
	shift_right_motor_forward();
 50c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <shift_right_motor_forward>
	shift_left_motor_forward();
 510:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <shift_left_motor_forward>
	while(1)
	{
		int8_t sens = get_sensor_location();
		if(sens!=-128)
		{
			set_left_motor_speed((1500+15*(sens))/100);
 514:	0f 2e       	mov	r0, r31
 516:	ff e0       	ldi	r31, 0x0F	; 15
 518:	ff 2e       	mov	r15, r31
 51a:	f0 2d       	mov	r31, r0
 51c:	c4 e6       	ldi	r28, 0x64	; 100
 51e:	d0 e0       	ldi	r29, 0x00	; 0
	shift_right_motor_forward();
	shift_left_motor_forward();
	
	while(1)
	{
		int8_t sens = get_sensor_location();
 520:	0e 94 40 02 	call	0x480	; 0x480 <get_sensor_location>
		if(sens!=-128)
 524:	80 38       	cpi	r24, 0x80	; 128
 526:	e1 f3       	breq	.-8      	; 0x520 <sensortest+0x28>
		{
			set_left_motor_speed((1500+15*(sens))/100);
 528:	08 2f       	mov	r16, r24
 52a:	88 0f       	add	r24, r24
 52c:	11 0b       	sbc	r17, r17
 52e:	f0 9e       	mul	r15, r16
 530:	c0 01       	movw	r24, r0
 532:	f1 9e       	mul	r15, r17
 534:	90 0d       	add	r25, r0
 536:	11 24       	eor	r1, r1
 538:	84 52       	subi	r24, 0x24	; 36
 53a:	9a 4f       	sbci	r25, 0xFA	; 250
 53c:	be 01       	movw	r22, r28
 53e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__divmodhi4>
 542:	86 2f       	mov	r24, r22
 544:	0e 94 0c 02 	call	0x418	; 0x418 <set_left_motor_speed>
			set_right_motor_speed((1500-15*(sens))/100);
 548:	21 ef       	ldi	r18, 0xF1	; 241
 54a:	20 03       	mulsu	r18, r16
 54c:	c0 01       	movw	r24, r0
 54e:	21 9f       	mul	r18, r17
 550:	90 0d       	add	r25, r0
 552:	11 24       	eor	r1, r1
 554:	84 52       	subi	r24, 0x24	; 36
 556:	9a 4f       	sbci	r25, 0xFA	; 250
 558:	be 01       	movw	r22, r28
 55a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__divmodhi4>
 55e:	86 2f       	mov	r24, r22
 560:	0e 94 14 02 	call	0x428	; 0x428 <set_right_motor_speed>
 564:	dd cf       	rjmp	.-70     	; 0x520 <sensortest+0x28>

00000566 <__fixunssfsi>:
 566:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_splitA>
 56a:	88 f0       	brcs	.+34     	; 0x58e <__fixunssfsi+0x28>
 56c:	9f 57       	subi	r25, 0x7F	; 127
 56e:	98 f0       	brcs	.+38     	; 0x596 <__fixunssfsi+0x30>
 570:	b9 2f       	mov	r27, r25
 572:	99 27       	eor	r25, r25
 574:	b7 51       	subi	r27, 0x17	; 23
 576:	b0 f0       	brcs	.+44     	; 0x5a4 <__fixunssfsi+0x3e>
 578:	e1 f0       	breq	.+56     	; 0x5b2 <__fixunssfsi+0x4c>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	1a f0       	brmi	.+6      	; 0x58a <__fixunssfsi+0x24>
 584:	ba 95       	dec	r27
 586:	c9 f7       	brne	.-14     	; 0x57a <__fixunssfsi+0x14>
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <__fixunssfsi+0x4c>
 58a:	b1 30       	cpi	r27, 0x01	; 1
 58c:	91 f0       	breq	.+36     	; 0x5b2 <__fixunssfsi+0x4c>
 58e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_zero>
 592:	b1 e0       	ldi	r27, 0x01	; 1
 594:	08 95       	ret
 596:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_zero>
 59a:	67 2f       	mov	r22, r23
 59c:	78 2f       	mov	r23, r24
 59e:	88 27       	eor	r24, r24
 5a0:	b8 5f       	subi	r27, 0xF8	; 248
 5a2:	39 f0       	breq	.+14     	; 0x5b2 <__fixunssfsi+0x4c>
 5a4:	b9 3f       	cpi	r27, 0xF9	; 249
 5a6:	cc f3       	brlt	.-14     	; 0x59a <__fixunssfsi+0x34>
 5a8:	86 95       	lsr	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b3 95       	inc	r27
 5b0:	d9 f7       	brne	.-10     	; 0x5a8 <__fixunssfsi+0x42>
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__fixunssfsi+0x5c>
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__floatunsisf>:
 5c4:	e8 94       	clt
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <__floatsisf+0x12>

000005c8 <__floatsisf>:
 5c8:	97 fb       	bst	r25, 7
 5ca:	3e f4       	brtc	.+14     	; 0x5da <__floatsisf+0x12>
 5cc:	90 95       	com	r25
 5ce:	80 95       	com	r24
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	99 23       	and	r25, r25
 5dc:	a9 f0       	breq	.+42     	; 0x608 <__floatsisf+0x40>
 5de:	f9 2f       	mov	r31, r25
 5e0:	96 e9       	ldi	r25, 0x96	; 150
 5e2:	bb 27       	eor	r27, r27
 5e4:	93 95       	inc	r25
 5e6:	f6 95       	lsr	r31
 5e8:	87 95       	ror	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	f1 11       	cpse	r31, r1
 5f2:	f8 cf       	rjmp	.-16     	; 0x5e4 <__floatsisf+0x1c>
 5f4:	fa f4       	brpl	.+62     	; 0x634 <__floatsisf+0x6c>
 5f6:	bb 0f       	add	r27, r27
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__floatsisf+0x36>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	1b c0       	rjmp	.+54     	; 0x634 <__floatsisf+0x6c>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	16 c0       	rjmp	.+44     	; 0x634 <__floatsisf+0x6c>
 608:	88 23       	and	r24, r24
 60a:	11 f0       	breq	.+4      	; 0x610 <__floatsisf+0x48>
 60c:	96 e9       	ldi	r25, 0x96	; 150
 60e:	11 c0       	rjmp	.+34     	; 0x632 <__floatsisf+0x6a>
 610:	77 23       	and	r23, r23
 612:	21 f0       	breq	.+8      	; 0x61c <__floatsisf+0x54>
 614:	9e e8       	ldi	r25, 0x8E	; 142
 616:	87 2f       	mov	r24, r23
 618:	76 2f       	mov	r23, r22
 61a:	05 c0       	rjmp	.+10     	; 0x626 <__floatsisf+0x5e>
 61c:	66 23       	and	r22, r22
 61e:	71 f0       	breq	.+28     	; 0x63c <__floatsisf+0x74>
 620:	96 e8       	ldi	r25, 0x86	; 134
 622:	86 2f       	mov	r24, r22
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	2a f0       	brmi	.+10     	; 0x634 <__floatsisf+0x6c>
 62a:	9a 95       	dec	r25
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	da f7       	brpl	.-10     	; 0x62a <__floatsisf+0x62>
 634:	88 0f       	add	r24, r24
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__fp_inf>:
 63e:	97 f9       	bld	r25, 7
 640:	9f 67       	ori	r25, 0x7F	; 127
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	08 95       	ret

0000064a <__fp_nan>:
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	08 95       	ret

00000650 <__fp_pscA>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	18 06       	cpc	r1, r24
 65a:	09 06       	cpc	r0, r25
 65c:	08 95       	ret

0000065e <__fp_pscB>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	12 16       	cp	r1, r18
 664:	13 06       	cpc	r1, r19
 666:	14 06       	cpc	r1, r20
 668:	05 06       	cpc	r0, r21
 66a:	08 95       	ret

0000066c <__fp_round>:
 66c:	09 2e       	mov	r0, r25
 66e:	03 94       	inc	r0
 670:	00 0c       	add	r0, r0
 672:	11 f4       	brne	.+4      	; 0x678 <__fp_round+0xc>
 674:	88 23       	and	r24, r24
 676:	52 f0       	brmi	.+20     	; 0x68c <__fp_round+0x20>
 678:	bb 0f       	add	r27, r27
 67a:	40 f4       	brcc	.+16     	; 0x68c <__fp_round+0x20>
 67c:	bf 2b       	or	r27, r31
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0x18>
 680:	60 ff       	sbrs	r22, 0
 682:	04 c0       	rjmp	.+8      	; 0x68c <__fp_round+0x20>
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	08 95       	ret

0000068e <__fp_split3>:
 68e:	57 fd       	sbrc	r21, 7
 690:	90 58       	subi	r25, 0x80	; 128
 692:	44 0f       	add	r20, r20
 694:	55 1f       	adc	r21, r21
 696:	59 f0       	breq	.+22     	; 0x6ae <__fp_splitA+0x10>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	71 f0       	breq	.+28     	; 0x6b8 <__fp_splitA+0x1a>
 69c:	47 95       	ror	r20

0000069e <__fp_splitA>:
 69e:	88 0f       	add	r24, r24
 6a0:	97 fb       	bst	r25, 7
 6a2:	99 1f       	adc	r25, r25
 6a4:	61 f0       	breq	.+24     	; 0x6be <__fp_splitA+0x20>
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <__fp_splitA+0x2a>
 6aa:	87 95       	ror	r24
 6ac:	08 95       	ret
 6ae:	12 16       	cp	r1, r18
 6b0:	13 06       	cpc	r1, r19
 6b2:	14 06       	cpc	r1, r20
 6b4:	55 1f       	adc	r21, r21
 6b6:	f2 cf       	rjmp	.-28     	; 0x69c <__fp_split3+0xe>
 6b8:	46 95       	lsr	r20
 6ba:	f1 df       	rcall	.-30     	; 0x69e <__fp_splitA>
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <__fp_splitA+0x30>
 6be:	16 16       	cp	r1, r22
 6c0:	17 06       	cpc	r1, r23
 6c2:	18 06       	cpc	r1, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	f1 cf       	rjmp	.-30     	; 0x6aa <__fp_splitA+0xc>
 6c8:	86 95       	lsr	r24
 6ca:	71 05       	cpc	r23, r1
 6cc:	61 05       	cpc	r22, r1
 6ce:	08 94       	sec
 6d0:	08 95       	ret

000006d2 <__fp_zero>:
 6d2:	e8 94       	clt

000006d4 <__fp_szero>:
 6d4:	bb 27       	eor	r27, r27
 6d6:	66 27       	eor	r22, r22
 6d8:	77 27       	eor	r23, r23
 6da:	cb 01       	movw	r24, r22
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <__mulsf3>:
 6e0:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3x>
 6e4:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_round>
 6e8:	0e 94 28 03 	call	0x650	; 0x650 <__fp_pscA>
 6ec:	38 f0       	brcs	.+14     	; 0x6fc <__mulsf3+0x1c>
 6ee:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscB>
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__mulsf3+0x1c>
 6f4:	95 23       	and	r25, r21
 6f6:	11 f0       	breq	.+4      	; 0x6fc <__mulsf3+0x1c>
 6f8:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 6fc:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>
 700:	11 24       	eor	r1, r1
 702:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>

00000706 <__mulsf3x>:
 706:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_split3>
 70a:	70 f3       	brcs	.-36     	; 0x6e8 <__mulsf3+0x8>

0000070c <__mulsf3_pse>:
 70c:	95 9f       	mul	r25, r21
 70e:	c1 f3       	breq	.-16     	; 0x700 <__mulsf3+0x20>
 710:	95 0f       	add	r25, r21
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	55 1f       	adc	r21, r21
 716:	62 9f       	mul	r22, r18
 718:	f0 01       	movw	r30, r0
 71a:	72 9f       	mul	r23, r18
 71c:	bb 27       	eor	r27, r27
 71e:	f0 0d       	add	r31, r0
 720:	b1 1d       	adc	r27, r1
 722:	63 9f       	mul	r22, r19
 724:	aa 27       	eor	r26, r26
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	aa 1f       	adc	r26, r26
 72c:	64 9f       	mul	r22, r20
 72e:	66 27       	eor	r22, r22
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	66 1f       	adc	r22, r22
 736:	82 9f       	mul	r24, r18
 738:	22 27       	eor	r18, r18
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	62 1f       	adc	r22, r18
 740:	73 9f       	mul	r23, r19
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	83 9f       	mul	r24, r19
 74a:	a0 0d       	add	r26, r0
 74c:	61 1d       	adc	r22, r1
 74e:	22 1f       	adc	r18, r18
 750:	74 9f       	mul	r23, r20
 752:	33 27       	eor	r19, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	23 1f       	adc	r18, r19
 75a:	84 9f       	mul	r24, r20
 75c:	60 0d       	add	r22, r0
 75e:	21 1d       	adc	r18, r1
 760:	82 2f       	mov	r24, r18
 762:	76 2f       	mov	r23, r22
 764:	6a 2f       	mov	r22, r26
 766:	11 24       	eor	r1, r1
 768:	9f 57       	subi	r25, 0x7F	; 127
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	9a f0       	brmi	.+38     	; 0x794 <__mulsf3_pse+0x88>
 76e:	f1 f0       	breq	.+60     	; 0x7ac <__mulsf3_pse+0xa0>
 770:	88 23       	and	r24, r24
 772:	4a f0       	brmi	.+18     	; 0x786 <__mulsf3_pse+0x7a>
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	bb 1f       	adc	r27, r27
 77a:	66 1f       	adc	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	91 50       	subi	r25, 0x01	; 1
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	a9 f7       	brne	.-22     	; 0x770 <__mulsf3_pse+0x64>
 786:	9e 3f       	cpi	r25, 0xFE	; 254
 788:	51 05       	cpc	r21, r1
 78a:	80 f0       	brcs	.+32     	; 0x7ac <__mulsf3_pse+0xa0>
 78c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 790:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	e4 f3       	brlt	.-8      	; 0x790 <__mulsf3_pse+0x84>
 798:	98 3e       	cpi	r25, 0xE8	; 232
 79a:	d4 f3       	brlt	.-12     	; 0x790 <__mulsf3_pse+0x84>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	e7 95       	ror	r30
 7a8:	9f 5f       	subi	r25, 0xFF	; 255
 7aa:	c1 f7       	brne	.-16     	; 0x79c <__mulsf3_pse+0x90>
 7ac:	fe 2b       	or	r31, r30
 7ae:	88 0f       	add	r24, r24
 7b0:	91 1d       	adc	r25, r1
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <delay_us.constprop.0>:
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	6f 93       	push	r22
 7c0:	64 e0       	ldi	r22, 0x04	; 4
 7c2:	6a 95       	dec	r22
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <delay_us.constprop.0+0x8>
 7c6:	6f 91       	pop	r22
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	c9 f7       	brne	.-14     	; 0x7be <delay_us.constprop.0+0x4>
 7cc:	08 95       	ret

000007ce <_ZN12OrangutanLCD8busyWaitEv>:
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	1a b1       	in	r17, 0x0a	; 10
 7d8:	57 98       	cbi	0x0a, 7	; 10
 7da:	5a 98       	cbi	0x0b, 2	; 11
 7dc:	28 9a       	sbi	0x05, 0	; 5
 7de:	c0 e0       	ldi	r28, 0x00	; 0
 7e0:	d0 e0       	ldi	r29, 0x00	; 0
 7e2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay_us.constprop.0>
 7e6:	5c 9a       	sbi	0x0b, 4	; 11
 7e8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay_us.constprop.0>
 7ec:	09 b1       	in	r16, 0x09	; 9
 7ee:	5c 98       	cbi	0x0b, 4	; 11
 7f0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay_us.constprop.0>
 7f4:	5c 9a       	sbi	0x0b, 4	; 11
 7f6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay_us.constprop.0>
 7fa:	5c 98       	cbi	0x0b, 4	; 11
 7fc:	24 96       	adiw	r28, 0x04	; 4
 7fe:	07 ff       	sbrs	r16, 7
 800:	10 c0       	rjmp	.+32     	; 0x822 <_ZN12OrangutanLCD8busyWaitEv+0x54>
 802:	ae 01       	movw	r20, r28
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	80 91 0e 01 	lds	r24, 0x010E
 80c:	90 91 0f 01 	lds	r25, 0x010F
 810:	a0 91 10 01 	lds	r26, 0x0110
 814:	b0 91 11 01 	lds	r27, 0x0111
 818:	48 17       	cp	r20, r24
 81a:	59 07       	cpc	r21, r25
 81c:	6a 07       	cpc	r22, r26
 81e:	7b 07       	cpc	r23, r27
 820:	00 f3       	brcs	.-64     	; 0x7e2 <_ZN12OrangutanLCD8busyWaitEv+0x14>
 822:	1a b9       	out	0x0a, r17	; 10
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	08 95       	ret

0000082e <_ZN12OrangutanLCD8sendDataEh>:
 82e:	95 b1       	in	r25, 0x05	; 5
 830:	28 2f       	mov	r18, r24
 832:	21 70       	andi	r18, 0x01	; 1
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	48 2f       	mov	r20, r24
 83c:	46 70       	andi	r20, 0x06	; 6
 83e:	68 e0       	ldi	r22, 0x08	; 8
 840:	46 9f       	mul	r20, r22
 842:	a0 01       	movw	r20, r0
 844:	11 24       	eor	r1, r1
 846:	24 2b       	or	r18, r20
 848:	9d 7c       	andi	r25, 0xCD	; 205
 84a:	29 2b       	or	r18, r25
 84c:	25 b9       	out	0x05, r18	; 5
 84e:	9b b1       	in	r25, 0x0b	; 11
 850:	88 70       	andi	r24, 0x08	; 8
 852:	82 95       	swap	r24
 854:	80 7f       	andi	r24, 0xF0	; 240
 856:	9f 77       	andi	r25, 0x7F	; 127
 858:	89 2b       	or	r24, r25
 85a:	8b b9       	out	0x0b, r24	; 11
 85c:	5c 9a       	sbi	0x0b, 4	; 11
 85e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay_us.constprop.0>
 862:	5c 98       	cbi	0x0b, 4	; 11
 864:	0e 94 dd 03 	call	0x7ba	; 0x7ba <delay_us.constprop.0>
 868:	08 95       	ret

0000086a <_ZN12OrangutanLCD4sendEhhh>:
 86a:	a0 e0       	ldi	r26, 0x00	; 0
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	eb e3       	ldi	r30, 0x3B	; 59
 870:	f4 e0       	ldi	r31, 0x04	; 4
 872:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__prologue_saves__+0x16>
 876:	c8 2f       	mov	r28, r24
 878:	d6 2e       	mov	r13, r22
 87a:	e4 2e       	mov	r14, r20
 87c:	80 91 20 01 	lds	r24, 0x0120
 880:	81 11       	cpse	r24, r1
 882:	05 c0       	rjmp	.+10     	; 0x88e <_ZN12OrangutanLCD4sendEhhh+0x24>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 20 01 	sts	0x0120, r24
 88a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12OrangutanLCD5init2Ev>
 88e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN12OrangutanLCD8busyWaitEv>
 892:	14 b1       	in	r17, 0x04	; 4
 894:	d5 b1       	in	r29, 0x05	; 5
 896:	fa b0       	in	r15, 0x0a	; 10
 898:	0b b1       	in	r16, 0x0b	; 11
 89a:	28 98       	cbi	0x05, 0	; 5
 89c:	dd 20       	and	r13, r13
 89e:	11 f0       	breq	.+4      	; 0x8a4 <_ZN12OrangutanLCD4sendEhhh+0x3a>
 8a0:	5a 9a       	sbi	0x0b, 2	; 11
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <_ZN12OrangutanLCD4sendEhhh+0x3c>
 8a4:	5a 98       	cbi	0x0b, 2	; 11
 8a6:	94 b1       	in	r25, 0x04	; 4
 8a8:	92 63       	ori	r25, 0x32	; 50
 8aa:	94 b9       	out	0x04, r25	; 4
 8ac:	57 9a       	sbi	0x0a, 7	; 10
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	e8 16       	cp	r14, r24
 8b2:	29 f0       	breq	.+10     	; 0x8be <_ZN12OrangutanLCD4sendEhhh+0x54>
 8b4:	8c 2f       	mov	r24, r28
 8b6:	82 95       	swap	r24
 8b8:	8f 70       	andi	r24, 0x0F	; 15
 8ba:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN12OrangutanLCD8sendDataEh>
 8be:	8c 2f       	mov	r24, r28
 8c0:	8f 70       	andi	r24, 0x0F	; 15
 8c2:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN12OrangutanLCD8sendDataEh>
 8c6:	fa b8       	out	0x0a, r15	; 10
 8c8:	0b b9       	out	0x0b, r16	; 11
 8ca:	14 b9       	out	0x04, r17	; 4
 8cc:	d5 b9       	out	0x05, r29	; 5
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	e7 e0       	ldi	r30, 0x07	; 7
 8d4:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__epilogue_restores__+0x16>

000008d8 <_ZN12OrangutanLCD8send_cmdEh>:
 8d8:	42 e0       	ldi	r20, 0x02	; 2
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN12OrangutanLCD4sendEhhh>
 8e0:	08 95       	ret

000008e2 <_ZN12OrangutanLCD9send_dataEh>:
 8e2:	42 e0       	ldi	r20, 0x02	; 2
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN12OrangutanLCD4sendEhhh>
 8ea:	08 95       	ret

000008ec <_ZN12OrangutanLCD13send_4bit_cmdEh>:
 8ec:	41 e0       	ldi	r20, 0x01	; 1
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN12OrangutanLCD4sendEhhh>
 8f4:	08 95       	ret

000008f6 <_ZN12OrangutanLCD5init2Ev>:
 8f6:	80 e1       	ldi	r24, 0x10	; 16
 8f8:	97 e2       	ldi	r25, 0x27	; 39
 8fa:	a0 e0       	ldi	r26, 0x00	; 0
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	80 93 0e 01 	sts	0x010E, r24
 902:	90 93 0f 01 	sts	0x010F, r25
 906:	a0 93 10 01 	sts	0x0110, r26
 90a:	b0 93 11 01 	sts	0x0111, r27
 90e:	52 9a       	sbi	0x0a, 2	; 10
 910:	20 9a       	sbi	0x04, 0	; 4
 912:	54 9a       	sbi	0x0a, 4	; 10
 914:	8e e1       	ldi	r24, 0x1E	; 30
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 34 05 	call	0xa68	; 0xa68 <delay_ms>
 91c:	83 e0       	ldi	r24, 0x03	; 3
 91e:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN12OrangutanLCD13send_4bit_cmdEh>
 922:	86 e0       	ldi	r24, 0x06	; 6
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 34 05 	call	0xa68	; 0xa68 <delay_ms>
 92a:	83 e0       	ldi	r24, 0x03	; 3
 92c:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN12OrangutanLCD13send_4bit_cmdEh>
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 34 05 	call	0xa68	; 0xa68 <delay_ms>
 938:	83 e0       	ldi	r24, 0x03	; 3
 93a:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN12OrangutanLCD13send_4bit_cmdEh>
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 34 05 	call	0xa68	; 0xa68 <delay_ms>
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN12OrangutanLCD13send_4bit_cmdEh>
 94c:	82 e0       	ldi	r24, 0x02	; 2
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 34 05 	call	0xa68	; 0xa68 <delay_ms>
 954:	88 e2       	ldi	r24, 0x28	; 40
 956:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN12OrangutanLCD8send_cmdEh>
 95a:	88 e0       	ldi	r24, 0x08	; 8
 95c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN12OrangutanLCD8send_cmdEh>
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN12OrangutanLCD8send_cmdEh>
 966:	86 e0       	ldi	r24, 0x06	; 6
 968:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN12OrangutanLCD8send_cmdEh>
 96c:	8c e0       	ldi	r24, 0x0C	; 12
 96e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN12OrangutanLCD8send_cmdEh>
 972:	08 95       	ret

00000974 <_ZN12OrangutanLCD5printEPKc>:
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	ec 01       	movw	r28, r24
 97a:	89 91       	ld	r24, Y+
 97c:	88 23       	and	r24, r24
 97e:	19 f0       	breq	.+6      	; 0x986 <_ZN12OrangutanLCD5printEPKc+0x12>
 980:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN12OrangutanLCD9send_dataEh>
 984:	fa cf       	rjmp	.-12     	; 0x97a <_ZN12OrangutanLCD5printEPKc+0x6>
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	08 95       	ret

0000098c <print>:
 98c:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN12OrangutanLCD5printEPKc>
 990:	08 95       	ret

00000992 <_ZN12OrangutanLCD6gotoXYEhh>:
 992:	a5 e0       	ldi	r26, 0x05	; 5
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	ef ec       	ldi	r30, 0xCF	; 207
 998:	f4 e0       	ldi	r31, 0x04	; 4
 99a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__prologue_saves__+0x1e>
 99e:	18 2f       	mov	r17, r24
 9a0:	80 e8       	ldi	r24, 0x80	; 128
 9a2:	89 83       	std	Y+1, r24	; 0x01
 9a4:	80 ec       	ldi	r24, 0xC0	; 192
 9a6:	8a 83       	std	Y+2, r24	; 0x02
 9a8:	84 e9       	ldi	r24, 0x94	; 148
 9aa:	8b 83       	std	Y+3, r24	; 0x03
 9ac:	84 ed       	ldi	r24, 0xD4	; 212
 9ae:	8c 83       	std	Y+4, r24	; 0x04
 9b0:	fe 01       	movw	r30, r28
 9b2:	e6 0f       	add	r30, r22
 9b4:	f1 1d       	adc	r31, r1
 9b6:	81 81       	ldd	r24, Z+1	; 0x01
 9b8:	81 0f       	add	r24, r17
 9ba:	6d 83       	std	Y+5, r22	; 0x05
 9bc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN12OrangutanLCD8send_cmdEh>
 9c0:	10 93 12 01 	sts	0x0112, r17
 9c4:	6d 81       	ldd	r22, Y+5	; 0x05
 9c6:	60 93 13 01 	sts	0x0113, r22
 9ca:	25 96       	adiw	r28, 0x05	; 5
 9cc:	e3 e0       	ldi	r30, 0x03	; 3
 9ce:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__epilogue_restores__+0x1e>

000009d2 <lcd_goto_xy>:
 9d2:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN12OrangutanLCD6gotoXYEhh>
 9d6:	08 95       	ret

000009d8 <__vector_9>:
 9d8:	2f 92       	push	r2
 9da:	8f 93       	push	r24
 9dc:	9f 93       	push	r25
 9de:	2f b6       	in	r2, 0x3f	; 63
 9e0:	80 91 1d 01 	lds	r24, 0x011D
 9e4:	90 91 1e 01 	lds	r25, 0x011E
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	80 93 1d 01 	sts	0x011D, r24
 9ee:	90 93 1e 01 	sts	0x011E, r25
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	80 91 1f 01 	lds	r24, 0x011F
 9f8:	89 1f       	adc	r24, r25
 9fa:	80 93 1f 01 	sts	0x011F, r24
 9fe:	90 91 17 01 	lds	r25, 0x0117
 a02:	9c 5f       	subi	r25, 0xFC	; 252
 a04:	90 93 17 01 	sts	0x0117, r25
 a08:	80 91 16 01 	lds	r24, 0x0116
 a0c:	80 51       	subi	r24, 0x10	; 16
 a0e:	97 42       	sbci	r25, 0x27	; 39
 a10:	c0 f0       	brcs	.+48     	; 0xa42 <end>
 a12:	90 93 17 01 	sts	0x0117, r25
 a16:	80 93 16 01 	sts	0x0116, r24
 a1a:	80 91 18 01 	lds	r24, 0x0118
 a1e:	90 91 19 01 	lds	r25, 0x0119
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	80 93 18 01 	sts	0x0118, r24
 a28:	90 93 19 01 	sts	0x0119, r25
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	80 91 1a 01 	lds	r24, 0x011A
 a32:	89 1f       	adc	r24, r25
 a34:	80 93 1a 01 	sts	0x011A, r24
 a38:	80 91 1b 01 	lds	r24, 0x011B
 a3c:	89 1f       	adc	r24, r25
 a3e:	80 93 1b 01 	sts	0x011B, r24

00000a42 <end>:
 a42:	2f be       	out	0x3f, r2	; 63
 a44:	9f 91       	pop	r25
 a46:	8f 91       	pop	r24
 a48:	2f 90       	pop	r2
 a4a:	18 95       	reti

00000a4c <_ZN13OrangutanTime17delayMillisecondsEj>:
 a4c:	28 ee       	ldi	r18, 0xE8	; 232
 a4e:	33 e0       	ldi	r19, 0x03	; 3
 a50:	01 97       	sbiw	r24, 0x01	; 1
 a52:	48 f0       	brcs	.+18     	; 0xa66 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
 a54:	f9 01       	movw	r30, r18
 a56:	6f 93       	push	r22
 a58:	64 e0       	ldi	r22, 0x04	; 4
 a5a:	6a 95       	dec	r22
 a5c:	f1 f7       	brne	.-4      	; 0xa5a <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
 a5e:	6f 91       	pop	r22
 a60:	31 97       	sbiw	r30, 0x01	; 1
 a62:	c9 f7       	brne	.-14     	; 0xa56 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
 a64:	f5 cf       	rjmp	.-22     	; 0xa50 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
 a66:	08 95       	ret

00000a68 <delay_ms>:
 a68:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN13OrangutanTime17delayMillisecondsEj>
 a6c:	08 95       	ret

00000a6e <__divmodhi4>:
 a6e:	97 fb       	bst	r25, 7
 a70:	07 2e       	mov	r0, r23
 a72:	16 f4       	brtc	.+4      	; 0xa78 <__divmodhi4+0xa>
 a74:	00 94       	com	r0
 a76:	07 d0       	rcall	.+14     	; 0xa86 <__divmodhi4_neg1>
 a78:	77 fd       	sbrc	r23, 7
 a7a:	09 d0       	rcall	.+18     	; 0xa8e <__divmodhi4_neg2>
 a7c:	0e 94 a4 05 	call	0xb48	; 0xb48 <__udivmodhi4>
 a80:	07 fc       	sbrc	r0, 7
 a82:	05 d0       	rcall	.+10     	; 0xa8e <__divmodhi4_neg2>
 a84:	3e f4       	brtc	.+14     	; 0xa94 <__divmodhi4_exit>

00000a86 <__divmodhi4_neg1>:
 a86:	90 95       	com	r25
 a88:	81 95       	neg	r24
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__divmodhi4_neg2>:
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255

00000a94 <__divmodhi4_exit>:
 a94:	08 95       	ret

00000a96 <__udivmodsi4>:
 a96:	a1 e2       	ldi	r26, 0x21	; 33
 a98:	1a 2e       	mov	r1, r26
 a9a:	aa 1b       	sub	r26, r26
 a9c:	bb 1b       	sub	r27, r27
 a9e:	fd 01       	movw	r30, r26
 aa0:	0d c0       	rjmp	.+26     	; 0xabc <__udivmodsi4_ep>

00000aa2 <__udivmodsi4_loop>:
 aa2:	aa 1f       	adc	r26, r26
 aa4:	bb 1f       	adc	r27, r27
 aa6:	ee 1f       	adc	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	a2 17       	cp	r26, r18
 aac:	b3 07       	cpc	r27, r19
 aae:	e4 07       	cpc	r30, r20
 ab0:	f5 07       	cpc	r31, r21
 ab2:	20 f0       	brcs	.+8      	; 0xabc <__udivmodsi4_ep>
 ab4:	a2 1b       	sub	r26, r18
 ab6:	b3 0b       	sbc	r27, r19
 ab8:	e4 0b       	sbc	r30, r20
 aba:	f5 0b       	sbc	r31, r21

00000abc <__udivmodsi4_ep>:
 abc:	66 1f       	adc	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	1a 94       	dec	r1
 ac6:	69 f7       	brne	.-38     	; 0xaa2 <__udivmodsi4_loop>
 ac8:	60 95       	com	r22
 aca:	70 95       	com	r23
 acc:	80 95       	com	r24
 ace:	90 95       	com	r25
 ad0:	9b 01       	movw	r18, r22
 ad2:	ac 01       	movw	r20, r24
 ad4:	bd 01       	movw	r22, r26
 ad6:	cf 01       	movw	r24, r30
 ad8:	08 95       	ret

00000ada <__prologue_saves__>:
 ada:	2f 92       	push	r2
 adc:	3f 92       	push	r3
 ade:	4f 92       	push	r4
 ae0:	5f 92       	push	r5
 ae2:	6f 92       	push	r6
 ae4:	7f 92       	push	r7
 ae6:	8f 92       	push	r8
 ae8:	9f 92       	push	r9
 aea:	af 92       	push	r10
 aec:	bf 92       	push	r11
 aee:	cf 92       	push	r12
 af0:	df 92       	push	r13
 af2:	ef 92       	push	r14
 af4:	ff 92       	push	r15
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
 afe:	cd b7       	in	r28, 0x3d	; 61
 b00:	de b7       	in	r29, 0x3e	; 62
 b02:	ca 1b       	sub	r28, r26
 b04:	db 0b       	sbc	r29, r27
 b06:	0f b6       	in	r0, 0x3f	; 63
 b08:	f8 94       	cli
 b0a:	de bf       	out	0x3e, r29	; 62
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	cd bf       	out	0x3d, r28	; 61
 b10:	09 94       	ijmp

00000b12 <__epilogue_restores__>:
 b12:	2a 88       	ldd	r2, Y+18	; 0x12
 b14:	39 88       	ldd	r3, Y+17	; 0x11
 b16:	48 88       	ldd	r4, Y+16	; 0x10
 b18:	5f 84       	ldd	r5, Y+15	; 0x0f
 b1a:	6e 84       	ldd	r6, Y+14	; 0x0e
 b1c:	7d 84       	ldd	r7, Y+13	; 0x0d
 b1e:	8c 84       	ldd	r8, Y+12	; 0x0c
 b20:	9b 84       	ldd	r9, Y+11	; 0x0b
 b22:	aa 84       	ldd	r10, Y+10	; 0x0a
 b24:	b9 84       	ldd	r11, Y+9	; 0x09
 b26:	c8 84       	ldd	r12, Y+8	; 0x08
 b28:	df 80       	ldd	r13, Y+7	; 0x07
 b2a:	ee 80       	ldd	r14, Y+6	; 0x06
 b2c:	fd 80       	ldd	r15, Y+5	; 0x05
 b2e:	0c 81       	ldd	r16, Y+4	; 0x04
 b30:	1b 81       	ldd	r17, Y+3	; 0x03
 b32:	aa 81       	ldd	r26, Y+2	; 0x02
 b34:	b9 81       	ldd	r27, Y+1	; 0x01
 b36:	ce 0f       	add	r28, r30
 b38:	d1 1d       	adc	r29, r1
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	f8 94       	cli
 b3e:	de bf       	out	0x3e, r29	; 62
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	cd bf       	out	0x3d, r28	; 61
 b44:	ed 01       	movw	r28, r26
 b46:	08 95       	ret

00000b48 <__udivmodhi4>:
 b48:	aa 1b       	sub	r26, r26
 b4a:	bb 1b       	sub	r27, r27
 b4c:	51 e1       	ldi	r21, 0x11	; 17
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <__udivmodhi4_ep>

00000b50 <__udivmodhi4_loop>:
 b50:	aa 1f       	adc	r26, r26
 b52:	bb 1f       	adc	r27, r27
 b54:	a6 17       	cp	r26, r22
 b56:	b7 07       	cpc	r27, r23
 b58:	10 f0       	brcs	.+4      	; 0xb5e <__udivmodhi4_ep>
 b5a:	a6 1b       	sub	r26, r22
 b5c:	b7 0b       	sbc	r27, r23

00000b5e <__udivmodhi4_ep>:
 b5e:	88 1f       	adc	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	5a 95       	dec	r21
 b64:	a9 f7       	brne	.-22     	; 0xb50 <__udivmodhi4_loop>
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	bc 01       	movw	r22, r24
 b6c:	cd 01       	movw	r24, r26
 b6e:	08 95       	ret

00000b70 <_exit>:
 b70:	f8 94       	cli

00000b72 <__stop_program>:
 b72:	ff cf       	rjmp	.-2      	; 0xb72 <__stop_program>
