
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000b1e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010e  0080010e  00000bc0  2**0
                  ALLOC
  3 .stab         000015a8  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a6c  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00004bd4  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c18  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000268  00000000  00000000  00004c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000187c  00000000  00000000  00004ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000874  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000bee  00000000  00000000  00006fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000047c  00000000  00000000  00007ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000007bd  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000605  00000000  00000000  000087d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000208  00000000  00000000  00008dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  9e:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configure_push_button_array>:
#include "button_driver.h"

void configure_push_button_array()
{
	DDR(BUTTON_PIN) &= ~(1<<BUTTONA_LOC);
  a6:	21 98       	cbi	0x04, 1	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONB_LOC);
  a8:	24 98       	cbi	0x04, 4	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONC_LOC);
  aa:	25 98       	cbi	0x04, 5	; 4
	PORT(BUTTON_PIN) |= (1<<BUTTONA_LOC);
  ac:	29 9a       	sbi	0x05, 1	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONB_LOC);
  ae:	2c 9a       	sbi	0x05, 4	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONC_LOC);
  b0:	2d 9a       	sbi	0x05, 5	; 5
  b2:	08 95       	ret

000000b4 <init_buzzer>:
 */

#include "main.h"

void init_buzzer(){
	DDR(BUZZER_PORT) |= (BUZZER_PIN);
  b4:	22 9a       	sbi	0x04, 2	; 4
	TIMER1_CLK |= ( (1<<0)	| (1<<4) | (1<<5) );
  b6:	e0 e8       	ldi	r30, 0x80	; 128
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 63       	ori	r24, 0x31	; 49
  be:	80 83       	st	Z, r24
	TIMER2_CLK |= (1<<4);
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <playFrequency>:
}
void playFrequency(uint32_t freq, uint8_t dur)
{
  cc:	cf 93       	push	r28
  ce:	c4 2f       	mov	r28, r20
	if (freq < 40) freq = 40;	
  d0:	68 32       	cpi	r22, 0x28	; 40
  d2:	71 05       	cpc	r23, r1
  d4:	81 05       	cpc	r24, r1
  d6:	91 05       	cpc	r25, r1
  d8:	20 f4       	brcc	.+8      	; 0xe2 <playFrequency+0x16>
  da:	68 e2       	ldi	r22, 0x28	; 40
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	21 31       	cpi	r18, 0x11	; 17
  e8:	87 e2       	ldi	r24, 0x27	; 39
  ea:	38 07       	cpc	r19, r24
  ec:	41 05       	cpc	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	20 f0       	brcs	.+8      	; 0xfa <playFrequency+0x2e>
  f2:	20 e1       	ldi	r18, 0x10	; 16
  f4:	37 e2       	ldi	r19, 0x27	; 39
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
	if (freq > 10000) freq = 10000;    
 
	uint32_t top = (F_CPU/freq);
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	72 e4       	ldi	r23, 0x42	; 66
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
	TIMER2_CLK |= (1<<0);
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
	OCR1A = top;	
 110:	30 93 89 00 	sts	0x0089, r19
 114:	20 93 88 00 	sts	0x0088, r18
	OCR1B = (top>>2);
 118:	da 01       	movw	r26, r20
 11a:	c9 01       	movw	r24, r18
 11c:	b6 95       	lsr	r27
 11e:	a7 95       	ror	r26
 120:	97 95       	ror	r25
 122:	87 95       	ror	r24
 124:	b6 95       	lsr	r27
 126:	a7 95       	ror	r26
 128:	97 95       	ror	r25
 12a:	87 95       	ror	r24
 12c:	90 93 8b 00 	sts	0x008B, r25
 130:	80 93 8a 00 	sts	0x008A, r24
	
	uint8_t i;
	for (i=0;i<dur; i++){
 134:	cc 23       	and	r28, r28
 136:	69 f0       	breq	.+26     	; 0x152 <playFrequency+0x86>
 138:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	9f e9       	ldi	r25, 0x9F	; 159
 13c:	26 e8       	ldi	r18, 0x86	; 134
 13e:	31 e0       	ldi	r19, 0x01	; 1
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <playFrequency+0x74>
 148:	00 c0       	rjmp	.+0      	; 0x14a <playFrequency+0x7e>
 14a:	00 00       	nop
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	8c 13       	cpse	r24, r28
 150:	f4 cf       	rjmp	.-24     	; 0x13a <playFrequency+0x6e>
		
		_delay_ms(500);
	}
	TIMER2_CLK &= ~(1<<0);
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	80 83       	st	Z, r24
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <set_DB_input>:
	DDR(E_PORT) |= (1<<E_LOC);
}

static void set_DB_input()
{
	DDR(DB0_PORT) &= ~(1<<DB0_LOC);
 160:	21 98       	cbi	0x04, 1	; 4
	DDR(DB1_PORT) &= ~(1<<DB1_LOC);
 162:	24 98       	cbi	0x04, 4	; 4
	DDR(DB2_PORT) &= ~(1<<DB2_LOC);
 164:	25 98       	cbi	0x04, 5	; 4
	DDR(DB3_PORT) &= ~(1<<DB3_LOC);
 166:	57 98       	cbi	0x0a, 7	; 10
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 168:	29 9a       	sbi	0x05, 1	; 5
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 16a:	2c 9a       	sbi	0x05, 4	; 5
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 16c:	2d 9a       	sbi	0x05, 5	; 5
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	08 95       	ret

00000172 <set_DB_output>:
}

static void set_DB_output()
{
	DDR(DB0_PORT) |= (1<<DB0_LOC);
 172:	21 9a       	sbi	0x04, 1	; 4
	DDR(DB1_PORT) |= (1<<DB1_LOC);
 174:	24 9a       	sbi	0x04, 4	; 4
	DDR(DB2_PORT) |= (1<<DB2_LOC);
 176:	25 9a       	sbi	0x04, 5	; 4
	DDR(DB3_PORT) |= (1<<DB3_LOC);
 178:	57 9a       	sbi	0x0a, 7	; 10
 17a:	08 95       	ret

0000017c <pulse_E>:
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
}

static void set_E()
{
	PORT(E_PORT) |= (1<<E_LOC);
 17c:	5c 9a       	sbi	0x0b, 4	; 11
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <pulse_E+0x6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <pulse_E+0xc>
 188:	00 00       	nop
}

static bool get_DB0()
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
 18a:	83 b1       	in	r24, 0x03	; 3
static uint8_t pulse_E()
{
	uint8_t num=0;
	set_E();
	_delay_ms(10);
	if(get_DB0()) num |= (1<<0);
 18c:	86 95       	lsr	r24
 18e:	81 70       	andi	r24, 0x01	; 1
	if(get_DB1()) num|= (1<<1);
 190:	1c 99       	sbic	0x03, 4	; 3
 192:	82 60       	ori	r24, 0x02	; 2
	if(get_DB2()) num |= (1<<2);
 194:	1d 99       	sbic	0x03, 5	; 3
 196:	84 60       	ori	r24, 0x04	; 4
	if(get_DB3()) num |= (1<<3);
 198:	4f 99       	sbic	0x09, 7	; 9
 19a:	88 60       	ori	r24, 0x08	; 8
	PORT(RW_PORT) &= ~(1<<RW_LOC);
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 19c:	5c 98       	cbi	0x0b, 4	; 11
	if(get_DB1()) num|= (1<<1);
	if(get_DB2()) num |= (1<<2);
	if(get_DB3()) num |= (1<<3);
	clear_E();
	return num;
}
 19e:	08 95       	ret

000001a0 <nibble_out>:
	while(num&(BUSY_FLAG));

}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
 1a0:	80 ff       	sbrs	r24, 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <nibble_out+0x8>
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
}
static void set_DB0()
{
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 1a4:	29 9a       	sbi	0x05, 1	; 5
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <nibble_out+0xa>
	PORT(E_PORT) &= ~(1<<E_LOC);
}

static void clear_DB0()
{
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
 1a8:	29 98       	cbi	0x05, 1	; 5
}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
 1aa:	81 ff       	sbrs	r24, 1
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <nibble_out+0x12>
	PORT(DB0_PORT) |= (1<<DB0_LOC);
}

static void set_DB1()
{
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 1ae:	2c 9a       	sbi	0x05, 4	; 5
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <nibble_out+0x14>
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
}

static void clear_DB1()
{
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
 1b2:	2c 98       	cbi	0x05, 4	; 5
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
 1b4:	82 ff       	sbrs	r24, 2
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <nibble_out+0x1c>
	PORT(DB1_PORT) |= (1<<DB1_LOC);
}

static void set_DB2()
{
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 1b8:	2d 9a       	sbi	0x05, 5	; 5
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <nibble_out+0x1e>
	PORT(DB3_PORT) |= (1<<DB3_LOC);
}

static void clear_DB2()
{
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
 1bc:	2d 98       	cbi	0x05, 5	; 5
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
 1be:	83 ff       	sbrs	r24, 3
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <nibble_out+0x26>
	PORT(DB2_PORT) |= (1<<DB2_LOC);
}

static void set_DB3()
{
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <nibble_out+0x28>
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
}

static void clear_DB3()
{
	PORT(DB3_PORT) &= ~(1<<DB3_LOC);
 1c6:	5f 98       	cbi	0x0b, 7	; 11
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
	else clear_DB3();
	pulse_E();
 1c8:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 1cc:	08 95       	ret

000001ce <write_reg>:
}
static void write_reg(uint8_t num, uint8_t rs)
{
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	d8 2f       	mov	r29, r24
 1d6:	16 2f       	mov	r17, r22
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 1d8:	5a 98       	cbi	0x0b, 2	; 11
 1da:	83 ec       	ldi	r24, 0xC3	; 195
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <write_reg+0x10>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <write_reg+0x16>
 1e4:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 1e6:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 1ea:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1ec:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 1f0:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 1f2:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1f6:	c2 95       	swap	r28
 1f8:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 1fa:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 1fc:	6c f3       	brlt	.-38     	; 0x1d8 <write_reg+0xa>
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 1fe:	28 98       	cbi	0x05, 0	; 5
}
static void write_reg(uint8_t num, uint8_t rs)
{
	busywait();
	clear_RW();
	if(rs) set_RS();
 200:	11 23       	and	r17, r17
 202:	11 f0       	breq	.+4      	; 0x208 <write_reg+0x3a>
	return PIN(DB3_PORT)&(1<<DB3_LOC);
}

static void set_RS()
{
	PORT(RS_PORT) |= (1<<RS_LOC);
 204:	5a 9a       	sbi	0x0b, 2	; 11
 206:	01 c0       	rjmp	.+2      	; 0x20a <write_reg+0x3c>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 208:	5a 98       	cbi	0x0b, 2	; 11
{
	busywait();
	clear_RW();
	if(rs) set_RS();
	else clear_RS();
	set_DB_output();
 20a:	0e 94 b9 00 	call	0x172	; 0x172 <set_DB_output>
	nibble_out(num>>4);
 20e:	8d 2f       	mov	r24, r29
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	nibble_out(num);
 218:	8d 2f       	mov	r24, r29
 21a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	set_DB_input();
 21e:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	08 95       	ret

0000022a <lcd_initialize>:
static void nibble_out(uint8_t num);
static void write_reg(uint8_t num, uint8_t rs);


void lcd_initialize()
{
 22a:	cf 93       	push	r28
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 22c:	28 98       	cbi	0x05, 0	; 5
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 22e:	5c 98       	cbi	0x0b, 4	; 11
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 230:	5a 98       	cbi	0x0b, 2	; 11
	while(*str) lcd_putc(*str++);
}

static void setup_RS_RW_E()
{
	DDR(RS_PORT) |= (1<<RS_LOC);
 232:	52 9a       	sbi	0x0a, 2	; 10
	DDR(RW_PORT) |= (1<<RW_LOC);
 234:	20 9a       	sbi	0x04, 0	; 4
	DDR(E_PORT) |= (1<<E_LOC);
 236:	54 9a       	sbi	0x0a, 4	; 10
{
	clear_RW();
	clear_E();
	clear_RS();
	setup_RS_RW_E();
	set_DB_output();
 238:	0e 94 b9 00 	call	0x172	; 0x172 <set_DB_output>
 23c:	83 ec       	ldi	r24, 0xC3	; 195
 23e:	99 e0       	ldi	r25, 0x09	; 9
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_initialize+0x16>
 244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_initialize+0x1c>
 246:	00 00       	nop
	
	_delay_ms(10);
	nibble_out(0x3);
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_initialize+0x28>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_initialize+0x2e>
 258:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_initialize+0x3a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_initialize+0x40>
 26a:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 272:	83 ec       	ldi	r24, 0xC3	; 195
 274:	99 e0       	ldi	r25, 0x09	; 9
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_initialize+0x4c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_initialize+0x52>
 27c:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x2);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 284:	5a 98       	cbi	0x0b, 2	; 11
 286:	83 ec       	ldi	r24, 0xC3	; 195
 288:	99 e0       	ldi	r25, 0x09	; 9
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_initialize+0x60>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_initialize+0x66>
 290:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 292:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 296:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 298:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 29c:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 29e:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 2a2:	c2 95       	swap	r28
 2a4:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 2a6:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 2a8:	6c f3       	brlt	.-38     	; 0x284 <lcd_initialize+0x5a>
	_delay_ms(10);
	nibble_out(0x3);
	_delay_ms(10);
	nibble_out(0x2);
	busywait();
	write_reg(0x28,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x08,0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x01,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x06,0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
}
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <lcd_display_on>:
	set_DB_input();
}

void lcd_display_on()
{
	write_reg(0x0C, 0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
 2d6:	08 95       	ret

000002d8 <lcd_putc>:
}


void lcd_putc(const char x)
{
	write_reg(x,1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
 2de:	08 95       	ret

000002e0 <lcd_puts>:
}

void lcd_puts(const char *str)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	while(*str) lcd_putc(*str++);
 2e6:	88 81       	ld	r24, Y
 2e8:	88 23       	and	r24, r24
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <lcd_puts+0x18>
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_putc>
 2f2:	89 91       	ld	r24, Y+
 2f4:	81 11       	cpse	r24, r1
 2f6:	fb cf       	rjmp	.-10     	; 0x2ee <lcd_puts+0xe>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:
#include "main.h"
#include<pololu/3pi.h>

int main()
{
	lcd_initialize();
 2fe:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_initialize>
	lcd_display_on();
 302:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_display_on>
	configure_left_motor();
 306:	0e 94 ad 01 	call	0x35a	; 0x35a <configure_left_motor>
	configure_right_motor();
 30a:	0e 94 b6 01 	call	0x36c	; 0x36c <configure_right_motor>
	init_buzzer();
 30e:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_buzzer>
	configure_reflectance_sensors();
 312:	0e 94 10 02 	call	0x420	; 0x420 <configure_reflectance_sensors>
	configure_push_button_array();
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <configure_push_button_array>
	
	playFrequency(500,1); //Code Uploaded
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	64 ef       	ldi	r22, 0xF4	; 244
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 66 00 	call	0xcc	; 0xcc <playFrequency>
	sensortest();
 328:	0e 94 65 02 	call	0x4ca	; 0x4ca <sensortest>

	lcd_puts("Final");
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_puts>
	lcd_goto_xy(0,1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 be 04 	call	0x97c	; 0x97c <lcd_goto_xy>
	lcd_puts("Project");
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_puts>
		time = get_discharge_time(1);
		lcd_goto_xy(0,0);
		itoa(time,val,10);
		lcd_puts(val);
		*/
	}
 344:	ff cf       	rjmp	.-2      	; 0x344 <main+0x46>

00000346 <disable_PWM_LA>:
static void clear_RB()
{	PORT(RMOTORB_PORT) &= ~(1<<RMOTORB_LOC);}
static void enable_PWM_LA()
{	TCCR0A |= PWM_A_MASK;}
static void disable_PWM_LA()
{	TCCR0A &= ~PWM_A_MASK;}
 346:	84 b5       	in	r24, 0x24	; 36
 348:	8f 73       	andi	r24, 0x3F	; 63
 34a:	84 bd       	out	0x24, r24	; 36
 34c:	08 95       	ret

0000034e <disable_PWM_RA>:
static void disable_PWM_LB()
{	TCCR0A &= ~PWM_B_MASK;}
static void enable_PWM_RA()
{	TCCR2A |= PWM_A_MASK;}
static void disable_PWM_RA()
{	TCCR2A &= ~PWM_A_MASK;}
 34e:	e0 eb       	ldi	r30, 0xB0	; 176
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8f 73       	andi	r24, 0x3F	; 63
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <configure_left_motor>:
	 configure_right_motor();
}

void configure_left_motor()
{
	DDR(LMOTORA_PORT) |= (1<<LMOTORA_LOC);
 35a:	56 9a       	sbi	0x0a, 6	; 10
	DDR(LMOTORB_PORT) |= (1<<LMOTORB_LOC);
 35c:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = 0x03;
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((TCCR0B&0xC0)|0x01);
 362:	85 b5       	in	r24, 0x25	; 37
 364:	80 7c       	andi	r24, 0xC0	; 192
 366:	81 60       	ori	r24, 0x01	; 1
 368:	85 bd       	out	0x25, r24	; 37
 36a:	08 95       	ret

0000036c <configure_right_motor>:
}

void configure_right_motor()
{
	DDR(RMOTORA_PORT) |= (1<<RMOTORA_LOC);
 36c:	23 9a       	sbi	0x04, 3	; 4
	DDR(RMOTORB_PORT) |= (1<<RMOTORB_LOC);
 36e:	53 9a       	sbi	0x0a, 3	; 10
	TCCR2A = 0x03;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = ((TCCR2B&0xC0)|0x01);
 376:	e1 eb       	ldi	r30, 0xB1	; 177
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	80 7c       	andi	r24, 0xC0	; 192
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <shift_left_motor_forward>:
	else if (get_RB_PWM()) return RB_PWM_MATCH;
}

void shift_left_motor_forward()
{
	disable_PWM_LA();
 384:	0e 94 a3 01 	call	0x346	; 0x346 <disable_PWM_LA>




static void set_LA()
{	PORT(LMOTORA_PORT) |= (1<<LMOTORA_LOC);}
 388:	5e 9a       	sbi	0x0b, 6	; 11
static void enable_PWM_LA()
{	TCCR0A |= PWM_A_MASK;}
static void disable_PWM_LA()
{	TCCR0A &= ~PWM_A_MASK;}
static void enable_PWM_LB()
{	TCCR0A |= PWM_B_MASK;}
 38a:	84 b5       	in	r24, 0x24	; 36
 38c:	80 63       	ori	r24, 0x30	; 48
 38e:	84 bd       	out	0x24, r24	; 36
 390:	08 95       	ret

00000392 <shift_right_motor_forward>:
	enable_PWM_LB();
}

void shift_right_motor_forward()
{
	disable_PWM_RA();
 392:	0e 94 a7 01 	call	0x34e	; 0x34e <disable_PWM_RA>
static void set_LB()
{	PORT(LMOTORB_PORT) |= (1<<LMOTORB_LOC);}
static void clear_LB()
{	PORT(LMOTORB_PORT) &= ~(1<<LMOTORB_LOC);}
static void set_RA()
{	PORT(RMOTORA_PORT) |= (1<<RMOTORA_LOC);}
 396:	2b 9a       	sbi	0x05, 3	; 5
static void enable_PWM_RA()
{	TCCR2A |= PWM_A_MASK;}
static void disable_PWM_RA()
{	TCCR2A &= ~PWM_A_MASK;}
static void enable_PWM_RB()
{	TCCR2A |= PWM_B_MASK;}
 398:	e0 eb       	ldi	r30, 0xB0	; 176
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	80 63       	ori	r24, 0x30	; 48
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <duty_to_match>:
	clear_RB();
}

uint8_t duty_to_match(uint8_t duty)
{
	if(duty>=0&&duty<=100) return duty*2.55;
 3a4:	85 36       	cpi	r24, 0x65	; 101
 3a6:	80 f4       	brcc	.+32     	; 0x3c8 <duty_to_match+0x24>
 3a8:	68 2f       	mov	r22, r24
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 cd 02 	call	0x59a	; 0x59a <__floatsisf>
 3b4:	23 e3       	ldi	r18, 0x33	; 51
 3b6:	33 e3       	ldi	r19, 0x33	; 51
 3b8:	43 e2       	ldi	r20, 0x23	; 35
 3ba:	50 e4       	ldi	r21, 0x40	; 64
 3bc:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3>
 3c0:	0e 94 9c 02 	call	0x538	; 0x538 <__fixunssfsi>
 3c4:	86 2f       	mov	r24, r22
 3c6:	08 95       	ret
	else return (duty%100)*2.55;
 3c8:	99 e2       	ldi	r25, 0x29	; 41
 3ca:	89 9f       	mul	r24, r25
 3cc:	91 2d       	mov	r25, r1
 3ce:	11 24       	eor	r1, r1
 3d0:	92 95       	swap	r25
 3d2:	9f 70       	andi	r25, 0x0F	; 15
 3d4:	68 2f       	mov	r22, r24
 3d6:	24 e6       	ldi	r18, 0x64	; 100
 3d8:	92 9f       	mul	r25, r18
 3da:	60 19       	sub	r22, r0
 3dc:	11 24       	eor	r1, r1
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 cd 02 	call	0x59a	; 0x59a <__floatsisf>
 3e8:	23 e3       	ldi	r18, 0x33	; 51
 3ea:	33 e3       	ldi	r19, 0x33	; 51
 3ec:	43 e2       	ldi	r20, 0x23	; 35
 3ee:	50 e4       	ldi	r21, 0x40	; 64
 3f0:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3>
 3f4:	0e 94 9c 02 	call	0x538	; 0x538 <__fixunssfsi>
 3f8:	86 2f       	mov	r24, r22
}
 3fa:	08 95       	ret

000003fc <set_left_motor_speed>:
	TCCR2B = ((TCCR2B&0xC0)|0x01);
}

void set_left_motor_speed(uint8_t speed)
{
	if(speed<5) speed=0;
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	08 f4       	brcc	.+2      	; 0x402 <set_left_motor_speed+0x6>
 400:	80 e0       	ldi	r24, 0x00	; 0
	LA_PWM_MATCH = duty_to_match(speed);
 402:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <duty_to_match>
 406:	87 bd       	out	0x27, r24	; 39
	LB_PWM_MATCH = duty_to_match(speed);
 408:	88 bd       	out	0x28, r24	; 40
 40a:	08 95       	ret

0000040c <set_right_motor_speed>:
}

void set_right_motor_speed(uint8_t speed)
{
	if(speed<5) speed=0;
 40c:	85 30       	cpi	r24, 0x05	; 5
 40e:	08 f4       	brcc	.+2      	; 0x412 <set_right_motor_speed+0x6>
 410:	80 e0       	ldi	r24, 0x00	; 0
	RA_PWM_MATCH = duty_to_match(speed);
 412:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <duty_to_match>
 416:	80 93 b3 00 	sts	0x00B3, r24
	RB_PWM_MATCH = duty_to_match(speed);
 41a:	80 93 b4 00 	sts	0x00B4, r24
 41e:	08 95       	ret

00000420 <configure_reflectance_sensors>:
#include "sensor.h"

void configure_reflectance_sensors()
{
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
 420:	87 b1       	in	r24, 0x07	; 7
 422:	80 7e       	andi	r24, 0xE0	; 224
 424:	87 b9       	out	0x07, r24	; 7
	PORT(SENSORS_PORT) |= SENSORS_PIN;
 426:	88 b1       	in	r24, 0x08	; 8
 428:	8f 61       	ori	r24, 0x1F	; 31
 42a:	88 b9       	out	0x08, r24	; 8
 42c:	08 95       	ret

0000042e <all_white>:

}

bool all_white()
{
	return !(PIN(SENSORS_PORT)&SENSORS_PIN);
 42e:	96 b1       	in	r25, 0x06	; 6
 430:	9f 71       	andi	r25, 0x1F	; 31
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	09 f0       	breq	.+2      	; 0x438 <all_white+0xa>
 436:	80 e0       	ldi	r24, 0x00	; 0
}
 438:	08 95       	ret

0000043a <get_SENSORA>:

bool get_SENSORA()
{
		return PIN(SENSORS_PORT)&(SENSORA);
 43a:	86 b1       	in	r24, 0x06	; 6
}
 43c:	81 70       	andi	r24, 0x01	; 1
 43e:	08 95       	ret

00000440 <get_SENSORB>:
bool get_SENSORB()
{	
	return PIN(SENSORS_PORT)&(SENSORB);
 440:	86 b1       	in	r24, 0x06	; 6
	}
 442:	86 95       	lsr	r24
 444:	81 70       	andi	r24, 0x01	; 1
 446:	08 95       	ret

00000448 <get_SENSORC>:
bool get_SENSORC()
{	
	return PIN(SENSORS_PORT)&(SENSORC);
 448:	86 b1       	in	r24, 0x06	; 6
}
 44a:	82 fb       	bst	r24, 2
 44c:	88 27       	eor	r24, r24
 44e:	80 f9       	bld	r24, 0
 450:	08 95       	ret

00000452 <get_SENSORD>:
bool get_SENSORD()
{	
	return PIN(SENSORS_PORT)&(SENSORD);
 452:	86 b1       	in	r24, 0x06	; 6
}
 454:	83 fb       	bst	r24, 3
 456:	88 27       	eor	r24, r24
 458:	80 f9       	bld	r24, 0
 45a:	08 95       	ret

0000045c <get_SENSORE>:
bool get_SENSORE()
{	
	return PIN(SENSORS_PORT)&(SENSORE);
 45c:	86 b1       	in	r24, 0x06	; 6
	}
 45e:	82 95       	swap	r24
 460:	81 70       	andi	r24, 0x01	; 1
 462:	08 95       	ret

00000464 <get_sensor_location>:
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
	PORT(SENSORS_PORT) |= SENSORS_PIN;
}

int8_t get_sensor_location()
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
	int8_t pos = 0;
	uint8_t i = 0;
	if(get_SENSORA())
 468:	0e 94 1d 02 	call	0x43a	; 0x43a <get_SENSORA>
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <get_sensor_location+0x12>
	{	
		pos-=100;
		i++;
 470:	c1 e0       	ldi	r28, 0x01	; 1
{
	int8_t pos = 0;
	uint8_t i = 0;
	if(get_SENSORA())
	{	
		pos-=100;
 472:	dc e9       	ldi	r29, 0x9C	; 156
 474:	02 c0       	rjmp	.+4      	; 0x47a <get_sensor_location+0x16>
}

int8_t get_sensor_location()
{
	int8_t pos = 0;
	uint8_t i = 0;
 476:	c0 e0       	ldi	r28, 0x00	; 0
	PORT(SENSORS_PORT) |= SENSORS_PIN;
}

int8_t get_sensor_location()
{
	int8_t pos = 0;
 478:	d0 e0       	ldi	r29, 0x00	; 0
	if(get_SENSORA())
	{	
		pos-=100;
		i++;
	}
	if(get_SENSORB())
 47a:	0e 94 20 02 	call	0x440	; 0x440 <get_SENSORB>
 47e:	88 23       	and	r24, r24
 480:	11 f0       	breq	.+4      	; 0x486 <get_sensor_location+0x22>
	{
		pos-=30;
 482:	de 51       	subi	r29, 0x1E	; 30
		i++;
 484:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORC())
 486:	0e 94 24 02 	call	0x448	; 0x448 <get_SENSORC>
 48a:	81 11       	cpse	r24, r1
	{	pos+=0;
		i++;
 48c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORD())
 48e:	0e 94 29 02 	call	0x452	; 0x452 <get_SENSORD>
 492:	88 23       	and	r24, r24
 494:	11 f0       	breq	.+4      	; 0x49a <get_sensor_location+0x36>
	{
		pos+=30;
 496:	d2 5e       	subi	r29, 0xE2	; 226
		i++;
 498:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORE())
 49a:	0e 94 2e 02 	call	0x45c	; 0x45c <get_SENSORE>
 49e:	88 23       	and	r24, r24
 4a0:	19 f0       	breq	.+6      	; 0x4a8 <get_sensor_location+0x44>
	{
		pos+=100;
 4a2:	dc 59       	subi	r29, 0x9C	; 156
		i++;
 4a4:	cf 5f       	subi	r28, 0xFF	; 255
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <get_sensor_location+0x50>
	}
	else if(all_white())
 4a8:	0e 94 17 02 	call	0x42e	; 0x42e <all_white>
 4ac:	88 23       	and	r24, r24
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <get_sensor_location+0x50>
	{
		pos=-128;
		i=1;
 4b0:	c1 e0       	ldi	r28, 0x01	; 1
		pos+=100;
		i++;
	}
	else if(all_white())
	{
		pos=-128;
 4b2:	d0 e8       	ldi	r29, 0x80	; 128
		i=1;
	}
	return pos/i;
 4b4:	8d 2f       	mov	r24, r29
 4b6:	dd 0f       	add	r29, r29
 4b8:	99 0b       	sbc	r25, r25
 4ba:	6c 2f       	mov	r22, r28
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	0e 94 0c 05 	call	0xa18	; 0xa18 <__divmodhi4>
 4c2:	86 2f       	mov	r24, r22
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <sensortest>:

void sensortest(){
	
	configure_left_motor();
 4ca:	0e 94 ad 01 	call	0x35a	; 0x35a <configure_left_motor>
	configure_right_motor();
 4ce:	0e 94 b6 01 	call	0x36c	; 0x36c <configure_right_motor>

	set_left_motor_speed(15);
 4d2:	8f e0       	ldi	r24, 0x0F	; 15
 4d4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <set_left_motor_speed>
	set_right_motor_speed(15);
 4d8:	8f e0       	ldi	r24, 0x0F	; 15
 4da:	0e 94 06 02 	call	0x40c	; 0x40c <set_right_motor_speed>
	
	shift_right_motor_forward();
 4de:	0e 94 c9 01 	call	0x392	; 0x392 <shift_right_motor_forward>
	shift_left_motor_forward();
 4e2:	0e 94 c2 01 	call	0x384	; 0x384 <shift_left_motor_forward>
	while(1)
	{
		int8_t sens = get_sensor_location();
		if(sens!=-128)
		{
			set_left_motor_speed((1500+15*(sens))/100);
 4e6:	0f 2e       	mov	r0, r31
 4e8:	ff e0       	ldi	r31, 0x0F	; 15
 4ea:	ff 2e       	mov	r15, r31
 4ec:	f0 2d       	mov	r31, r0
 4ee:	c4 e6       	ldi	r28, 0x64	; 100
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
	shift_right_motor_forward();
	shift_left_motor_forward();
	
	while(1)
	{
		int8_t sens = get_sensor_location();
 4f2:	0e 94 32 02 	call	0x464	; 0x464 <get_sensor_location>
		if(sens!=-128)
 4f6:	80 38       	cpi	r24, 0x80	; 128
 4f8:	e1 f3       	breq	.-8      	; 0x4f2 <sensortest+0x28>
		{
			set_left_motor_speed((1500+15*(sens))/100);
 4fa:	08 2f       	mov	r16, r24
 4fc:	88 0f       	add	r24, r24
 4fe:	11 0b       	sbc	r17, r17
 500:	f0 9e       	mul	r15, r16
 502:	c0 01       	movw	r24, r0
 504:	f1 9e       	mul	r15, r17
 506:	90 0d       	add	r25, r0
 508:	11 24       	eor	r1, r1
 50a:	84 52       	subi	r24, 0x24	; 36
 50c:	9a 4f       	sbci	r25, 0xFA	; 250
 50e:	be 01       	movw	r22, r28
 510:	0e 94 0c 05 	call	0xa18	; 0xa18 <__divmodhi4>
 514:	86 2f       	mov	r24, r22
 516:	0e 94 fe 01 	call	0x3fc	; 0x3fc <set_left_motor_speed>
			set_right_motor_speed((1500-15*(sens))/100);
 51a:	21 ef       	ldi	r18, 0xF1	; 241
 51c:	20 03       	mulsu	r18, r16
 51e:	c0 01       	movw	r24, r0
 520:	21 9f       	mul	r18, r17
 522:	90 0d       	add	r25, r0
 524:	11 24       	eor	r1, r1
 526:	84 52       	subi	r24, 0x24	; 36
 528:	9a 4f       	sbci	r25, 0xFA	; 250
 52a:	be 01       	movw	r22, r28
 52c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__divmodhi4>
 530:	86 2f       	mov	r24, r22
 532:	0e 94 06 02 	call	0x40c	; 0x40c <set_right_motor_speed>
 536:	dd cf       	rjmp	.-70     	; 0x4f2 <sensortest+0x28>

00000538 <__fixunssfsi>:
 538:	0e 94 10 03 	call	0x620	; 0x620 <__fp_splitA>
 53c:	88 f0       	brcs	.+34     	; 0x560 <__fixunssfsi+0x28>
 53e:	9f 57       	subi	r25, 0x7F	; 127
 540:	98 f0       	brcs	.+38     	; 0x568 <__fixunssfsi+0x30>
 542:	b9 2f       	mov	r27, r25
 544:	99 27       	eor	r25, r25
 546:	b7 51       	subi	r27, 0x17	; 23
 548:	b0 f0       	brcs	.+44     	; 0x576 <__fixunssfsi+0x3e>
 54a:	e1 f0       	breq	.+56     	; 0x584 <__fixunssfsi+0x4c>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a f0       	brmi	.+6      	; 0x55c <__fixunssfsi+0x24>
 556:	ba 95       	dec	r27
 558:	c9 f7       	brne	.-14     	; 0x54c <__fixunssfsi+0x14>
 55a:	14 c0       	rjmp	.+40     	; 0x584 <__fixunssfsi+0x4c>
 55c:	b1 30       	cpi	r27, 0x01	; 1
 55e:	91 f0       	breq	.+36     	; 0x584 <__fixunssfsi+0x4c>
 560:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_zero>
 564:	b1 e0       	ldi	r27, 0x01	; 1
 566:	08 95       	ret
 568:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_zero>
 56c:	67 2f       	mov	r22, r23
 56e:	78 2f       	mov	r23, r24
 570:	88 27       	eor	r24, r24
 572:	b8 5f       	subi	r27, 0xF8	; 248
 574:	39 f0       	breq	.+14     	; 0x584 <__fixunssfsi+0x4c>
 576:	b9 3f       	cpi	r27, 0xF9	; 249
 578:	cc f3       	brlt	.-14     	; 0x56c <__fixunssfsi+0x34>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b3 95       	inc	r27
 582:	d9 f7       	brne	.-10     	; 0x57a <__fixunssfsi+0x42>
 584:	3e f4       	brtc	.+14     	; 0x594 <__fixunssfsi+0x5c>
 586:	90 95       	com	r25
 588:	80 95       	com	r24
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	08 95       	ret

00000596 <__floatunsisf>:
 596:	e8 94       	clt
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__floatsisf+0x12>

0000059a <__floatsisf>:
 59a:	97 fb       	bst	r25, 7
 59c:	3e f4       	brtc	.+14     	; 0x5ac <__floatsisf+0x12>
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	99 23       	and	r25, r25
 5ae:	a9 f0       	breq	.+42     	; 0x5da <__floatsisf+0x40>
 5b0:	f9 2f       	mov	r31, r25
 5b2:	96 e9       	ldi	r25, 0x96	; 150
 5b4:	bb 27       	eor	r27, r27
 5b6:	93 95       	inc	r25
 5b8:	f6 95       	lsr	r31
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b7 95       	ror	r27
 5c2:	f1 11       	cpse	r31, r1
 5c4:	f8 cf       	rjmp	.-16     	; 0x5b6 <__floatsisf+0x1c>
 5c6:	fa f4       	brpl	.+62     	; 0x606 <__floatsisf+0x6c>
 5c8:	bb 0f       	add	r27, r27
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__floatsisf+0x36>
 5cc:	60 ff       	sbrs	r22, 0
 5ce:	1b c0       	rjmp	.+54     	; 0x606 <__floatsisf+0x6c>
 5d0:	6f 5f       	subi	r22, 0xFF	; 255
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	16 c0       	rjmp	.+44     	; 0x606 <__floatsisf+0x6c>
 5da:	88 23       	and	r24, r24
 5dc:	11 f0       	breq	.+4      	; 0x5e2 <__floatsisf+0x48>
 5de:	96 e9       	ldi	r25, 0x96	; 150
 5e0:	11 c0       	rjmp	.+34     	; 0x604 <__floatsisf+0x6a>
 5e2:	77 23       	and	r23, r23
 5e4:	21 f0       	breq	.+8      	; 0x5ee <__floatsisf+0x54>
 5e6:	9e e8       	ldi	r25, 0x8E	; 142
 5e8:	87 2f       	mov	r24, r23
 5ea:	76 2f       	mov	r23, r22
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <__floatsisf+0x5e>
 5ee:	66 23       	and	r22, r22
 5f0:	71 f0       	breq	.+28     	; 0x60e <__floatsisf+0x74>
 5f2:	96 e8       	ldi	r25, 0x86	; 134
 5f4:	86 2f       	mov	r24, r22
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	2a f0       	brmi	.+10     	; 0x606 <__floatsisf+0x6c>
 5fc:	9a 95       	dec	r25
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	da f7       	brpl	.-10     	; 0x5fc <__floatsisf+0x62>
 606:	88 0f       	add	r24, r24
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <__fp_split3>:
 610:	57 fd       	sbrc	r21, 7
 612:	90 58       	subi	r25, 0x80	; 128
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	59 f0       	breq	.+22     	; 0x630 <__fp_splitA+0x10>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	71 f0       	breq	.+28     	; 0x63a <__fp_splitA+0x1a>
 61e:	47 95       	ror	r20

00000620 <__fp_splitA>:
 620:	88 0f       	add	r24, r24
 622:	97 fb       	bst	r25, 7
 624:	99 1f       	adc	r25, r25
 626:	61 f0       	breq	.+24     	; 0x640 <__fp_splitA+0x20>
 628:	9f 3f       	cpi	r25, 0xFF	; 255
 62a:	79 f0       	breq	.+30     	; 0x64a <__fp_splitA+0x2a>
 62c:	87 95       	ror	r24
 62e:	08 95       	ret
 630:	12 16       	cp	r1, r18
 632:	13 06       	cpc	r1, r19
 634:	14 06       	cpc	r1, r20
 636:	55 1f       	adc	r21, r21
 638:	f2 cf       	rjmp	.-28     	; 0x61e <__fp_split3+0xe>
 63a:	46 95       	lsr	r20
 63c:	f1 df       	rcall	.-30     	; 0x620 <__fp_splitA>
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__fp_splitA+0x30>
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	99 1f       	adc	r25, r25
 648:	f1 cf       	rjmp	.-30     	; 0x62c <__fp_splitA+0xc>
 64a:	86 95       	lsr	r24
 64c:	71 05       	cpc	r23, r1
 64e:	61 05       	cpc	r22, r1
 650:	08 94       	sec
 652:	08 95       	ret

00000654 <__fp_zero>:
 654:	e8 94       	clt

00000656 <__fp_szero>:
 656:	bb 27       	eor	r27, r27
 658:	66 27       	eor	r22, r22
 65a:	77 27       	eor	r23, r23
 65c:	cb 01       	movw	r24, r22
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret

00000662 <__mulsf3>:
 662:	0e 94 44 03 	call	0x688	; 0x688 <__mulsf3x>
 666:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_round>
 66a:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_pscA>
 66e:	38 f0       	brcs	.+14     	; 0x67e <__mulsf3+0x1c>
 670:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_pscB>
 674:	20 f0       	brcs	.+8      	; 0x67e <__mulsf3+0x1c>
 676:	95 23       	and	r25, r21
 678:	11 f0       	breq	.+4      	; 0x67e <__mulsf3+0x1c>
 67a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
 67e:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_nan>
 682:	11 24       	eor	r1, r1
 684:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_szero>

00000688 <__mulsf3x>:
 688:	0e 94 08 03 	call	0x610	; 0x610 <__fp_split3>
 68c:	70 f3       	brcs	.-36     	; 0x66a <__mulsf3+0x8>

0000068e <__mulsf3_pse>:
 68e:	95 9f       	mul	r25, r21
 690:	c1 f3       	breq	.-16     	; 0x682 <__mulsf3+0x20>
 692:	95 0f       	add	r25, r21
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	55 1f       	adc	r21, r21
 698:	62 9f       	mul	r22, r18
 69a:	f0 01       	movw	r30, r0
 69c:	72 9f       	mul	r23, r18
 69e:	bb 27       	eor	r27, r27
 6a0:	f0 0d       	add	r31, r0
 6a2:	b1 1d       	adc	r27, r1
 6a4:	63 9f       	mul	r22, r19
 6a6:	aa 27       	eor	r26, r26
 6a8:	f0 0d       	add	r31, r0
 6aa:	b1 1d       	adc	r27, r1
 6ac:	aa 1f       	adc	r26, r26
 6ae:	64 9f       	mul	r22, r20
 6b0:	66 27       	eor	r22, r22
 6b2:	b0 0d       	add	r27, r0
 6b4:	a1 1d       	adc	r26, r1
 6b6:	66 1f       	adc	r22, r22
 6b8:	82 9f       	mul	r24, r18
 6ba:	22 27       	eor	r18, r18
 6bc:	b0 0d       	add	r27, r0
 6be:	a1 1d       	adc	r26, r1
 6c0:	62 1f       	adc	r22, r18
 6c2:	73 9f       	mul	r23, r19
 6c4:	b0 0d       	add	r27, r0
 6c6:	a1 1d       	adc	r26, r1
 6c8:	62 1f       	adc	r22, r18
 6ca:	83 9f       	mul	r24, r19
 6cc:	a0 0d       	add	r26, r0
 6ce:	61 1d       	adc	r22, r1
 6d0:	22 1f       	adc	r18, r18
 6d2:	74 9f       	mul	r23, r20
 6d4:	33 27       	eor	r19, r19
 6d6:	a0 0d       	add	r26, r0
 6d8:	61 1d       	adc	r22, r1
 6da:	23 1f       	adc	r18, r19
 6dc:	84 9f       	mul	r24, r20
 6de:	60 0d       	add	r22, r0
 6e0:	21 1d       	adc	r18, r1
 6e2:	82 2f       	mov	r24, r18
 6e4:	76 2f       	mov	r23, r22
 6e6:	6a 2f       	mov	r22, r26
 6e8:	11 24       	eor	r1, r1
 6ea:	9f 57       	subi	r25, 0x7F	; 127
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	9a f0       	brmi	.+38     	; 0x716 <__mulsf3_pse+0x88>
 6f0:	f1 f0       	breq	.+60     	; 0x72e <__mulsf3_pse+0xa0>
 6f2:	88 23       	and	r24, r24
 6f4:	4a f0       	brmi	.+18     	; 0x708 <__mulsf3_pse+0x7a>
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__mulsf3_pse+0x64>
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	51 05       	cpc	r21, r1
 70c:	80 f0       	brcs	.+32     	; 0x72e <__mulsf3_pse+0xa0>
 70e:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
 712:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_szero>
 716:	5f 3f       	cpi	r21, 0xFF	; 255
 718:	e4 f3       	brlt	.-8      	; 0x712 <__mulsf3_pse+0x84>
 71a:	98 3e       	cpi	r25, 0xE8	; 232
 71c:	d4 f3       	brlt	.-12     	; 0x712 <__mulsf3_pse+0x84>
 71e:	86 95       	lsr	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b7 95       	ror	r27
 726:	f7 95       	ror	r31
 728:	e7 95       	ror	r30
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	c1 f7       	brne	.-16     	; 0x71e <__mulsf3_pse+0x90>
 72e:	fe 2b       	or	r31, r30
 730:	88 0f       	add	r24, r24
 732:	91 1d       	adc	r25, r1
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__fp_inf>:
 73c:	97 f9       	bld	r25, 7
 73e:	9f 67       	ori	r25, 0x7F	; 127
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	08 95       	ret

00000748 <__fp_nan>:
 748:	9f ef       	ldi	r25, 0xFF	; 255
 74a:	80 ec       	ldi	r24, 0xC0	; 192
 74c:	08 95       	ret

0000074e <__fp_pscA>:
 74e:	00 24       	eor	r0, r0
 750:	0a 94       	dec	r0
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	09 06       	cpc	r0, r25
 75a:	08 95       	ret

0000075c <__fp_pscB>:
 75c:	00 24       	eor	r0, r0
 75e:	0a 94       	dec	r0
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	05 06       	cpc	r0, r21
 768:	08 95       	ret

0000076a <__fp_round>:
 76a:	09 2e       	mov	r0, r25
 76c:	03 94       	inc	r0
 76e:	00 0c       	add	r0, r0
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0xc>
 772:	88 23       	and	r24, r24
 774:	52 f0       	brmi	.+20     	; 0x78a <__fp_round+0x20>
 776:	bb 0f       	add	r27, r27
 778:	40 f4       	brcc	.+16     	; 0x78a <__fp_round+0x20>
 77a:	bf 2b       	or	r27, r31
 77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0x18>
 77e:	60 ff       	sbrs	r22, 0
 780:	04 c0       	rjmp	.+8      	; 0x78a <__fp_round+0x20>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <delay_us.constprop.0>:
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	6f 93       	push	r22
 792:	64 e0       	ldi	r22, 0x04	; 4
 794:	6a 95       	dec	r22
 796:	f1 f7       	brne	.-4      	; 0x794 <delay_us.constprop.0+0x8>
 798:	6f 91       	pop	r22
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	c9 f7       	brne	.-14     	; 0x790 <delay_us.constprop.0+0x4>
 79e:	08 95       	ret

000007a0 <_ZN12OrangutanLCD8busyWaitEv>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	1a b1       	in	r17, 0x0a	; 10
 7aa:	57 98       	cbi	0x0a, 7	; 10
 7ac:	5a 98       	cbi	0x0b, 2	; 11
 7ae:	28 9a       	sbi	0x05, 0	; 5
 7b0:	c0 e0       	ldi	r28, 0x00	; 0
 7b2:	d0 e0       	ldi	r29, 0x00	; 0
 7b4:	0e 94 c6 03 	call	0x78c	; 0x78c <delay_us.constprop.0>
 7b8:	5c 9a       	sbi	0x0b, 4	; 11
 7ba:	0e 94 c6 03 	call	0x78c	; 0x78c <delay_us.constprop.0>
 7be:	09 b1       	in	r16, 0x09	; 9
 7c0:	5c 98       	cbi	0x0b, 4	; 11
 7c2:	0e 94 c6 03 	call	0x78c	; 0x78c <delay_us.constprop.0>
 7c6:	5c 9a       	sbi	0x0b, 4	; 11
 7c8:	0e 94 c6 03 	call	0x78c	; 0x78c <delay_us.constprop.0>
 7cc:	5c 98       	cbi	0x0b, 4	; 11
 7ce:	24 96       	adiw	r28, 0x04	; 4
 7d0:	07 ff       	sbrs	r16, 7
 7d2:	10 c0       	rjmp	.+32     	; 0x7f4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
 7d4:	ae 01       	movw	r20, r28
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	80 91 0e 01 	lds	r24, 0x010E
 7de:	90 91 0f 01 	lds	r25, 0x010F
 7e2:	a0 91 10 01 	lds	r26, 0x0110
 7e6:	b0 91 11 01 	lds	r27, 0x0111
 7ea:	48 17       	cp	r20, r24
 7ec:	59 07       	cpc	r21, r25
 7ee:	6a 07       	cpc	r22, r26
 7f0:	7b 07       	cpc	r23, r27
 7f2:	00 f3       	brcs	.-64     	; 0x7b4 <_ZN12OrangutanLCD8busyWaitEv+0x14>
 7f4:	1a b9       	out	0x0a, r17	; 10
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	08 95       	ret

00000800 <_ZN12OrangutanLCD8sendDataEh>:
 800:	95 b1       	in	r25, 0x05	; 5
 802:	28 2f       	mov	r18, r24
 804:	21 70       	andi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	22 0f       	add	r18, r18
 80a:	33 1f       	adc	r19, r19
 80c:	48 2f       	mov	r20, r24
 80e:	46 70       	andi	r20, 0x06	; 6
 810:	68 e0       	ldi	r22, 0x08	; 8
 812:	46 9f       	mul	r20, r22
 814:	a0 01       	movw	r20, r0
 816:	11 24       	eor	r1, r1
 818:	24 2b       	or	r18, r20
 81a:	9d 7c       	andi	r25, 0xCD	; 205
 81c:	29 2b       	or	r18, r25
 81e:	25 b9       	out	0x05, r18	; 5
 820:	9b b1       	in	r25, 0x0b	; 11
 822:	88 70       	andi	r24, 0x08	; 8
 824:	82 95       	swap	r24
 826:	80 7f       	andi	r24, 0xF0	; 240
 828:	9f 77       	andi	r25, 0x7F	; 127
 82a:	89 2b       	or	r24, r25
 82c:	8b b9       	out	0x0b, r24	; 11
 82e:	5c 9a       	sbi	0x0b, 4	; 11
 830:	0e 94 c6 03 	call	0x78c	; 0x78c <delay_us.constprop.0>
 834:	5c 98       	cbi	0x0b, 4	; 11
 836:	0e 94 c6 03 	call	0x78c	; 0x78c <delay_us.constprop.0>
 83a:	08 95       	ret

0000083c <_ZN12OrangutanLCD4sendEhhh>:
 83c:	a0 e0       	ldi	r26, 0x00	; 0
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	e4 e2       	ldi	r30, 0x24	; 36
 842:	f4 e0       	ldi	r31, 0x04	; 4
 844:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__prologue_saves__+0x16>
 848:	c8 2f       	mov	r28, r24
 84a:	d6 2e       	mov	r13, r22
 84c:	e4 2e       	mov	r14, r20
 84e:	80 91 20 01 	lds	r24, 0x0120
 852:	81 11       	cpse	r24, r1
 854:	05 c0       	rjmp	.+10     	; 0x860 <_ZN12OrangutanLCD4sendEhhh+0x24>
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	80 93 20 01 	sts	0x0120, r24
 85c:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN12OrangutanLCD5init2Ev>
 860:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN12OrangutanLCD8busyWaitEv>
 864:	14 b1       	in	r17, 0x04	; 4
 866:	d5 b1       	in	r29, 0x05	; 5
 868:	fa b0       	in	r15, 0x0a	; 10
 86a:	0b b1       	in	r16, 0x0b	; 11
 86c:	28 98       	cbi	0x05, 0	; 5
 86e:	dd 20       	and	r13, r13
 870:	11 f0       	breq	.+4      	; 0x876 <_ZN12OrangutanLCD4sendEhhh+0x3a>
 872:	5a 9a       	sbi	0x0b, 2	; 11
 874:	01 c0       	rjmp	.+2      	; 0x878 <_ZN12OrangutanLCD4sendEhhh+0x3c>
 876:	5a 98       	cbi	0x0b, 2	; 11
 878:	94 b1       	in	r25, 0x04	; 4
 87a:	92 63       	ori	r25, 0x32	; 50
 87c:	94 b9       	out	0x04, r25	; 4
 87e:	57 9a       	sbi	0x0a, 7	; 10
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	e8 16       	cp	r14, r24
 884:	29 f0       	breq	.+10     	; 0x890 <_ZN12OrangutanLCD4sendEhhh+0x54>
 886:	8c 2f       	mov	r24, r28
 888:	82 95       	swap	r24
 88a:	8f 70       	andi	r24, 0x0F	; 15
 88c:	0e 94 00 04 	call	0x800	; 0x800 <_ZN12OrangutanLCD8sendDataEh>
 890:	8c 2f       	mov	r24, r28
 892:	8f 70       	andi	r24, 0x0F	; 15
 894:	0e 94 00 04 	call	0x800	; 0x800 <_ZN12OrangutanLCD8sendDataEh>
 898:	fa b8       	out	0x0a, r15	; 10
 89a:	0b b9       	out	0x0b, r16	; 11
 89c:	14 b9       	out	0x04, r17	; 4
 89e:	d5 b9       	out	0x05, r29	; 5
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	e7 e0       	ldi	r30, 0x07	; 7
 8a6:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__epilogue_restores__+0x16>

000008aa <_ZN12OrangutanLCD8send_cmdEh>:
 8aa:	42 e0       	ldi	r20, 0x02	; 2
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN12OrangutanLCD4sendEhhh>
 8b2:	08 95       	ret

000008b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN12OrangutanLCD4sendEhhh>
 8bc:	08 95       	ret

000008be <_ZN12OrangutanLCD5init2Ev>:
 8be:	80 e1       	ldi	r24, 0x10	; 16
 8c0:	97 e2       	ldi	r25, 0x27	; 39
 8c2:	a0 e0       	ldi	r26, 0x00	; 0
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	80 93 0e 01 	sts	0x010E, r24
 8ca:	90 93 0f 01 	sts	0x010F, r25
 8ce:	a0 93 10 01 	sts	0x0110, r26
 8d2:	b0 93 11 01 	sts	0x0111, r27
 8d6:	52 9a       	sbi	0x0a, 2	; 10
 8d8:	20 9a       	sbi	0x04, 0	; 4
 8da:	54 9a       	sbi	0x0a, 4	; 10
 8dc:	8e e1       	ldi	r24, 0x1E	; 30
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 8ea:	86 e0       	ldi	r24, 0x06	; 6
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
 8f2:	83 e0       	ldi	r24, 0x03	; 3
 8f4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
 900:	83 e0       	ldi	r24, 0x03	; 3
 902:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 906:	82 e0       	ldi	r24, 0x02	; 2
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 914:	82 e0       	ldi	r24, 0x02	; 2
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
 91c:	88 e2       	ldi	r24, 0x28	; 40
 91e:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN12OrangutanLCD8send_cmdEh>
 922:	88 e0       	ldi	r24, 0x08	; 8
 924:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN12OrangutanLCD8send_cmdEh>
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN12OrangutanLCD8send_cmdEh>
 92e:	86 e0       	ldi	r24, 0x06	; 6
 930:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN12OrangutanLCD8send_cmdEh>
 934:	8c e0       	ldi	r24, 0x0C	; 12
 936:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN12OrangutanLCD8send_cmdEh>
 93a:	08 95       	ret

0000093c <_ZN12OrangutanLCD6gotoXYEhh>:
 93c:	a5 e0       	ldi	r26, 0x05	; 5
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	e4 ea       	ldi	r30, 0xA4	; 164
 942:	f4 e0       	ldi	r31, 0x04	; 4
 944:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__prologue_saves__+0x1e>
 948:	18 2f       	mov	r17, r24
 94a:	80 e8       	ldi	r24, 0x80	; 128
 94c:	89 83       	std	Y+1, r24	; 0x01
 94e:	80 ec       	ldi	r24, 0xC0	; 192
 950:	8a 83       	std	Y+2, r24	; 0x02
 952:	84 e9       	ldi	r24, 0x94	; 148
 954:	8b 83       	std	Y+3, r24	; 0x03
 956:	84 ed       	ldi	r24, 0xD4	; 212
 958:	8c 83       	std	Y+4, r24	; 0x04
 95a:	fe 01       	movw	r30, r28
 95c:	e6 0f       	add	r30, r22
 95e:	f1 1d       	adc	r31, r1
 960:	81 81       	ldd	r24, Z+1	; 0x01
 962:	81 0f       	add	r24, r17
 964:	6d 83       	std	Y+5, r22	; 0x05
 966:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN12OrangutanLCD8send_cmdEh>
 96a:	10 93 12 01 	sts	0x0112, r17
 96e:	6d 81       	ldd	r22, Y+5	; 0x05
 970:	60 93 13 01 	sts	0x0113, r22
 974:	25 96       	adiw	r28, 0x05	; 5
 976:	e3 e0       	ldi	r30, 0x03	; 3
 978:	0c 94 6d 05 	jmp	0xada	; 0xada <__epilogue_restores__+0x1e>

0000097c <lcd_goto_xy>:
 97c:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12OrangutanLCD6gotoXYEhh>
 980:	08 95       	ret

00000982 <__vector_9>:
 982:	2f 92       	push	r2
 984:	8f 93       	push	r24
 986:	9f 93       	push	r25
 988:	2f b6       	in	r2, 0x3f	; 63
 98a:	80 91 1d 01 	lds	r24, 0x011D
 98e:	90 91 1e 01 	lds	r25, 0x011E
 992:	01 96       	adiw	r24, 0x01	; 1
 994:	80 93 1d 01 	sts	0x011D, r24
 998:	90 93 1e 01 	sts	0x011E, r25
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	80 91 1f 01 	lds	r24, 0x011F
 9a2:	89 1f       	adc	r24, r25
 9a4:	80 93 1f 01 	sts	0x011F, r24
 9a8:	90 91 17 01 	lds	r25, 0x0117
 9ac:	9c 5f       	subi	r25, 0xFC	; 252
 9ae:	90 93 17 01 	sts	0x0117, r25
 9b2:	80 91 16 01 	lds	r24, 0x0116
 9b6:	80 51       	subi	r24, 0x10	; 16
 9b8:	97 42       	sbci	r25, 0x27	; 39
 9ba:	c0 f0       	brcs	.+48     	; 0x9ec <end>
 9bc:	90 93 17 01 	sts	0x0117, r25
 9c0:	80 93 16 01 	sts	0x0116, r24
 9c4:	80 91 18 01 	lds	r24, 0x0118
 9c8:	90 91 19 01 	lds	r25, 0x0119
 9cc:	01 96       	adiw	r24, 0x01	; 1
 9ce:	80 93 18 01 	sts	0x0118, r24
 9d2:	90 93 19 01 	sts	0x0119, r25
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	80 91 1a 01 	lds	r24, 0x011A
 9dc:	89 1f       	adc	r24, r25
 9de:	80 93 1a 01 	sts	0x011A, r24
 9e2:	80 91 1b 01 	lds	r24, 0x011B
 9e6:	89 1f       	adc	r24, r25
 9e8:	80 93 1b 01 	sts	0x011B, r24

000009ec <end>:
 9ec:	2f be       	out	0x3f, r2	; 63
 9ee:	9f 91       	pop	r25
 9f0:	8f 91       	pop	r24
 9f2:	2f 90       	pop	r2
 9f4:	18 95       	reti

000009f6 <_ZN13OrangutanTime17delayMillisecondsEj>:
 9f6:	28 ee       	ldi	r18, 0xE8	; 232
 9f8:	33 e0       	ldi	r19, 0x03	; 3
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	48 f0       	brcs	.+18     	; 0xa10 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
 9fe:	f9 01       	movw	r30, r18
 a00:	6f 93       	push	r22
 a02:	64 e0       	ldi	r22, 0x04	; 4
 a04:	6a 95       	dec	r22
 a06:	f1 f7       	brne	.-4      	; 0xa04 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
 a08:	6f 91       	pop	r22
 a0a:	31 97       	sbiw	r30, 0x01	; 1
 a0c:	c9 f7       	brne	.-14     	; 0xa00 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
 a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
 a10:	08 95       	ret

00000a12 <delay_ms>:
 a12:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN13OrangutanTime17delayMillisecondsEj>
 a16:	08 95       	ret

00000a18 <__divmodhi4>:
 a18:	97 fb       	bst	r25, 7
 a1a:	07 2e       	mov	r0, r23
 a1c:	16 f4       	brtc	.+4      	; 0xa22 <__divmodhi4+0xa>
 a1e:	00 94       	com	r0
 a20:	07 d0       	rcall	.+14     	; 0xa30 <__divmodhi4_neg1>
 a22:	77 fd       	sbrc	r23, 7
 a24:	09 d0       	rcall	.+18     	; 0xa38 <__divmodhi4_neg2>
 a26:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__udivmodhi4>
 a2a:	07 fc       	sbrc	r0, 7
 a2c:	05 d0       	rcall	.+10     	; 0xa38 <__divmodhi4_neg2>
 a2e:	3e f4       	brtc	.+14     	; 0xa3e <__divmodhi4_exit>

00000a30 <__divmodhi4_neg1>:
 a30:	90 95       	com	r25
 a32:	81 95       	neg	r24
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	08 95       	ret

00000a38 <__divmodhi4_neg2>:
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a3e <__divmodhi4_exit>:
 a3e:	08 95       	ret

00000a40 <__udivmodsi4>:
 a40:	a1 e2       	ldi	r26, 0x21	; 33
 a42:	1a 2e       	mov	r1, r26
 a44:	aa 1b       	sub	r26, r26
 a46:	bb 1b       	sub	r27, r27
 a48:	fd 01       	movw	r30, r26
 a4a:	0d c0       	rjmp	.+26     	; 0xa66 <__udivmodsi4_ep>

00000a4c <__udivmodsi4_loop>:
 a4c:	aa 1f       	adc	r26, r26
 a4e:	bb 1f       	adc	r27, r27
 a50:	ee 1f       	adc	r30, r30
 a52:	ff 1f       	adc	r31, r31
 a54:	a2 17       	cp	r26, r18
 a56:	b3 07       	cpc	r27, r19
 a58:	e4 07       	cpc	r30, r20
 a5a:	f5 07       	cpc	r31, r21
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__udivmodsi4_ep>
 a5e:	a2 1b       	sub	r26, r18
 a60:	b3 0b       	sbc	r27, r19
 a62:	e4 0b       	sbc	r30, r20
 a64:	f5 0b       	sbc	r31, r21

00000a66 <__udivmodsi4_ep>:
 a66:	66 1f       	adc	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	1a 94       	dec	r1
 a70:	69 f7       	brne	.-38     	; 0xa4c <__udivmodsi4_loop>
 a72:	60 95       	com	r22
 a74:	70 95       	com	r23
 a76:	80 95       	com	r24
 a78:	90 95       	com	r25
 a7a:	9b 01       	movw	r18, r22
 a7c:	ac 01       	movw	r20, r24
 a7e:	bd 01       	movw	r22, r26
 a80:	cf 01       	movw	r24, r30
 a82:	08 95       	ret

00000a84 <__prologue_saves__>:
 a84:	2f 92       	push	r2
 a86:	3f 92       	push	r3
 a88:	4f 92       	push	r4
 a8a:	5f 92       	push	r5
 a8c:	6f 92       	push	r6
 a8e:	7f 92       	push	r7
 a90:	8f 92       	push	r8
 a92:	9f 92       	push	r9
 a94:	af 92       	push	r10
 a96:	bf 92       	push	r11
 a98:	cf 92       	push	r12
 a9a:	df 92       	push	r13
 a9c:	ef 92       	push	r14
 a9e:	ff 92       	push	r15
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
 aac:	ca 1b       	sub	r28, r26
 aae:	db 0b       	sbc	r29, r27
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	f8 94       	cli
 ab4:	de bf       	out	0x3e, r29	; 62
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	cd bf       	out	0x3d, r28	; 61
 aba:	09 94       	ijmp

00000abc <__epilogue_restores__>:
 abc:	2a 88       	ldd	r2, Y+18	; 0x12
 abe:	39 88       	ldd	r3, Y+17	; 0x11
 ac0:	48 88       	ldd	r4, Y+16	; 0x10
 ac2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac8:	8c 84       	ldd	r8, Y+12	; 0x0c
 aca:	9b 84       	ldd	r9, Y+11	; 0x0b
 acc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ace:	b9 84       	ldd	r11, Y+9	; 0x09
 ad0:	c8 84       	ldd	r12, Y+8	; 0x08
 ad2:	df 80       	ldd	r13, Y+7	; 0x07
 ad4:	ee 80       	ldd	r14, Y+6	; 0x06
 ad6:	fd 80       	ldd	r15, Y+5	; 0x05
 ad8:	0c 81       	ldd	r16, Y+4	; 0x04
 ada:	1b 81       	ldd	r17, Y+3	; 0x03
 adc:	aa 81       	ldd	r26, Y+2	; 0x02
 ade:	b9 81       	ldd	r27, Y+1	; 0x01
 ae0:	ce 0f       	add	r28, r30
 ae2:	d1 1d       	adc	r29, r1
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	f8 94       	cli
 ae8:	de bf       	out	0x3e, r29	; 62
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	cd bf       	out	0x3d, r28	; 61
 aee:	ed 01       	movw	r28, r26
 af0:	08 95       	ret

00000af2 <__udivmodhi4>:
 af2:	aa 1b       	sub	r26, r26
 af4:	bb 1b       	sub	r27, r27
 af6:	51 e1       	ldi	r21, 0x11	; 17
 af8:	07 c0       	rjmp	.+14     	; 0xb08 <__udivmodhi4_ep>

00000afa <__udivmodhi4_loop>:
 afa:	aa 1f       	adc	r26, r26
 afc:	bb 1f       	adc	r27, r27
 afe:	a6 17       	cp	r26, r22
 b00:	b7 07       	cpc	r27, r23
 b02:	10 f0       	brcs	.+4      	; 0xb08 <__udivmodhi4_ep>
 b04:	a6 1b       	sub	r26, r22
 b06:	b7 0b       	sbc	r27, r23

00000b08 <__udivmodhi4_ep>:
 b08:	88 1f       	adc	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	5a 95       	dec	r21
 b0e:	a9 f7       	brne	.-22     	; 0xafa <__udivmodhi4_loop>
 b10:	80 95       	com	r24
 b12:	90 95       	com	r25
 b14:	bc 01       	movw	r22, r24
 b16:	cd 01       	movw	r24, r26
 b18:	08 95       	ret

00000b1a <_exit>:
 b1a:	f8 94       	cli

00000b1c <__stop_program>:
 b1c:	ff cf       	rjmp	.-2      	; 0xb1c <__stop_program>
