
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080010e  0080010e  00000f38  2**0
                  ALLOC
  3 .stab         000015a8  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a6c  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00004f4c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f90  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000270  00000000  00000000  00004fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001ac0  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000093b  00000000  00000000  00006d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000c95  00000000  00000000  0000763b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000049c  00000000  00000000  000082d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000823  00000000  00000000  0000876c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006a3  00000000  00000000  00008f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000210  00000000  00000000  00009632  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  9e:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configure_push_button_array>:
#include "button_driver.h"

void configure_push_button_array()
{
	DDR(BUTTON_PIN) &= ~(1<<BUTTONA_LOC);
  a6:	21 98       	cbi	0x04, 1	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONB_LOC);
  a8:	24 98       	cbi	0x04, 4	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONC_LOC);
  aa:	25 98       	cbi	0x04, 5	; 4
	PORT(BUTTON_PIN) |= (1<<BUTTONA_LOC);
  ac:	29 9a       	sbi	0x05, 1	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONB_LOC);
  ae:	2c 9a       	sbi	0x05, 4	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONC_LOC);
  b0:	2d 9a       	sbi	0x05, 5	; 5
  b2:	08 95       	ret

000000b4 <init_buzzer>:
 */

#include "main.h"

void init_buzzer(){
	DDR(BUZZER_PORT) |= (BUZZER_PIN);
  b4:	22 9a       	sbi	0x04, 2	; 4
	TIMER1_CLK |= ( (1<<0)	| (1<<4) | (1<<5) );
  b6:	e0 e8       	ldi	r30, 0x80	; 128
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 63       	ori	r24, 0x31	; 49
  be:	80 83       	st	Z, r24
	TIMER2_CLK |= (1<<4);
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <playFrequency>:
}
void playFrequency(uint32_t freq, uint8_t dur)
{
  cc:	cf 93       	push	r28
  ce:	c4 2f       	mov	r28, r20
	if (freq < 40) freq = 40;	
  d0:	68 32       	cpi	r22, 0x28	; 40
  d2:	71 05       	cpc	r23, r1
  d4:	81 05       	cpc	r24, r1
  d6:	91 05       	cpc	r25, r1
  d8:	20 f4       	brcc	.+8      	; 0xe2 <playFrequency+0x16>
  da:	68 e2       	ldi	r22, 0x28	; 40
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	21 31       	cpi	r18, 0x11	; 17
  e8:	87 e2       	ldi	r24, 0x27	; 39
  ea:	38 07       	cpc	r19, r24
  ec:	41 05       	cpc	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	20 f0       	brcs	.+8      	; 0xfa <playFrequency+0x2e>
  f2:	20 e1       	ldi	r18, 0x10	; 16
  f4:	37 e2       	ldi	r19, 0x27	; 39
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
	if (freq > 10000) freq = 10000;    
 
	uint32_t top = (F_CPU/freq);
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	72 e4       	ldi	r23, 0x42	; 66
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__udivmodsi4>
	TIMER2_CLK |= (1<<0);
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
	OCR1A = top;	
 110:	30 93 89 00 	sts	0x0089, r19
 114:	20 93 88 00 	sts	0x0088, r18
	OCR1B = (top>>2);
 118:	da 01       	movw	r26, r20
 11a:	c9 01       	movw	r24, r18
 11c:	b6 95       	lsr	r27
 11e:	a7 95       	ror	r26
 120:	97 95       	ror	r25
 122:	87 95       	ror	r24
 124:	b6 95       	lsr	r27
 126:	a7 95       	ror	r26
 128:	97 95       	ror	r25
 12a:	87 95       	ror	r24
 12c:	90 93 8b 00 	sts	0x008B, r25
 130:	80 93 8a 00 	sts	0x008A, r24
	
	uint8_t i;
	for (i=0;i<dur; i++){
 134:	cc 23       	and	r28, r28
 136:	69 f0       	breq	.+26     	; 0x152 <playFrequency+0x86>
 138:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	9f e9       	ldi	r25, 0x9F	; 159
 13c:	26 e8       	ldi	r18, 0x86	; 134
 13e:	31 e0       	ldi	r19, 0x01	; 1
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <playFrequency+0x74>
 148:	00 c0       	rjmp	.+0      	; 0x14a <playFrequency+0x7e>
 14a:	00 00       	nop
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	8c 13       	cpse	r24, r28
 150:	f4 cf       	rjmp	.-24     	; 0x13a <playFrequency+0x6e>
		
		_delay_ms(500);
	}
	TIMER2_CLK &= ~(1<<0);
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	80 83       	st	Z, r24
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <set_DB_input>:
	DDR(E_PORT) |= (1<<E_LOC);
}

static void set_DB_input()
{
	DDR(DB0_PORT) &= ~(1<<DB0_LOC);
 160:	21 98       	cbi	0x04, 1	; 4
	DDR(DB1_PORT) &= ~(1<<DB1_LOC);
 162:	24 98       	cbi	0x04, 4	; 4
	DDR(DB2_PORT) &= ~(1<<DB2_LOC);
 164:	25 98       	cbi	0x04, 5	; 4
	DDR(DB3_PORT) &= ~(1<<DB3_LOC);
 166:	57 98       	cbi	0x0a, 7	; 10
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 168:	29 9a       	sbi	0x05, 1	; 5
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 16a:	2c 9a       	sbi	0x05, 4	; 5
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 16c:	2d 9a       	sbi	0x05, 5	; 5
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	08 95       	ret

00000172 <set_DB_output>:
}

static void set_DB_output()
{
	DDR(DB0_PORT) |= (1<<DB0_LOC);
 172:	21 9a       	sbi	0x04, 1	; 4
	DDR(DB1_PORT) |= (1<<DB1_LOC);
 174:	24 9a       	sbi	0x04, 4	; 4
	DDR(DB2_PORT) |= (1<<DB2_LOC);
 176:	25 9a       	sbi	0x04, 5	; 4
	DDR(DB3_PORT) |= (1<<DB3_LOC);
 178:	57 9a       	sbi	0x0a, 7	; 10
 17a:	08 95       	ret

0000017c <pulse_E>:
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
}

static void set_E()
{
	PORT(E_PORT) |= (1<<E_LOC);
 17c:	5c 9a       	sbi	0x0b, 4	; 11
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <pulse_E+0x6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <pulse_E+0xc>
 188:	00 00       	nop
}

static bool get_DB0()
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
 18a:	83 b1       	in	r24, 0x03	; 3
static uint8_t pulse_E()
{
	uint8_t num=0;
	set_E();
	_delay_ms(10);
	if(get_DB0()) num |= (1<<0);
 18c:	86 95       	lsr	r24
 18e:	81 70       	andi	r24, 0x01	; 1
	if(get_DB1()) num|= (1<<1);
 190:	1c 99       	sbic	0x03, 4	; 3
 192:	82 60       	ori	r24, 0x02	; 2
	if(get_DB2()) num |= (1<<2);
 194:	1d 99       	sbic	0x03, 5	; 3
 196:	84 60       	ori	r24, 0x04	; 4
	if(get_DB3()) num |= (1<<3);
 198:	4f 99       	sbic	0x09, 7	; 9
 19a:	88 60       	ori	r24, 0x08	; 8
	PORT(RW_PORT) &= ~(1<<RW_LOC);
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 19c:	5c 98       	cbi	0x0b, 4	; 11
	if(get_DB1()) num|= (1<<1);
	if(get_DB2()) num |= (1<<2);
	if(get_DB3()) num |= (1<<3);
	clear_E();
	return num;
}
 19e:	08 95       	ret

000001a0 <nibble_out>:
	while(num&(BUSY_FLAG));

}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
 1a0:	80 ff       	sbrs	r24, 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <nibble_out+0x8>
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
}
static void set_DB0()
{
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 1a4:	29 9a       	sbi	0x05, 1	; 5
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <nibble_out+0xa>
	PORT(E_PORT) &= ~(1<<E_LOC);
}

static void clear_DB0()
{
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
 1a8:	29 98       	cbi	0x05, 1	; 5
}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
 1aa:	81 ff       	sbrs	r24, 1
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <nibble_out+0x12>
	PORT(DB0_PORT) |= (1<<DB0_LOC);
}

static void set_DB1()
{
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 1ae:	2c 9a       	sbi	0x05, 4	; 5
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <nibble_out+0x14>
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
}

static void clear_DB1()
{
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
 1b2:	2c 98       	cbi	0x05, 4	; 5
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
 1b4:	82 ff       	sbrs	r24, 2
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <nibble_out+0x1c>
	PORT(DB1_PORT) |= (1<<DB1_LOC);
}

static void set_DB2()
{
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 1b8:	2d 9a       	sbi	0x05, 5	; 5
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <nibble_out+0x1e>
	PORT(DB3_PORT) |= (1<<DB3_LOC);
}

static void clear_DB2()
{
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
 1bc:	2d 98       	cbi	0x05, 5	; 5
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
 1be:	83 ff       	sbrs	r24, 3
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <nibble_out+0x26>
	PORT(DB2_PORT) |= (1<<DB2_LOC);
}

static void set_DB3()
{
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <nibble_out+0x28>
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
}

static void clear_DB3()
{
	PORT(DB3_PORT) &= ~(1<<DB3_LOC);
 1c6:	5f 98       	cbi	0x0b, 7	; 11
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
	else clear_DB3();
	pulse_E();
 1c8:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 1cc:	08 95       	ret

000001ce <write_reg>:
}
static void write_reg(uint8_t num, uint8_t rs)
{
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	d8 2f       	mov	r29, r24
 1d6:	16 2f       	mov	r17, r22
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 1d8:	5a 98       	cbi	0x0b, 2	; 11
 1da:	83 ec       	ldi	r24, 0xC3	; 195
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <write_reg+0x10>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <write_reg+0x16>
 1e4:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 1e6:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 1ea:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1ec:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 1f0:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 1f2:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1f6:	c2 95       	swap	r28
 1f8:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 1fa:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 1fc:	6c f3       	brlt	.-38     	; 0x1d8 <write_reg+0xa>
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 1fe:	28 98       	cbi	0x05, 0	; 5
}
static void write_reg(uint8_t num, uint8_t rs)
{
	busywait();
	clear_RW();
	if(rs) set_RS();
 200:	11 23       	and	r17, r17
 202:	11 f0       	breq	.+4      	; 0x208 <write_reg+0x3a>
	return PIN(DB3_PORT)&(1<<DB3_LOC);
}

static void set_RS()
{
	PORT(RS_PORT) |= (1<<RS_LOC);
 204:	5a 9a       	sbi	0x0b, 2	; 11
 206:	01 c0       	rjmp	.+2      	; 0x20a <write_reg+0x3c>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 208:	5a 98       	cbi	0x0b, 2	; 11
{
	busywait();
	clear_RW();
	if(rs) set_RS();
	else clear_RS();
	set_DB_output();
 20a:	0e 94 b9 00 	call	0x172	; 0x172 <set_DB_output>
	nibble_out(num>>4);
 20e:	8d 2f       	mov	r24, r29
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	nibble_out(num);
 218:	8d 2f       	mov	r24, r29
 21a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	set_DB_input();
 21e:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	08 95       	ret

0000022a <lcd_initialize>:
static void nibble_out(uint8_t num);
static void write_reg(uint8_t num, uint8_t rs);


void lcd_initialize()
{
 22a:	cf 93       	push	r28
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 22c:	28 98       	cbi	0x05, 0	; 5
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 22e:	5c 98       	cbi	0x0b, 4	; 11
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 230:	5a 98       	cbi	0x0b, 2	; 11
	while(*str) lcd_putc(*str++);
}

static void setup_RS_RW_E()
{
	DDR(RS_PORT) |= (1<<RS_LOC);
 232:	52 9a       	sbi	0x0a, 2	; 10
	DDR(RW_PORT) |= (1<<RW_LOC);
 234:	20 9a       	sbi	0x04, 0	; 4
	DDR(E_PORT) |= (1<<E_LOC);
 236:	54 9a       	sbi	0x0a, 4	; 10
{
	clear_RW();
	clear_E();
	clear_RS();
	setup_RS_RW_E();
	set_DB_output();
 238:	0e 94 b9 00 	call	0x172	; 0x172 <set_DB_output>
 23c:	83 ec       	ldi	r24, 0xC3	; 195
 23e:	99 e0       	ldi	r25, 0x09	; 9
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_initialize+0x16>
 244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_initialize+0x1c>
 246:	00 00       	nop
	
	_delay_ms(10);
	nibble_out(0x3);
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_initialize+0x28>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_initialize+0x2e>
 258:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_initialize+0x3a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_initialize+0x40>
 26a:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
 272:	83 ec       	ldi	r24, 0xC3	; 195
 274:	99 e0       	ldi	r25, 0x09	; 9
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_initialize+0x4c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_initialize+0x52>
 27c:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x2);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nibble_out>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 284:	5a 98       	cbi	0x0b, 2	; 11
 286:	83 ec       	ldi	r24, 0xC3	; 195
 288:	99 e0       	ldi	r25, 0x09	; 9
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_initialize+0x60>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_initialize+0x66>
 290:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 292:	0e 94 b0 00 	call	0x160	; 0x160 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 296:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 298:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
 29c:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 29e:	0e 94 be 00 	call	0x17c	; 0x17c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 2a2:	c2 95       	swap	r28
 2a4:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 2a6:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 2a8:	6c f3       	brlt	.-38     	; 0x284 <lcd_initialize+0x5a>
	_delay_ms(10);
	nibble_out(0x3);
	_delay_ms(10);
	nibble_out(0x2);
	busywait();
	write_reg(0x28,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x08,0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x01,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
	write_reg(0x06,0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
}
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <lcd_display_on>:
	set_DB_input();
}

void lcd_display_on()
{
	write_reg(0x0C, 0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
 2d6:	08 95       	ret

000002d8 <lcd_putc>:
}


void lcd_putc(const char x)
{
	write_reg(x,1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_reg>
 2de:	08 95       	ret

000002e0 <lcd_puts>:
}

void lcd_puts(const char *str)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	while(*str) lcd_putc(*str++);
 2e6:	88 81       	ld	r24, Y
 2e8:	88 23       	and	r24, r24
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <lcd_puts+0x18>
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_putc>
 2f2:	89 91       	ld	r24, Y+
 2f4:	81 11       	cpse	r24, r1
 2f6:	fb cf       	rjmp	.-10     	; 0x2ee <lcd_puts+0xe>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:
#include "main.h"
#include<pololu/3pi.h>

int main()
{
	lcd_initialize();
 2fe:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_initialize>
	lcd_display_on();
 302:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_display_on>
	configure_left_motor();
 306:	0e 94 b7 01 	call	0x36e	; 0x36e <configure_left_motor>
	configure_right_motor();
 30a:	0e 94 c0 01 	call	0x380	; 0x380 <configure_right_motor>
	init_buzzer();
 30e:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_buzzer>
	configure_reflectance_sensors();
 312:	0e 94 1d 03 	call	0x63a	; 0x63a <configure_reflectance_sensors>
	configure_push_button_array();
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <configure_push_button_array>
	
	playFrequency(500,1); //Code Uploaded
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	64 ef       	ldi	r22, 0xF4	; 244
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 66 00 	call	0xcc	; 0xcc <playFrequency>
	//sensortest();

	lcd_goto_xy(0,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <lcd_goto_xy>
	lcd_puts("Final");
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_puts>
	lcd_goto_xy(0,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <lcd_goto_xy>
	lcd_puts("Project");
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_puts>
	

	
	
	
			shift_right_motor_forward();
 348:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <shift_right_motor_forward>
			shift_left_motor_forward();
 34c:	0e 94 cc 01 	call	0x398	; 0x398 <shift_left_motor_forward>
		
		 pid_controller();
 350:	0e 94 1a 02 	call	0x434	; 0x434 <pid_controller>
		*/

	
return 0;

}
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret

0000035a <disable_PWM_LA>:
static void clear_RB()
{	PORT(RMOTORB_PORT) &= ~(1<<RMOTORB_LOC);}
static void enable_PWM_LA()
{	TCCR0A |= PWM_A_MASK;}
static void disable_PWM_LA()
{	TCCR0A &= ~PWM_A_MASK;}
 35a:	84 b5       	in	r24, 0x24	; 36
 35c:	8f 73       	andi	r24, 0x3F	; 63
 35e:	84 bd       	out	0x24, r24	; 36
 360:	08 95       	ret

00000362 <disable_PWM_RA>:
static void disable_PWM_LB()
{	TCCR0A &= ~PWM_B_MASK;}
static void enable_PWM_RA()
{	TCCR2A |= PWM_A_MASK;}
static void disable_PWM_RA()
{	TCCR2A &= ~PWM_A_MASK;}
 362:	e0 eb       	ldi	r30, 0xB0	; 176
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	8f 73       	andi	r24, 0x3F	; 63
 36a:	80 83       	st	Z, r24
 36c:	08 95       	ret

0000036e <configure_left_motor>:
	 configure_right_motor();
}

void configure_left_motor()
{
	DDR(LMOTORA_PORT) |= (1<<LMOTORA_LOC);
 36e:	56 9a       	sbi	0x0a, 6	; 10
	DDR(LMOTORB_PORT) |= (1<<LMOTORB_LOC);
 370:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = 0x03;
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((TCCR0B&0xC0)|0x01);
 376:	85 b5       	in	r24, 0x25	; 37
 378:	80 7c       	andi	r24, 0xC0	; 192
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	85 bd       	out	0x25, r24	; 37
 37e:	08 95       	ret

00000380 <configure_right_motor>:
}

void configure_right_motor()
{
	DDR(RMOTORA_PORT) |= (1<<RMOTORA_LOC);
 380:	23 9a       	sbi	0x04, 3	; 4
	DDR(RMOTORB_PORT) |= (1<<RMOTORB_LOC);
 382:	53 9a       	sbi	0x0a, 3	; 10
	TCCR2A = 0x03;
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = ((TCCR2B&0xC0)|0x01);
 38a:	e1 eb       	ldi	r30, 0xB1	; 177
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	80 7c       	andi	r24, 0xC0	; 192
 392:	81 60       	ori	r24, 0x01	; 1
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <shift_left_motor_forward>:
	else if (get_RB_PWM()) return RB_PWM_MATCH;
}

void shift_left_motor_forward()
{
	disable_PWM_LA();
 398:	0e 94 ad 01 	call	0x35a	; 0x35a <disable_PWM_LA>




static void set_LA()
{	PORT(LMOTORA_PORT) |= (1<<LMOTORA_LOC);}
 39c:	5e 9a       	sbi	0x0b, 6	; 11
static void enable_PWM_LA()
{	TCCR0A |= PWM_A_MASK;}
static void disable_PWM_LA()
{	TCCR0A &= ~PWM_A_MASK;}
static void enable_PWM_LB()
{	TCCR0A |= PWM_B_MASK;}
 39e:	84 b5       	in	r24, 0x24	; 36
 3a0:	80 63       	ori	r24, 0x30	; 48
 3a2:	84 bd       	out	0x24, r24	; 36
 3a4:	08 95       	ret

000003a6 <shift_right_motor_forward>:
	enable_PWM_LB();
}

void shift_right_motor_forward()
{
	disable_PWM_RA();
 3a6:	0e 94 b1 01 	call	0x362	; 0x362 <disable_PWM_RA>
static void set_LB()
{	PORT(LMOTORB_PORT) |= (1<<LMOTORB_LOC);}
static void clear_LB()
{	PORT(LMOTORB_PORT) &= ~(1<<LMOTORB_LOC);}
static void set_RA()
{	PORT(RMOTORA_PORT) |= (1<<RMOTORA_LOC);}
 3aa:	2b 9a       	sbi	0x05, 3	; 5
static void enable_PWM_RA()
{	TCCR2A |= PWM_A_MASK;}
static void disable_PWM_RA()
{	TCCR2A &= ~PWM_A_MASK;}
static void enable_PWM_RB()
{	TCCR2A |= PWM_B_MASK;}
 3ac:	e0 eb       	ldi	r30, 0xB0	; 176
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 63       	ori	r24, 0x30	; 48
 3b4:	80 83       	st	Z, r24
 3b6:	08 95       	ret

000003b8 <duty_to_match>:
	clear_RB();
}

uint8_t duty_to_match(uint8_t duty)
{
	if(duty>=0&&duty<=100) return duty*2.55;
 3b8:	85 36       	cpi	r24, 0x65	; 101
 3ba:	80 f4       	brcc	.+32     	; 0x3dc <duty_to_match+0x24>
 3bc:	68 2f       	mov	r22, r24
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 89 04 	call	0x912	; 0x912 <__floatsisf>
 3c8:	23 e3       	ldi	r18, 0x33	; 51
 3ca:	33 e3       	ldi	r19, 0x33	; 51
 3cc:	43 e2       	ldi	r20, 0x23	; 35
 3ce:	50 e4       	ldi	r21, 0x40	; 64
 3d0:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 3d4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 3d8:	86 2f       	mov	r24, r22
 3da:	08 95       	ret
	else return (duty%100)*2.55;
 3dc:	99 e2       	ldi	r25, 0x29	; 41
 3de:	89 9f       	mul	r24, r25
 3e0:	91 2d       	mov	r25, r1
 3e2:	11 24       	eor	r1, r1
 3e4:	92 95       	swap	r25
 3e6:	9f 70       	andi	r25, 0x0F	; 15
 3e8:	68 2f       	mov	r22, r24
 3ea:	24 e6       	ldi	r18, 0x64	; 100
 3ec:	92 9f       	mul	r25, r18
 3ee:	60 19       	sub	r22, r0
 3f0:	11 24       	eor	r1, r1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 89 04 	call	0x912	; 0x912 <__floatsisf>
 3fc:	23 e3       	ldi	r18, 0x33	; 51
 3fe:	33 e3       	ldi	r19, 0x33	; 51
 400:	43 e2       	ldi	r20, 0x23	; 35
 402:	50 e4       	ldi	r21, 0x40	; 64
 404:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 408:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 40c:	86 2f       	mov	r24, r22
}
 40e:	08 95       	ret

00000410 <set_left_motor_speed>:
	TCCR2B = ((TCCR2B&0xC0)|0x01);
}

void set_left_motor_speed(uint8_t speed)
{
	if(speed<5) speed=0;
 410:	85 30       	cpi	r24, 0x05	; 5
 412:	08 f4       	brcc	.+2      	; 0x416 <set_left_motor_speed+0x6>
 414:	80 e0       	ldi	r24, 0x00	; 0
	LA_PWM_MATCH = duty_to_match(speed);
 416:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <duty_to_match>
 41a:	87 bd       	out	0x27, r24	; 39
	LB_PWM_MATCH = duty_to_match(speed);
 41c:	88 bd       	out	0x28, r24	; 40
 41e:	08 95       	ret

00000420 <set_right_motor_speed>:
}

void set_right_motor_speed(uint8_t speed)
{
	if(speed<5) speed=0;
 420:	85 30       	cpi	r24, 0x05	; 5
 422:	08 f4       	brcc	.+2      	; 0x426 <set_right_motor_speed+0x6>
 424:	80 e0       	ldi	r24, 0x00	; 0
	RA_PWM_MATCH = duty_to_match(speed);
 426:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <duty_to_match>
 42a:	80 93 b3 00 	sts	0x00B3, r24
	RB_PWM_MATCH = duty_to_match(speed);
 42e:	80 93 b4 00 	sts	0x00B4, r24
 432:	08 95       	ret

00000434 <pid_controller>:
static bool get_LB_PWM();
static bool get_RA_PWM();
static bool get_RB_PWM();

void pid_controller()
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	00 d0       	rcall	.+0      	; 0x43a <pid_controller+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <pid_controller+0x8>
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
		float  pid_speed= control * pwm;
		
		int16_t pid_change_A = pwm - pid_speed;
		int16_t pid_change_B= pwm + pid_speed;
		
		if (pid_change_A > 100)  pid_change_A = 155;
 440:	0f 2e       	mov	r0, r31
 442:	fb e9       	ldi	r31, 0x9B	; 155
 444:	2f 2e       	mov	r2, r31
 446:	f0 2d       	mov	r31, r0
 448:	31 2c       	mov	r3, r1
 44a:	10 e0       	ldi	r17, 0x00	; 0
 44c:	00 e0       	ldi	r16, 0x00	; 0
 44e:	87 e8       	ldi	r24, 0x87	; 135
 450:	93 e1       	ldi	r25, 0x13	; 19
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <pid_controller+0x1e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <pid_controller+0x24>
 458:	00 00       	nop

	while(1)
	{
		
		_delay_ms(20);
		if(get_sensor_location() == -128) continue;
 45a:	0e 94 3f 03 	call	0x67e	; 0x67e <get_sensor_location>
 45e:	80 38       	cpi	r24, 0x80	; 128
 460:	b1 f3       	breq	.-20     	; 0x44e <pid_controller+0x1a>
		else sensor = get_sensor_location()/100.9;
 462:	0e 94 3f 03 	call	0x67e	; 0x67e <get_sensor_location>
 466:	68 2f       	mov	r22, r24
 468:	88 0f       	add	r24, r24
 46a:	77 0b       	sbc	r23, r23
 46c:	88 0b       	sbc	r24, r24
 46e:	99 0b       	sbc	r25, r25
 470:	0e 94 89 04 	call	0x912	; 0x912 <__floatsisf>
 474:	2d ec       	ldi	r18, 0xCD	; 205
 476:	3c ec       	ldi	r19, 0xCC	; 204
 478:	49 ec       	ldi	r20, 0xC9	; 201
 47a:	52 e4       	ldi	r21, 0x42	; 66
 47c:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3>
 480:	60 93 35 01 	sts	0x0135, r22
 484:	70 93 36 01 	sts	0x0136, r23
 488:	80 93 37 01 	sts	0x0137, r24
 48c:	90 93 38 01 	sts	0x0138, r25
		sensor_avg = sensor_avg + (sensor-sensor_avg)/32;
 490:	c0 90 31 01 	lds	r12, 0x0131
 494:	d0 90 32 01 	lds	r13, 0x0132
 498:	e0 90 33 01 	lds	r14, 0x0133
 49c:	f0 90 34 01 	lds	r15, 0x0134
 4a0:	a7 01       	movw	r20, r14
 4a2:	96 01       	movw	r18, r12
 4a4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__subsf3>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	5d e3       	ldi	r21, 0x3D	; 61
 4b0:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 4b4:	9b 01       	movw	r18, r22
 4b6:	ac 01       	movw	r20, r24
 4b8:	c7 01       	movw	r24, r14
 4ba:	b6 01       	movw	r22, r12
 4bc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 4c0:	9b 01       	movw	r18, r22
 4c2:	ac 01       	movw	r20, r24
 4c4:	60 93 31 01 	sts	0x0131, r22
 4c8:	70 93 32 01 	sts	0x0132, r23
 4cc:	80 93 33 01 	sts	0x0133, r24
 4d0:	90 93 34 01 	sts	0x0134, r25
		
		error = 0 - sensor_avg;
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	cb 01       	movw	r24, r22
 4da:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__subsf3>
 4de:	6b 01       	movw	r12, r22
 4e0:	7c 01       	movw	r14, r24
 4e2:	60 93 2d 01 	sts	0x012D, r22
 4e6:	70 93 2e 01 	sts	0x012E, r23
 4ea:	80 93 2f 01 	sts	0x012F, r24
 4ee:	90 93 30 01 	sts	0x0130, r25
		deriv = error - last_error;
 4f2:	60 91 2c 01 	lds	r22, 0x012C
 4f6:	06 2e       	mov	r0, r22
 4f8:	00 0c       	add	r0, r0
 4fa:	77 0b       	sbc	r23, r23
 4fc:	88 0b       	sbc	r24, r24
 4fe:	99 0b       	sbc	r25, r25
 500:	0e 94 89 04 	call	0x912	; 0x912 <__floatsisf>
 504:	9b 01       	movw	r18, r22
 506:	ac 01       	movw	r20, r24
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__subsf3>
 510:	2b 01       	movw	r4, r22
 512:	3c 01       	movw	r6, r24
 514:	60 93 28 01 	sts	0x0128, r22
 518:	70 93 29 01 	sts	0x0129, r23
 51c:	80 93 2a 01 	sts	0x012A, r24
 520:	90 93 2b 01 	sts	0x012B, r25
		integral = integral + error;
 524:	20 91 24 01 	lds	r18, 0x0124
 528:	30 91 25 01 	lds	r19, 0x0125
 52c:	40 91 26 01 	lds	r20, 0x0126
 530:	50 91 27 01 	lds	r21, 0x0127
 534:	c7 01       	movw	r24, r14
 536:	b6 01       	movw	r22, r12
 538:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 53c:	4b 01       	movw	r8, r22
 53e:	5c 01       	movw	r10, r24
 540:	60 93 24 01 	sts	0x0124, r22
 544:	70 93 25 01 	sts	0x0125, r23
 548:	80 93 26 01 	sts	0x0126, r24
 54c:	90 93 27 01 	sts	0x0127, r25
		control = kp*error + kd*deriv + ki*integral;
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	5f e3       	ldi	r21, 0x3F	; 63
 558:	c7 01       	movw	r24, r14
 55a:	b6 01       	movw	r22, r12
 55c:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 560:	69 83       	std	Y+1, r22	; 0x01
 562:	7a 83       	std	Y+2, r23	; 0x02
 564:	8b 83       	std	Y+3, r24	; 0x03
 566:	9c 83       	std	Y+4, r25	; 0x04
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	48 e4       	ldi	r20, 0x48	; 72
 56e:	52 e4       	ldi	r21, 0x42	; 66
 570:	c3 01       	movw	r24, r6
 572:	b2 01       	movw	r22, r4
 574:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 578:	9b 01       	movw	r18, r22
 57a:	ac 01       	movw	r20, r24
 57c:	69 81       	ldd	r22, Y+1	; 0x01
 57e:	7a 81       	ldd	r23, Y+2	; 0x02
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	9c 81       	ldd	r25, Y+4	; 0x04
 584:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 588:	2b 01       	movw	r4, r22
 58a:	3c 01       	movw	r6, r24
 58c:	27 e1       	ldi	r18, 0x17	; 23
 58e:	37 eb       	ldi	r19, 0xB7	; 183
 590:	41 ed       	ldi	r20, 0xD1	; 209
 592:	58 e3       	ldi	r21, 0x38	; 56
 594:	c5 01       	movw	r24, r10
 596:	b4 01       	movw	r22, r8
 598:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 59c:	9b 01       	movw	r18, r22
 59e:	ac 01       	movw	r20, r24
 5a0:	c3 01       	movw	r24, r6
 5a2:	b2 01       	movw	r22, r4
 5a4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 5a8:	4b 01       	movw	r8, r22
 5aa:	5c 01       	movw	r10, r24
 5ac:	60 93 20 01 	sts	0x0120, r22
 5b0:	70 93 21 01 	sts	0x0121, r23
 5b4:	80 93 22 01 	sts	0x0122, r24
 5b8:	90 93 23 01 	sts	0x0123, r25
		last_error = error;
 5bc:	c7 01       	movw	r24, r14
 5be:	b6 01       	movw	r22, r12
 5c0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixsfsi>
 5c4:	60 93 2c 01 	sts	0x012C, r22
		
	
		float  pid_speed= control * pwm;
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	48 e4       	ldi	r20, 0x48	; 72
 5ce:	52 e4       	ldi	r21, 0x42	; 66
 5d0:	c5 01       	movw	r24, r10
 5d2:	b4 01       	movw	r22, r8
 5d4:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 5d8:	4b 01       	movw	r8, r22
 5da:	5c 01       	movw	r10, r24
		
		int16_t pid_change_A = pwm - pid_speed;
 5dc:	9b 01       	movw	r18, r22
 5de:	ac 01       	movw	r20, r24
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	88 e4       	ldi	r24, 0x48	; 72
 5e6:	92 e4       	ldi	r25, 0x42	; 66
 5e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__subsf3>
 5ec:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixsfsi>
 5f0:	7b 01       	movw	r14, r22
		int16_t pid_change_B= pwm + pid_speed;
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	48 e4       	ldi	r20, 0x48	; 72
 5f8:	52 e4       	ldi	r21, 0x42	; 66
 5fa:	c5 01       	movw	r24, r10
 5fc:	b4 01       	movw	r22, r8
 5fe:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__addsf3>
 602:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixsfsi>
 606:	6b 01       	movw	r12, r22
		
		if (pid_change_A > 100)  pid_change_A = 155;
 608:	95 e6       	ldi	r25, 0x65	; 101
 60a:	e9 16       	cp	r14, r25
 60c:	f1 04       	cpc	r15, r1
 60e:	14 f0       	brlt	.+4      	; 0x614 <pid_controller+0x1e0>
 610:	e2 2c       	mov	r14, r2
 612:	f3 2c       	mov	r15, r3
		if (pid_change_B > 100)  pid_change_B = 155;
 614:	e5 e6       	ldi	r30, 0x65	; 101
 616:	ce 16       	cp	r12, r30
 618:	d1 04       	cpc	r13, r1
 61a:	14 f0       	brlt	.+4      	; 0x620 <pid_controller+0x1ec>
 61c:	c2 2c       	mov	r12, r2
 61e:	d3 2c       	mov	r13, r3
 620:	c7 01       	movw	r24, r14
 622:	99 23       	and	r25, r25
 624:	0c f4       	brge	.+2      	; 0x628 <pid_controller+0x1f4>
 626:	81 2f       	mov	r24, r17
		
		if (pid_change_A < 0)  pid_change_A = 0;
		if (pid_change_B < 0)  pid_change_B = 0;		
		
		
		set_left_motor_speed(pid_change_A);
 628:	0e 94 08 02 	call	0x410	; 0x410 <set_left_motor_speed>
 62c:	c6 01       	movw	r24, r12
 62e:	99 23       	and	r25, r25
 630:	0c f4       	brge	.+2      	; 0x634 <pid_controller+0x200>
 632:	81 2f       	mov	r24, r17
		set_right_motor_speed(pid_change_B);
 634:	0e 94 10 02 	call	0x420	; 0x420 <set_right_motor_speed>
 638:	0a cf       	rjmp	.-492    	; 0x44e <pid_controller+0x1a>

0000063a <configure_reflectance_sensors>:
#include "sensor.h"

void configure_reflectance_sensors()
{
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
 63a:	87 b1       	in	r24, 0x07	; 7
 63c:	80 7e       	andi	r24, 0xE0	; 224
 63e:	87 b9       	out	0x07, r24	; 7
	PORT(SENSORS_PORT) |= SENSORS_PIN;
 640:	88 b1       	in	r24, 0x08	; 8
 642:	8f 61       	ori	r24, 0x1F	; 31
 644:	88 b9       	out	0x08, r24	; 8
 646:	08 95       	ret

00000648 <all_white>:

}

bool all_white()
{
	return !(PIN(SENSORS_PORT)&SENSORS_PIN);
 648:	96 b1       	in	r25, 0x06	; 6
 64a:	9f 71       	andi	r25, 0x1F	; 31
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	09 f0       	breq	.+2      	; 0x652 <all_white+0xa>
 650:	80 e0       	ldi	r24, 0x00	; 0
}
 652:	08 95       	ret

00000654 <get_SENSORA>:

bool get_SENSORA()
{
		return PIN(SENSORS_PORT)&(SENSORA);
 654:	86 b1       	in	r24, 0x06	; 6
}
 656:	81 70       	andi	r24, 0x01	; 1
 658:	08 95       	ret

0000065a <get_SENSORB>:
bool get_SENSORB()
{	
	return PIN(SENSORS_PORT)&(SENSORB);
 65a:	86 b1       	in	r24, 0x06	; 6
	}
 65c:	86 95       	lsr	r24
 65e:	81 70       	andi	r24, 0x01	; 1
 660:	08 95       	ret

00000662 <get_SENSORC>:
bool get_SENSORC()
{	
	return PIN(SENSORS_PORT)&(SENSORC);
 662:	86 b1       	in	r24, 0x06	; 6
}
 664:	82 fb       	bst	r24, 2
 666:	88 27       	eor	r24, r24
 668:	80 f9       	bld	r24, 0
 66a:	08 95       	ret

0000066c <get_SENSORD>:
bool get_SENSORD()
{	
	return PIN(SENSORS_PORT)&(SENSORD);
 66c:	86 b1       	in	r24, 0x06	; 6
}
 66e:	83 fb       	bst	r24, 3
 670:	88 27       	eor	r24, r24
 672:	80 f9       	bld	r24, 0
 674:	08 95       	ret

00000676 <get_SENSORE>:
bool get_SENSORE()
{	
	return PIN(SENSORS_PORT)&(SENSORE);
 676:	86 b1       	in	r24, 0x06	; 6
	}
 678:	82 95       	swap	r24
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	08 95       	ret

0000067e <get_sensor_location>:
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
	PORT(SENSORS_PORT) |= SENSORS_PIN;
}

int8_t get_sensor_location()
{
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
	int8_t pos = 0;
	uint8_t i = 0;
	if(get_SENSORA())
 682:	0e 94 2a 03 	call	0x654	; 0x654 <get_SENSORA>
 686:	88 23       	and	r24, r24
 688:	19 f0       	breq	.+6      	; 0x690 <get_sensor_location+0x12>
	{	
		pos-=100;
		i++;
 68a:	c1 e0       	ldi	r28, 0x01	; 1
{
	int8_t pos = 0;
	uint8_t i = 0;
	if(get_SENSORA())
	{	
		pos-=100;
 68c:	dc e9       	ldi	r29, 0x9C	; 156
 68e:	02 c0       	rjmp	.+4      	; 0x694 <get_sensor_location+0x16>
}

int8_t get_sensor_location()
{
	int8_t pos = 0;
	uint8_t i = 0;
 690:	c0 e0       	ldi	r28, 0x00	; 0
	PORT(SENSORS_PORT) |= SENSORS_PIN;
}

int8_t get_sensor_location()
{
	int8_t pos = 0;
 692:	d0 e0       	ldi	r29, 0x00	; 0
	if(get_SENSORA())
	{	
		pos-=100;
		i++;
	}
	if(get_SENSORB())
 694:	0e 94 2d 03 	call	0x65a	; 0x65a <get_SENSORB>
 698:	88 23       	and	r24, r24
 69a:	11 f0       	breq	.+4      	; 0x6a0 <get_sensor_location+0x22>
	{
		pos-=30;
 69c:	de 51       	subi	r29, 0x1E	; 30
		i++;
 69e:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORC())
 6a0:	0e 94 31 03 	call	0x662	; 0x662 <get_SENSORC>
 6a4:	81 11       	cpse	r24, r1
	{	pos+=0;
		i++;
 6a6:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORD())
 6a8:	0e 94 36 03 	call	0x66c	; 0x66c <get_SENSORD>
 6ac:	88 23       	and	r24, r24
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <get_sensor_location+0x36>
	{
		pos+=30;
 6b0:	d2 5e       	subi	r29, 0xE2	; 226
		i++;
 6b2:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if(get_SENSORE())
 6b4:	0e 94 3b 03 	call	0x676	; 0x676 <get_SENSORE>
 6b8:	88 23       	and	r24, r24
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <get_sensor_location+0x44>
	{
		pos+=100;
 6bc:	dc 59       	subi	r29, 0x9C	; 156
		i++;
 6be:	cf 5f       	subi	r28, 0xFF	; 255
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <get_sensor_location+0x50>
	}
	else if(all_white())
 6c2:	0e 94 24 03 	call	0x648	; 0x648 <all_white>
 6c6:	88 23       	and	r24, r24
 6c8:	11 f0       	breq	.+4      	; 0x6ce <get_sensor_location+0x50>
	{
		pos=-128;
		i=1;
 6ca:	c1 e0       	ldi	r28, 0x01	; 1
		pos+=100;
		i++;
	}
	else if(all_white())
	{
		pos=-128;
 6cc:	d0 e8       	ldi	r29, 0x80	; 128
		i=1;
	}
	return pos/i;
 6ce:	8d 2f       	mov	r24, r29
 6d0:	dd 0f       	add	r29, r29
 6d2:	99 0b       	sbc	r25, r25
 6d4:	6c 2f       	mov	r22, r28
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	0e 94 c8 06 	call	0xd90	; 0xd90 <__divmodhi4>
 6dc:	86 2f       	mov	r24, r22
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <__subsf3>:
 6e4:	50 58       	subi	r21, 0x80	; 128

000006e6 <__addsf3>:
 6e6:	bb 27       	eor	r27, r27
 6e8:	aa 27       	eor	r26, r26
 6ea:	0e 94 8a 03 	call	0x714	; 0x714 <__addsf3x>
 6ee:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_round>
 6f2:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscA>
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__addsf3+0x20>
 6f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_pscB>
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__addsf3+0x20>
 6fe:	39 f4       	brne	.+14     	; 0x70e <__addsf3+0x28>
 700:	9f 3f       	cpi	r25, 0xFF	; 255
 702:	19 f4       	brne	.+6      	; 0x70a <__addsf3+0x24>
 704:	26 f4       	brtc	.+8      	; 0x70e <__addsf3+0x28>
 706:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_nan>
 70a:	0e f4       	brtc	.+2      	; 0x70e <__addsf3+0x28>
 70c:	e0 95       	com	r30
 70e:	e7 fb       	bst	r30, 7
 710:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>

00000714 <__addsf3x>:
 714:	e9 2f       	mov	r30, r25
 716:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_split3>
 71a:	58 f3       	brcs	.-42     	; 0x6f2 <__addsf3+0xc>
 71c:	ba 17       	cp	r27, r26
 71e:	62 07       	cpc	r22, r18
 720:	73 07       	cpc	r23, r19
 722:	84 07       	cpc	r24, r20
 724:	95 07       	cpc	r25, r21
 726:	20 f0       	brcs	.+8      	; 0x730 <__addsf3x+0x1c>
 728:	79 f4       	brne	.+30     	; 0x748 <__addsf3x+0x34>
 72a:	a6 f5       	brtc	.+104    	; 0x794 <__addsf3x+0x80>
 72c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_zero>
 730:	0e f4       	brtc	.+2      	; 0x734 <__addsf3x+0x20>
 732:	e0 95       	com	r30
 734:	0b 2e       	mov	r0, r27
 736:	ba 2f       	mov	r27, r26
 738:	a0 2d       	mov	r26, r0
 73a:	0b 01       	movw	r0, r22
 73c:	b9 01       	movw	r22, r18
 73e:	90 01       	movw	r18, r0
 740:	0c 01       	movw	r0, r24
 742:	ca 01       	movw	r24, r20
 744:	a0 01       	movw	r20, r0
 746:	11 24       	eor	r1, r1
 748:	ff 27       	eor	r31, r31
 74a:	59 1b       	sub	r21, r25
 74c:	99 f0       	breq	.+38     	; 0x774 <__addsf3x+0x60>
 74e:	59 3f       	cpi	r21, 0xF9	; 249
 750:	50 f4       	brcc	.+20     	; 0x766 <__addsf3x+0x52>
 752:	50 3e       	cpi	r21, 0xE0	; 224
 754:	68 f1       	brcs	.+90     	; 0x7b0 <__addsf3x+0x9c>
 756:	1a 16       	cp	r1, r26
 758:	f0 40       	sbci	r31, 0x00	; 0
 75a:	a2 2f       	mov	r26, r18
 75c:	23 2f       	mov	r18, r19
 75e:	34 2f       	mov	r19, r20
 760:	44 27       	eor	r20, r20
 762:	58 5f       	subi	r21, 0xF8	; 248
 764:	f3 cf       	rjmp	.-26     	; 0x74c <__addsf3x+0x38>
 766:	46 95       	lsr	r20
 768:	37 95       	ror	r19
 76a:	27 95       	ror	r18
 76c:	a7 95       	ror	r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	53 95       	inc	r21
 772:	c9 f7       	brne	.-14     	; 0x766 <__addsf3x+0x52>
 774:	7e f4       	brtc	.+30     	; 0x794 <__addsf3x+0x80>
 776:	1f 16       	cp	r1, r31
 778:	ba 0b       	sbc	r27, r26
 77a:	62 0b       	sbc	r22, r18
 77c:	73 0b       	sbc	r23, r19
 77e:	84 0b       	sbc	r24, r20
 780:	ba f0       	brmi	.+46     	; 0x7b0 <__addsf3x+0x9c>
 782:	91 50       	subi	r25, 0x01	; 1
 784:	a1 f0       	breq	.+40     	; 0x7ae <__addsf3x+0x9a>
 786:	ff 0f       	add	r31, r31
 788:	bb 1f       	adc	r27, r27
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	c2 f7       	brpl	.-16     	; 0x782 <__addsf3x+0x6e>
 792:	0e c0       	rjmp	.+28     	; 0x7b0 <__addsf3x+0x9c>
 794:	ba 0f       	add	r27, r26
 796:	62 1f       	adc	r22, r18
 798:	73 1f       	adc	r23, r19
 79a:	84 1f       	adc	r24, r20
 79c:	48 f4       	brcc	.+18     	; 0x7b0 <__addsf3x+0x9c>
 79e:	87 95       	ror	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b7 95       	ror	r27
 7a6:	f7 95       	ror	r31
 7a8:	9e 3f       	cpi	r25, 0xFE	; 254
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <__addsf3x+0x9a>
 7ac:	b0 cf       	rjmp	.-160    	; 0x70e <__addsf3+0x28>
 7ae:	93 95       	inc	r25
 7b0:	88 0f       	add	r24, r24
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__addsf3x+0xa2>
 7b4:	99 27       	eor	r25, r25
 7b6:	ee 0f       	add	r30, r30
 7b8:	97 95       	ror	r25
 7ba:	87 95       	ror	r24
 7bc:	08 95       	ret

000007be <__divsf3>:
 7be:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3x>
 7c2:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_round>
 7c6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_pscB>
 7ca:	58 f0       	brcs	.+22     	; 0x7e2 <__divsf3+0x24>
 7cc:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscA>
 7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__divsf3+0x24>
 7d2:	29 f4       	brne	.+10     	; 0x7de <__divsf3+0x20>
 7d4:	5f 3f       	cpi	r21, 0xFF	; 255
 7d6:	29 f0       	breq	.+10     	; 0x7e2 <__divsf3+0x24>
 7d8:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>
 7dc:	51 11       	cpse	r21, r1
 7de:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_szero>
 7e2:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_nan>

000007e6 <__divsf3x>:
 7e6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_split3>
 7ea:	68 f3       	brcs	.-38     	; 0x7c6 <__divsf3+0x8>

000007ec <__divsf3_pse>:
 7ec:	99 23       	and	r25, r25
 7ee:	b1 f3       	breq	.-20     	; 0x7dc <__divsf3+0x1e>
 7f0:	55 23       	and	r21, r21
 7f2:	91 f3       	breq	.-28     	; 0x7d8 <__divsf3+0x1a>
 7f4:	95 1b       	sub	r25, r21
 7f6:	55 0b       	sbc	r21, r21
 7f8:	bb 27       	eor	r27, r27
 7fa:	aa 27       	eor	r26, r26
 7fc:	62 17       	cp	r22, r18
 7fe:	73 07       	cpc	r23, r19
 800:	84 07       	cpc	r24, r20
 802:	38 f0       	brcs	.+14     	; 0x812 <__divsf3_pse+0x26>
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	5f 4f       	sbci	r21, 0xFF	; 255
 808:	22 0f       	add	r18, r18
 80a:	33 1f       	adc	r19, r19
 80c:	44 1f       	adc	r20, r20
 80e:	aa 1f       	adc	r26, r26
 810:	a9 f3       	breq	.-22     	; 0x7fc <__divsf3_pse+0x10>
 812:	35 d0       	rcall	.+106    	; 0x87e <__divsf3_pse+0x92>
 814:	0e 2e       	mov	r0, r30
 816:	3a f0       	brmi	.+14     	; 0x826 <__divsf3_pse+0x3a>
 818:	e0 e8       	ldi	r30, 0x80	; 128
 81a:	32 d0       	rcall	.+100    	; 0x880 <__divsf3_pse+0x94>
 81c:	91 50       	subi	r25, 0x01	; 1
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	e6 95       	lsr	r30
 822:	00 1c       	adc	r0, r0
 824:	ca f7       	brpl	.-14     	; 0x818 <__divsf3_pse+0x2c>
 826:	2b d0       	rcall	.+86     	; 0x87e <__divsf3_pse+0x92>
 828:	fe 2f       	mov	r31, r30
 82a:	29 d0       	rcall	.+82     	; 0x87e <__divsf3_pse+0x92>
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	bb 1f       	adc	r27, r27
 834:	26 17       	cp	r18, r22
 836:	37 07       	cpc	r19, r23
 838:	48 07       	cpc	r20, r24
 83a:	ab 07       	cpc	r26, r27
 83c:	b0 e8       	ldi	r27, 0x80	; 128
 83e:	09 f0       	breq	.+2      	; 0x842 <__divsf3_pse+0x56>
 840:	bb 0b       	sbc	r27, r27
 842:	80 2d       	mov	r24, r0
 844:	bf 01       	movw	r22, r30
 846:	ff 27       	eor	r31, r31
 848:	93 58       	subi	r25, 0x83	; 131
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	3a f0       	brmi	.+14     	; 0x85c <__divsf3_pse+0x70>
 84e:	9e 3f       	cpi	r25, 0xFE	; 254
 850:	51 05       	cpc	r21, r1
 852:	78 f0       	brcs	.+30     	; 0x872 <__divsf3_pse+0x86>
 854:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>
 858:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_szero>
 85c:	5f 3f       	cpi	r21, 0xFF	; 255
 85e:	e4 f3       	brlt	.-8      	; 0x858 <__divsf3_pse+0x6c>
 860:	98 3e       	cpi	r25, 0xE8	; 232
 862:	d4 f3       	brlt	.-12     	; 0x858 <__divsf3_pse+0x6c>
 864:	86 95       	lsr	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f7 95       	ror	r31
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	c9 f7       	brne	.-14     	; 0x864 <__divsf3_pse+0x78>
 872:	88 0f       	add	r24, r24
 874:	91 1d       	adc	r25, r1
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret
 87e:	e1 e0       	ldi	r30, 0x01	; 1
 880:	66 0f       	add	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	bb 1f       	adc	r27, r27
 888:	62 17       	cp	r22, r18
 88a:	73 07       	cpc	r23, r19
 88c:	84 07       	cpc	r24, r20
 88e:	ba 07       	cpc	r27, r26
 890:	20 f0       	brcs	.+8      	; 0x89a <__divsf3_pse+0xae>
 892:	62 1b       	sub	r22, r18
 894:	73 0b       	sbc	r23, r19
 896:	84 0b       	sbc	r24, r20
 898:	ba 0b       	sbc	r27, r26
 89a:	ee 1f       	adc	r30, r30
 89c:	88 f7       	brcc	.-30     	; 0x880 <__divsf3_pse+0x94>
 89e:	e0 95       	com	r30
 8a0:	08 95       	ret

000008a2 <__fixsfsi>:
 8a2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 8a6:	68 94       	set
 8a8:	b1 11       	cpse	r27, r1
 8aa:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_szero>
 8ae:	08 95       	ret

000008b0 <__fixunssfsi>:
 8b0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fp_splitA>
 8b4:	88 f0       	brcs	.+34     	; 0x8d8 <__fixunssfsi+0x28>
 8b6:	9f 57       	subi	r25, 0x7F	; 127
 8b8:	98 f0       	brcs	.+38     	; 0x8e0 <__fixunssfsi+0x30>
 8ba:	b9 2f       	mov	r27, r25
 8bc:	99 27       	eor	r25, r25
 8be:	b7 51       	subi	r27, 0x17	; 23
 8c0:	b0 f0       	brcs	.+44     	; 0x8ee <__fixunssfsi+0x3e>
 8c2:	e1 f0       	breq	.+56     	; 0x8fc <__fixunssfsi+0x4c>
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	1a f0       	brmi	.+6      	; 0x8d4 <__fixunssfsi+0x24>
 8ce:	ba 95       	dec	r27
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__fixunssfsi+0x14>
 8d2:	14 c0       	rjmp	.+40     	; 0x8fc <__fixunssfsi+0x4c>
 8d4:	b1 30       	cpi	r27, 0x01	; 1
 8d6:	91 f0       	breq	.+36     	; 0x8fc <__fixunssfsi+0x4c>
 8d8:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_zero>
 8dc:	b1 e0       	ldi	r27, 0x01	; 1
 8de:	08 95       	ret
 8e0:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_zero>
 8e4:	67 2f       	mov	r22, r23
 8e6:	78 2f       	mov	r23, r24
 8e8:	88 27       	eor	r24, r24
 8ea:	b8 5f       	subi	r27, 0xF8	; 248
 8ec:	39 f0       	breq	.+14     	; 0x8fc <__fixunssfsi+0x4c>
 8ee:	b9 3f       	cpi	r27, 0xF9	; 249
 8f0:	cc f3       	brlt	.-14     	; 0x8e4 <__fixunssfsi+0x34>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b3 95       	inc	r27
 8fa:	d9 f7       	brne	.-10     	; 0x8f2 <__fixunssfsi+0x42>
 8fc:	3e f4       	brtc	.+14     	; 0x90c <__stack+0xd>
 8fe:	90 95       	com	r25
 900:	80 95       	com	r24
 902:	70 95       	com	r23
 904:	61 95       	neg	r22
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	08 95       	ret

0000090e <__floatunsisf>:
 90e:	e8 94       	clt
 910:	09 c0       	rjmp	.+18     	; 0x924 <__floatsisf+0x12>

00000912 <__floatsisf>:
 912:	97 fb       	bst	r25, 7
 914:	3e f4       	brtc	.+14     	; 0x924 <__floatsisf+0x12>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	99 23       	and	r25, r25
 926:	a9 f0       	breq	.+42     	; 0x952 <__floatsisf+0x40>
 928:	f9 2f       	mov	r31, r25
 92a:	96 e9       	ldi	r25, 0x96	; 150
 92c:	bb 27       	eor	r27, r27
 92e:	93 95       	inc	r25
 930:	f6 95       	lsr	r31
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f1 11       	cpse	r31, r1
 93c:	f8 cf       	rjmp	.-16     	; 0x92e <__floatsisf+0x1c>
 93e:	fa f4       	brpl	.+62     	; 0x97e <__floatsisf+0x6c>
 940:	bb 0f       	add	r27, r27
 942:	11 f4       	brne	.+4      	; 0x948 <__floatsisf+0x36>
 944:	60 ff       	sbrs	r22, 0
 946:	1b c0       	rjmp	.+54     	; 0x97e <__floatsisf+0x6c>
 948:	6f 5f       	subi	r22, 0xFF	; 255
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	16 c0       	rjmp	.+44     	; 0x97e <__floatsisf+0x6c>
 952:	88 23       	and	r24, r24
 954:	11 f0       	breq	.+4      	; 0x95a <__floatsisf+0x48>
 956:	96 e9       	ldi	r25, 0x96	; 150
 958:	11 c0       	rjmp	.+34     	; 0x97c <__floatsisf+0x6a>
 95a:	77 23       	and	r23, r23
 95c:	21 f0       	breq	.+8      	; 0x966 <__floatsisf+0x54>
 95e:	9e e8       	ldi	r25, 0x8E	; 142
 960:	87 2f       	mov	r24, r23
 962:	76 2f       	mov	r23, r22
 964:	05 c0       	rjmp	.+10     	; 0x970 <__floatsisf+0x5e>
 966:	66 23       	and	r22, r22
 968:	71 f0       	breq	.+28     	; 0x986 <__floatsisf+0x74>
 96a:	96 e8       	ldi	r25, 0x86	; 134
 96c:	86 2f       	mov	r24, r22
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	2a f0       	brmi	.+10     	; 0x97e <__floatsisf+0x6c>
 974:	9a 95       	dec	r25
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	da f7       	brpl	.-10     	; 0x974 <__floatsisf+0x62>
 97e:	88 0f       	add	r24, r24
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret

00000988 <__fp_inf>:
 988:	97 f9       	bld	r25, 7
 98a:	9f 67       	ori	r25, 0x7F	; 127
 98c:	80 e8       	ldi	r24, 0x80	; 128
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	08 95       	ret

00000994 <__fp_nan>:
 994:	9f ef       	ldi	r25, 0xFF	; 255
 996:	80 ec       	ldi	r24, 0xC0	; 192
 998:	08 95       	ret

0000099a <__fp_pscA>:
 99a:	00 24       	eor	r0, r0
 99c:	0a 94       	dec	r0
 99e:	16 16       	cp	r1, r22
 9a0:	17 06       	cpc	r1, r23
 9a2:	18 06       	cpc	r1, r24
 9a4:	09 06       	cpc	r0, r25
 9a6:	08 95       	ret

000009a8 <__fp_pscB>:
 9a8:	00 24       	eor	r0, r0
 9aa:	0a 94       	dec	r0
 9ac:	12 16       	cp	r1, r18
 9ae:	13 06       	cpc	r1, r19
 9b0:	14 06       	cpc	r1, r20
 9b2:	05 06       	cpc	r0, r21
 9b4:	08 95       	ret

000009b6 <__fp_round>:
 9b6:	09 2e       	mov	r0, r25
 9b8:	03 94       	inc	r0
 9ba:	00 0c       	add	r0, r0
 9bc:	11 f4       	brne	.+4      	; 0x9c2 <__fp_round+0xc>
 9be:	88 23       	and	r24, r24
 9c0:	52 f0       	brmi	.+20     	; 0x9d6 <__fp_round+0x20>
 9c2:	bb 0f       	add	r27, r27
 9c4:	40 f4       	brcc	.+16     	; 0x9d6 <__fp_round+0x20>
 9c6:	bf 2b       	or	r27, r31
 9c8:	11 f4       	brne	.+4      	; 0x9ce <__fp_round+0x18>
 9ca:	60 ff       	sbrs	r22, 0
 9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <__fp_round+0x20>
 9ce:	6f 5f       	subi	r22, 0xFF	; 255
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	08 95       	ret

000009d8 <__fp_split3>:
 9d8:	57 fd       	sbrc	r21, 7
 9da:	90 58       	subi	r25, 0x80	; 128
 9dc:	44 0f       	add	r20, r20
 9de:	55 1f       	adc	r21, r21
 9e0:	59 f0       	breq	.+22     	; 0x9f8 <__fp_splitA+0x10>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	71 f0       	breq	.+28     	; 0xa02 <__fp_splitA+0x1a>
 9e6:	47 95       	ror	r20

000009e8 <__fp_splitA>:
 9e8:	88 0f       	add	r24, r24
 9ea:	97 fb       	bst	r25, 7
 9ec:	99 1f       	adc	r25, r25
 9ee:	61 f0       	breq	.+24     	; 0xa08 <__fp_splitA+0x20>
 9f0:	9f 3f       	cpi	r25, 0xFF	; 255
 9f2:	79 f0       	breq	.+30     	; 0xa12 <__fp_splitA+0x2a>
 9f4:	87 95       	ror	r24
 9f6:	08 95       	ret
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	14 06       	cpc	r1, r20
 9fe:	55 1f       	adc	r21, r21
 a00:	f2 cf       	rjmp	.-28     	; 0x9e6 <__fp_split3+0xe>
 a02:	46 95       	lsr	r20
 a04:	f1 df       	rcall	.-30     	; 0x9e8 <__fp_splitA>
 a06:	08 c0       	rjmp	.+16     	; 0xa18 <__fp_splitA+0x30>
 a08:	16 16       	cp	r1, r22
 a0a:	17 06       	cpc	r1, r23
 a0c:	18 06       	cpc	r1, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	f1 cf       	rjmp	.-30     	; 0x9f4 <__fp_splitA+0xc>
 a12:	86 95       	lsr	r24
 a14:	71 05       	cpc	r23, r1
 a16:	61 05       	cpc	r22, r1
 a18:	08 94       	sec
 a1a:	08 95       	ret

00000a1c <__fp_zero>:
 a1c:	e8 94       	clt

00000a1e <__fp_szero>:
 a1e:	bb 27       	eor	r27, r27
 a20:	66 27       	eor	r22, r22
 a22:	77 27       	eor	r23, r23
 a24:	cb 01       	movw	r24, r22
 a26:	97 f9       	bld	r25, 7
 a28:	08 95       	ret

00000a2a <__mulsf3>:
 a2a:	0e 94 28 05 	call	0xa50	; 0xa50 <__mulsf3x>
 a2e:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_round>
 a32:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscA>
 a36:	38 f0       	brcs	.+14     	; 0xa46 <__mulsf3+0x1c>
 a38:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_pscB>
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__mulsf3+0x1c>
 a3e:	95 23       	and	r25, r21
 a40:	11 f0       	breq	.+4      	; 0xa46 <__mulsf3+0x1c>
 a42:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>
 a46:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_nan>
 a4a:	11 24       	eor	r1, r1
 a4c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_szero>

00000a50 <__mulsf3x>:
 a50:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_split3>
 a54:	70 f3       	brcs	.-36     	; 0xa32 <__mulsf3+0x8>

00000a56 <__mulsf3_pse>:
 a56:	95 9f       	mul	r25, r21
 a58:	c1 f3       	breq	.-16     	; 0xa4a <__mulsf3+0x20>
 a5a:	95 0f       	add	r25, r21
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	55 1f       	adc	r21, r21
 a60:	62 9f       	mul	r22, r18
 a62:	f0 01       	movw	r30, r0
 a64:	72 9f       	mul	r23, r18
 a66:	bb 27       	eor	r27, r27
 a68:	f0 0d       	add	r31, r0
 a6a:	b1 1d       	adc	r27, r1
 a6c:	63 9f       	mul	r22, r19
 a6e:	aa 27       	eor	r26, r26
 a70:	f0 0d       	add	r31, r0
 a72:	b1 1d       	adc	r27, r1
 a74:	aa 1f       	adc	r26, r26
 a76:	64 9f       	mul	r22, r20
 a78:	66 27       	eor	r22, r22
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	66 1f       	adc	r22, r22
 a80:	82 9f       	mul	r24, r18
 a82:	22 27       	eor	r18, r18
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	62 1f       	adc	r22, r18
 a8a:	73 9f       	mul	r23, r19
 a8c:	b0 0d       	add	r27, r0
 a8e:	a1 1d       	adc	r26, r1
 a90:	62 1f       	adc	r22, r18
 a92:	83 9f       	mul	r24, r19
 a94:	a0 0d       	add	r26, r0
 a96:	61 1d       	adc	r22, r1
 a98:	22 1f       	adc	r18, r18
 a9a:	74 9f       	mul	r23, r20
 a9c:	33 27       	eor	r19, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	23 1f       	adc	r18, r19
 aa4:	84 9f       	mul	r24, r20
 aa6:	60 0d       	add	r22, r0
 aa8:	21 1d       	adc	r18, r1
 aaa:	82 2f       	mov	r24, r18
 aac:	76 2f       	mov	r23, r22
 aae:	6a 2f       	mov	r22, r26
 ab0:	11 24       	eor	r1, r1
 ab2:	9f 57       	subi	r25, 0x7F	; 127
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	9a f0       	brmi	.+38     	; 0xade <__mulsf3_pse+0x88>
 ab8:	f1 f0       	breq	.+60     	; 0xaf6 <__mulsf3_pse+0xa0>
 aba:	88 23       	and	r24, r24
 abc:	4a f0       	brmi	.+18     	; 0xad0 <__mulsf3_pse+0x7a>
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	91 50       	subi	r25, 0x01	; 1
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	a9 f7       	brne	.-22     	; 0xaba <__mulsf3_pse+0x64>
 ad0:	9e 3f       	cpi	r25, 0xFE	; 254
 ad2:	51 05       	cpc	r21, r1
 ad4:	80 f0       	brcs	.+32     	; 0xaf6 <__mulsf3_pse+0xa0>
 ad6:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_inf>
 ada:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_szero>
 ade:	5f 3f       	cpi	r21, 0xFF	; 255
 ae0:	e4 f3       	brlt	.-8      	; 0xada <__mulsf3_pse+0x84>
 ae2:	98 3e       	cpi	r25, 0xE8	; 232
 ae4:	d4 f3       	brlt	.-12     	; 0xada <__mulsf3_pse+0x84>
 ae6:	86 95       	lsr	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	b7 95       	ror	r27
 aee:	f7 95       	ror	r31
 af0:	e7 95       	ror	r30
 af2:	9f 5f       	subi	r25, 0xFF	; 255
 af4:	c1 f7       	brne	.-16     	; 0xae6 <__mulsf3_pse+0x90>
 af6:	fe 2b       	or	r31, r30
 af8:	88 0f       	add	r24, r24
 afa:	91 1d       	adc	r25, r1
 afc:	96 95       	lsr	r25
 afe:	87 95       	ror	r24
 b00:	97 f9       	bld	r25, 7
 b02:	08 95       	ret

00000b04 <delay_us.constprop.0>:
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	6f 93       	push	r22
 b0a:	64 e0       	ldi	r22, 0x04	; 4
 b0c:	6a 95       	dec	r22
 b0e:	f1 f7       	brne	.-4      	; 0xb0c <delay_us.constprop.0+0x8>
 b10:	6f 91       	pop	r22
 b12:	01 97       	sbiw	r24, 0x01	; 1
 b14:	c9 f7       	brne	.-14     	; 0xb08 <delay_us.constprop.0+0x4>
 b16:	08 95       	ret

00000b18 <_ZN12OrangutanLCD8busyWaitEv>:
 b18:	0f 93       	push	r16
 b1a:	1f 93       	push	r17
 b1c:	cf 93       	push	r28
 b1e:	df 93       	push	r29
 b20:	1a b1       	in	r17, 0x0a	; 10
 b22:	57 98       	cbi	0x0a, 7	; 10
 b24:	5a 98       	cbi	0x0b, 2	; 11
 b26:	28 9a       	sbi	0x05, 0	; 5
 b28:	c0 e0       	ldi	r28, 0x00	; 0
 b2a:	d0 e0       	ldi	r29, 0x00	; 0
 b2c:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
 b30:	5c 9a       	sbi	0x0b, 4	; 11
 b32:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
 b36:	09 b1       	in	r16, 0x09	; 9
 b38:	5c 98       	cbi	0x0b, 4	; 11
 b3a:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
 b3e:	5c 9a       	sbi	0x0b, 4	; 11
 b40:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
 b44:	5c 98       	cbi	0x0b, 4	; 11
 b46:	24 96       	adiw	r28, 0x04	; 4
 b48:	07 ff       	sbrs	r16, 7
 b4a:	10 c0       	rjmp	.+32     	; 0xb6c <_ZN12OrangutanLCD8busyWaitEv+0x54>
 b4c:	ae 01       	movw	r20, r28
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	80 91 0e 01 	lds	r24, 0x010E
 b56:	90 91 0f 01 	lds	r25, 0x010F
 b5a:	a0 91 10 01 	lds	r26, 0x0110
 b5e:	b0 91 11 01 	lds	r27, 0x0111
 b62:	48 17       	cp	r20, r24
 b64:	59 07       	cpc	r21, r25
 b66:	6a 07       	cpc	r22, r26
 b68:	7b 07       	cpc	r23, r27
 b6a:	00 f3       	brcs	.-64     	; 0xb2c <_ZN12OrangutanLCD8busyWaitEv+0x14>
 b6c:	1a b9       	out	0x0a, r17	; 10
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	08 95       	ret

00000b78 <_ZN12OrangutanLCD8sendDataEh>:
 b78:	95 b1       	in	r25, 0x05	; 5
 b7a:	28 2f       	mov	r18, r24
 b7c:	21 70       	andi	r18, 0x01	; 1
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	22 0f       	add	r18, r18
 b82:	33 1f       	adc	r19, r19
 b84:	48 2f       	mov	r20, r24
 b86:	46 70       	andi	r20, 0x06	; 6
 b88:	68 e0       	ldi	r22, 0x08	; 8
 b8a:	46 9f       	mul	r20, r22
 b8c:	a0 01       	movw	r20, r0
 b8e:	11 24       	eor	r1, r1
 b90:	24 2b       	or	r18, r20
 b92:	9d 7c       	andi	r25, 0xCD	; 205
 b94:	29 2b       	or	r18, r25
 b96:	25 b9       	out	0x05, r18	; 5
 b98:	9b b1       	in	r25, 0x0b	; 11
 b9a:	88 70       	andi	r24, 0x08	; 8
 b9c:	82 95       	swap	r24
 b9e:	80 7f       	andi	r24, 0xF0	; 240
 ba0:	9f 77       	andi	r25, 0x7F	; 127
 ba2:	89 2b       	or	r24, r25
 ba4:	8b b9       	out	0x0b, r24	; 11
 ba6:	5c 9a       	sbi	0x0b, 4	; 11
 ba8:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
 bac:	5c 98       	cbi	0x0b, 4	; 11
 bae:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
 bb2:	08 95       	ret

00000bb4 <_ZN12OrangutanLCD4sendEhhh>:
 bb4:	a0 e0       	ldi	r26, 0x00	; 0
 bb6:	b0 e0       	ldi	r27, 0x00	; 0
 bb8:	e0 ee       	ldi	r30, 0xE0	; 224
 bba:	f5 e0       	ldi	r31, 0x05	; 5
 bbc:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__prologue_saves__+0x16>
 bc0:	c8 2f       	mov	r28, r24
 bc2:	d6 2e       	mov	r13, r22
 bc4:	e4 2e       	mov	r14, r20
 bc6:	80 91 39 01 	lds	r24, 0x0139
 bca:	81 11       	cpse	r24, r1
 bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <_ZN12OrangutanLCD4sendEhhh+0x24>
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	80 93 39 01 	sts	0x0139, r24
 bd4:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN12OrangutanLCD5init2Ev>
 bd8:	0e 94 8c 05 	call	0xb18	; 0xb18 <_ZN12OrangutanLCD8busyWaitEv>
 bdc:	14 b1       	in	r17, 0x04	; 4
 bde:	d5 b1       	in	r29, 0x05	; 5
 be0:	fa b0       	in	r15, 0x0a	; 10
 be2:	0b b1       	in	r16, 0x0b	; 11
 be4:	28 98       	cbi	0x05, 0	; 5
 be6:	dd 20       	and	r13, r13
 be8:	11 f0       	breq	.+4      	; 0xbee <_ZN12OrangutanLCD4sendEhhh+0x3a>
 bea:	5a 9a       	sbi	0x0b, 2	; 11
 bec:	01 c0       	rjmp	.+2      	; 0xbf0 <_ZN12OrangutanLCD4sendEhhh+0x3c>
 bee:	5a 98       	cbi	0x0b, 2	; 11
 bf0:	94 b1       	in	r25, 0x04	; 4
 bf2:	92 63       	ori	r25, 0x32	; 50
 bf4:	94 b9       	out	0x04, r25	; 4
 bf6:	57 9a       	sbi	0x0a, 7	; 10
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	e8 16       	cp	r14, r24
 bfc:	29 f0       	breq	.+10     	; 0xc08 <_ZN12OrangutanLCD4sendEhhh+0x54>
 bfe:	8c 2f       	mov	r24, r28
 c00:	82 95       	swap	r24
 c02:	8f 70       	andi	r24, 0x0F	; 15
 c04:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD8sendDataEh>
 c08:	8c 2f       	mov	r24, r28
 c0a:	8f 70       	andi	r24, 0x0F	; 15
 c0c:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD8sendDataEh>
 c10:	fa b8       	out	0x0a, r15	; 10
 c12:	0b b9       	out	0x0b, r16	; 11
 c14:	14 b9       	out	0x04, r17	; 4
 c16:	d5 b9       	out	0x05, r29	; 5
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	e7 e0       	ldi	r30, 0x07	; 7
 c1e:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__epilogue_restores__+0x16>

00000c22 <_ZN12OrangutanLCD8send_cmdEh>:
 c22:	42 e0       	ldi	r20, 0x02	; 2
 c24:	60 e0       	ldi	r22, 0x00	; 0
 c26:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN12OrangutanLCD4sendEhhh>
 c2a:	08 95       	ret

00000c2c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
 c2c:	41 e0       	ldi	r20, 0x01	; 1
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN12OrangutanLCD4sendEhhh>
 c34:	08 95       	ret

00000c36 <_ZN12OrangutanLCD5init2Ev>:
 c36:	80 e1       	ldi	r24, 0x10	; 16
 c38:	97 e2       	ldi	r25, 0x27	; 39
 c3a:	a0 e0       	ldi	r26, 0x00	; 0
 c3c:	b0 e0       	ldi	r27, 0x00	; 0
 c3e:	80 93 0e 01 	sts	0x010E, r24
 c42:	90 93 0f 01 	sts	0x010F, r25
 c46:	a0 93 10 01 	sts	0x0110, r26
 c4a:	b0 93 11 01 	sts	0x0111, r27
 c4e:	52 9a       	sbi	0x0a, 2	; 10
 c50:	20 9a       	sbi	0x04, 0	; 4
 c52:	54 9a       	sbi	0x0a, 4	; 10
 c54:	8e e1       	ldi	r24, 0x1E	; 30
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	0e 94 c5 06 	call	0xd8a	; 0xd8a <delay_ms>
 c5c:	83 e0       	ldi	r24, 0x03	; 3
 c5e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 c62:	86 e0       	ldi	r24, 0x06	; 6
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 94 c5 06 	call	0xd8a	; 0xd8a <delay_ms>
 c6a:	83 e0       	ldi	r24, 0x03	; 3
 c6c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 c70:	82 e0       	ldi	r24, 0x02	; 2
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 c5 06 	call	0xd8a	; 0xd8a <delay_ms>
 c78:	83 e0       	ldi	r24, 0x03	; 3
 c7a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 c7e:	82 e0       	ldi	r24, 0x02	; 2
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	0e 94 c5 06 	call	0xd8a	; 0xd8a <delay_ms>
 c86:	82 e0       	ldi	r24, 0x02	; 2
 c88:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 c8c:	82 e0       	ldi	r24, 0x02	; 2
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	0e 94 c5 06 	call	0xd8a	; 0xd8a <delay_ms>
 c94:	88 e2       	ldi	r24, 0x28	; 40
 c96:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
 c9a:	88 e0       	ldi	r24, 0x08	; 8
 c9c:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
 ca0:	81 e0       	ldi	r24, 0x01	; 1
 ca2:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
 ca6:	86 e0       	ldi	r24, 0x06	; 6
 ca8:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
 cac:	8c e0       	ldi	r24, 0x0C	; 12
 cae:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
 cb2:	08 95       	ret

00000cb4 <_ZN12OrangutanLCD6gotoXYEhh>:
 cb4:	a5 e0       	ldi	r26, 0x05	; 5
 cb6:	b0 e0       	ldi	r27, 0x00	; 0
 cb8:	e0 e6       	ldi	r30, 0x60	; 96
 cba:	f6 e0       	ldi	r31, 0x06	; 6
 cbc:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__prologue_saves__+0x1e>
 cc0:	18 2f       	mov	r17, r24
 cc2:	80 e8       	ldi	r24, 0x80	; 128
 cc4:	89 83       	std	Y+1, r24	; 0x01
 cc6:	80 ec       	ldi	r24, 0xC0	; 192
 cc8:	8a 83       	std	Y+2, r24	; 0x02
 cca:	84 e9       	ldi	r24, 0x94	; 148
 ccc:	8b 83       	std	Y+3, r24	; 0x03
 cce:	84 ed       	ldi	r24, 0xD4	; 212
 cd0:	8c 83       	std	Y+4, r24	; 0x04
 cd2:	fe 01       	movw	r30, r28
 cd4:	e6 0f       	add	r30, r22
 cd6:	f1 1d       	adc	r31, r1
 cd8:	81 81       	ldd	r24, Z+1	; 0x01
 cda:	81 0f       	add	r24, r17
 cdc:	6d 83       	std	Y+5, r22	; 0x05
 cde:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
 ce2:	10 93 12 01 	sts	0x0112, r17
 ce6:	6d 81       	ldd	r22, Y+5	; 0x05
 ce8:	60 93 13 01 	sts	0x0113, r22
 cec:	25 96       	adiw	r28, 0x05	; 5
 cee:	e3 e0       	ldi	r30, 0x03	; 3
 cf0:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__epilogue_restores__+0x1e>

00000cf4 <lcd_goto_xy>:
 cf4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN12OrangutanLCD6gotoXYEhh>
 cf8:	08 95       	ret

00000cfa <__vector_9>:
 cfa:	2f 92       	push	r2
 cfc:	8f 93       	push	r24
 cfe:	9f 93       	push	r25
 d00:	2f b6       	in	r2, 0x3f	; 63
 d02:	80 91 1d 01 	lds	r24, 0x011D
 d06:	90 91 1e 01 	lds	r25, 0x011E
 d0a:	01 96       	adiw	r24, 0x01	; 1
 d0c:	80 93 1d 01 	sts	0x011D, r24
 d10:	90 93 1e 01 	sts	0x011E, r25
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	80 91 1f 01 	lds	r24, 0x011F
 d1a:	89 1f       	adc	r24, r25
 d1c:	80 93 1f 01 	sts	0x011F, r24
 d20:	90 91 17 01 	lds	r25, 0x0117
 d24:	9c 5f       	subi	r25, 0xFC	; 252
 d26:	90 93 17 01 	sts	0x0117, r25
 d2a:	80 91 16 01 	lds	r24, 0x0116
 d2e:	80 51       	subi	r24, 0x10	; 16
 d30:	97 42       	sbci	r25, 0x27	; 39
 d32:	c0 f0       	brcs	.+48     	; 0xd64 <end>
 d34:	90 93 17 01 	sts	0x0117, r25
 d38:	80 93 16 01 	sts	0x0116, r24
 d3c:	80 91 18 01 	lds	r24, 0x0118
 d40:	90 91 19 01 	lds	r25, 0x0119
 d44:	01 96       	adiw	r24, 0x01	; 1
 d46:	80 93 18 01 	sts	0x0118, r24
 d4a:	90 93 19 01 	sts	0x0119, r25
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	80 91 1a 01 	lds	r24, 0x011A
 d54:	89 1f       	adc	r24, r25
 d56:	80 93 1a 01 	sts	0x011A, r24
 d5a:	80 91 1b 01 	lds	r24, 0x011B
 d5e:	89 1f       	adc	r24, r25
 d60:	80 93 1b 01 	sts	0x011B, r24

00000d64 <end>:
 d64:	2f be       	out	0x3f, r2	; 63
 d66:	9f 91       	pop	r25
 d68:	8f 91       	pop	r24
 d6a:	2f 90       	pop	r2
 d6c:	18 95       	reti

00000d6e <_ZN13OrangutanTime17delayMillisecondsEj>:
 d6e:	28 ee       	ldi	r18, 0xE8	; 232
 d70:	33 e0       	ldi	r19, 0x03	; 3
 d72:	01 97       	sbiw	r24, 0x01	; 1
 d74:	48 f0       	brcs	.+18     	; 0xd88 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
 d76:	f9 01       	movw	r30, r18
 d78:	6f 93       	push	r22
 d7a:	64 e0       	ldi	r22, 0x04	; 4
 d7c:	6a 95       	dec	r22
 d7e:	f1 f7       	brne	.-4      	; 0xd7c <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
 d80:	6f 91       	pop	r22
 d82:	31 97       	sbiw	r30, 0x01	; 1
 d84:	c9 f7       	brne	.-14     	; 0xd78 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
 d86:	f5 cf       	rjmp	.-22     	; 0xd72 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
 d88:	08 95       	ret

00000d8a <delay_ms>:
 d8a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN13OrangutanTime17delayMillisecondsEj>
 d8e:	08 95       	ret

00000d90 <__divmodhi4>:
 d90:	97 fb       	bst	r25, 7
 d92:	07 2e       	mov	r0, r23
 d94:	16 f4       	brtc	.+4      	; 0xd9a <__divmodhi4+0xa>
 d96:	00 94       	com	r0
 d98:	07 d0       	rcall	.+14     	; 0xda8 <__divmodhi4_neg1>
 d9a:	77 fd       	sbrc	r23, 7
 d9c:	09 d0       	rcall	.+18     	; 0xdb0 <__divmodhi4_neg2>
 d9e:	0e 94 35 07 	call	0xe6a	; 0xe6a <__udivmodhi4>
 da2:	07 fc       	sbrc	r0, 7
 da4:	05 d0       	rcall	.+10     	; 0xdb0 <__divmodhi4_neg2>
 da6:	3e f4       	brtc	.+14     	; 0xdb6 <__divmodhi4_exit>

00000da8 <__divmodhi4_neg1>:
 da8:	90 95       	com	r25
 daa:	81 95       	neg	r24
 dac:	9f 4f       	sbci	r25, 0xFF	; 255
 dae:	08 95       	ret

00000db0 <__divmodhi4_neg2>:
 db0:	70 95       	com	r23
 db2:	61 95       	neg	r22
 db4:	7f 4f       	sbci	r23, 0xFF	; 255

00000db6 <__divmodhi4_exit>:
 db6:	08 95       	ret

00000db8 <__udivmodsi4>:
 db8:	a1 e2       	ldi	r26, 0x21	; 33
 dba:	1a 2e       	mov	r1, r26
 dbc:	aa 1b       	sub	r26, r26
 dbe:	bb 1b       	sub	r27, r27
 dc0:	fd 01       	movw	r30, r26
 dc2:	0d c0       	rjmp	.+26     	; 0xdde <__udivmodsi4_ep>

00000dc4 <__udivmodsi4_loop>:
 dc4:	aa 1f       	adc	r26, r26
 dc6:	bb 1f       	adc	r27, r27
 dc8:	ee 1f       	adc	r30, r30
 dca:	ff 1f       	adc	r31, r31
 dcc:	a2 17       	cp	r26, r18
 dce:	b3 07       	cpc	r27, r19
 dd0:	e4 07       	cpc	r30, r20
 dd2:	f5 07       	cpc	r31, r21
 dd4:	20 f0       	brcs	.+8      	; 0xdde <__udivmodsi4_ep>
 dd6:	a2 1b       	sub	r26, r18
 dd8:	b3 0b       	sbc	r27, r19
 dda:	e4 0b       	sbc	r30, r20
 ddc:	f5 0b       	sbc	r31, r21

00000dde <__udivmodsi4_ep>:
 dde:	66 1f       	adc	r22, r22
 de0:	77 1f       	adc	r23, r23
 de2:	88 1f       	adc	r24, r24
 de4:	99 1f       	adc	r25, r25
 de6:	1a 94       	dec	r1
 de8:	69 f7       	brne	.-38     	; 0xdc4 <__udivmodsi4_loop>
 dea:	60 95       	com	r22
 dec:	70 95       	com	r23
 dee:	80 95       	com	r24
 df0:	90 95       	com	r25
 df2:	9b 01       	movw	r18, r22
 df4:	ac 01       	movw	r20, r24
 df6:	bd 01       	movw	r22, r26
 df8:	cf 01       	movw	r24, r30
 dfa:	08 95       	ret

00000dfc <__prologue_saves__>:
 dfc:	2f 92       	push	r2
 dfe:	3f 92       	push	r3
 e00:	4f 92       	push	r4
 e02:	5f 92       	push	r5
 e04:	6f 92       	push	r6
 e06:	7f 92       	push	r7
 e08:	8f 92       	push	r8
 e0a:	9f 92       	push	r9
 e0c:	af 92       	push	r10
 e0e:	bf 92       	push	r11
 e10:	cf 92       	push	r12
 e12:	df 92       	push	r13
 e14:	ef 92       	push	r14
 e16:	ff 92       	push	r15
 e18:	0f 93       	push	r16
 e1a:	1f 93       	push	r17
 e1c:	cf 93       	push	r28
 e1e:	df 93       	push	r29
 e20:	cd b7       	in	r28, 0x3d	; 61
 e22:	de b7       	in	r29, 0x3e	; 62
 e24:	ca 1b       	sub	r28, r26
 e26:	db 0b       	sbc	r29, r27
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	de bf       	out	0x3e, r29	; 62
 e2e:	0f be       	out	0x3f, r0	; 63
 e30:	cd bf       	out	0x3d, r28	; 61
 e32:	09 94       	ijmp

00000e34 <__epilogue_restores__>:
 e34:	2a 88       	ldd	r2, Y+18	; 0x12
 e36:	39 88       	ldd	r3, Y+17	; 0x11
 e38:	48 88       	ldd	r4, Y+16	; 0x10
 e3a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e3c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e3e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e40:	8c 84       	ldd	r8, Y+12	; 0x0c
 e42:	9b 84       	ldd	r9, Y+11	; 0x0b
 e44:	aa 84       	ldd	r10, Y+10	; 0x0a
 e46:	b9 84       	ldd	r11, Y+9	; 0x09
 e48:	c8 84       	ldd	r12, Y+8	; 0x08
 e4a:	df 80       	ldd	r13, Y+7	; 0x07
 e4c:	ee 80       	ldd	r14, Y+6	; 0x06
 e4e:	fd 80       	ldd	r15, Y+5	; 0x05
 e50:	0c 81       	ldd	r16, Y+4	; 0x04
 e52:	1b 81       	ldd	r17, Y+3	; 0x03
 e54:	aa 81       	ldd	r26, Y+2	; 0x02
 e56:	b9 81       	ldd	r27, Y+1	; 0x01
 e58:	ce 0f       	add	r28, r30
 e5a:	d1 1d       	adc	r29, r1
 e5c:	0f b6       	in	r0, 0x3f	; 63
 e5e:	f8 94       	cli
 e60:	de bf       	out	0x3e, r29	; 62
 e62:	0f be       	out	0x3f, r0	; 63
 e64:	cd bf       	out	0x3d, r28	; 61
 e66:	ed 01       	movw	r28, r26
 e68:	08 95       	ret

00000e6a <__udivmodhi4>:
 e6a:	aa 1b       	sub	r26, r26
 e6c:	bb 1b       	sub	r27, r27
 e6e:	51 e1       	ldi	r21, 0x11	; 17
 e70:	07 c0       	rjmp	.+14     	; 0xe80 <__udivmodhi4_ep>

00000e72 <__udivmodhi4_loop>:
 e72:	aa 1f       	adc	r26, r26
 e74:	bb 1f       	adc	r27, r27
 e76:	a6 17       	cp	r26, r22
 e78:	b7 07       	cpc	r27, r23
 e7a:	10 f0       	brcs	.+4      	; 0xe80 <__udivmodhi4_ep>
 e7c:	a6 1b       	sub	r26, r22
 e7e:	b7 0b       	sbc	r27, r23

00000e80 <__udivmodhi4_ep>:
 e80:	88 1f       	adc	r24, r24
 e82:	99 1f       	adc	r25, r25
 e84:	5a 95       	dec	r21
 e86:	a9 f7       	brne	.-22     	; 0xe72 <__udivmodhi4_loop>
 e88:	80 95       	com	r24
 e8a:	90 95       	com	r25
 e8c:	bc 01       	movw	r22, r24
 e8e:	cd 01       	movw	r24, r26
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
