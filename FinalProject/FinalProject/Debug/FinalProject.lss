
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003c8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017cb  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000848  00000000  00000000  00001eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aee  00000000  00000000  00002737  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000047c  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079b  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bf  00000000  00000000  00003e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  000043fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 82 01 	call	0x304	; 0x304 <main>
  8e:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <configure_push_button_array>:
#include "button_driver.h"

void configure_push_button_array()
{
	DDR(BUTTON_PIN) &= ~(1<<BUTTONA_LOC);
  96:	21 98       	cbi	0x04, 1	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONB_LOC);
  98:	24 98       	cbi	0x04, 4	; 4
	DDR(BUTTON_PIN) &= ~(1<<BUTTONC_LOC);
  9a:	25 98       	cbi	0x04, 5	; 4
	PORT(BUTTON_PIN) |= (1<<BUTTONA_LOC);
  9c:	29 9a       	sbi	0x05, 1	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONB_LOC);
  9e:	2c 9a       	sbi	0x05, 4	; 5
	PORT(BUTTON_PIN) |= (1<<BUTTONC_LOC);
  a0:	2d 9a       	sbi	0x05, 5	; 5
  a2:	08 95       	ret

000000a4 <init_buzzer>:
 */

#include "main.h"

void init_buzzer(){
	DDR(BUZZER_PORT) |= (BUZZER_PIN);
  a4:	22 9a       	sbi	0x04, 2	; 4
	TIMER1_CLK |= ( (1<<0)	| (1<<4) | (1<<5) );
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 63       	ori	r24, 0x31	; 49
  ae:	80 83       	st	Z, r24
	TIMER2_CLK |= (1<<4);
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <playFrequency>:
}
void playFrequency(uint32_t freq, uint8_t dur)
{
  bc:	cf 93       	push	r28
  be:	c4 2f       	mov	r28, r20
	if (freq < 40) freq = 40;	
  c0:	68 32       	cpi	r22, 0x28	; 40
  c2:	71 05       	cpc	r23, r1
  c4:	81 05       	cpc	r24, r1
  c6:	91 05       	cpc	r25, r1
  c8:	20 f4       	brcc	.+8      	; 0xd2 <playFrequency+0x16>
  ca:	68 e2       	ldi	r22, 0x28	; 40
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9b 01       	movw	r18, r22
  d4:	ac 01       	movw	r20, r24
  d6:	21 31       	cpi	r18, 0x11	; 17
  d8:	87 e2       	ldi	r24, 0x27	; 39
  da:	38 07       	cpc	r19, r24
  dc:	41 05       	cpc	r20, r1
  de:	51 05       	cpc	r21, r1
  e0:	20 f0       	brcs	.+8      	; 0xea <playFrequency+0x2e>
  e2:	20 e1       	ldi	r18, 0x10	; 16
  e4:	37 e2       	ldi	r19, 0x27	; 39
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
	if (freq > 10000) freq = 10000;    
 
	uint32_t top = (F_CPU/freq);
  ea:	60 e4       	ldi	r22, 0x40	; 64
  ec:	72 e4       	ldi	r23, 0x42	; 66
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 c0 01 	call	0x380	; 0x380 <__udivmodsi4>
	TIMER2_CLK |= (1<<0);
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
	OCR1A = top;	
 100:	30 93 89 00 	sts	0x0089, r19
 104:	20 93 88 00 	sts	0x0088, r18
	OCR1B = (top>>2);
 108:	da 01       	movw	r26, r20
 10a:	c9 01       	movw	r24, r18
 10c:	b6 95       	lsr	r27
 10e:	a7 95       	ror	r26
 110:	97 95       	ror	r25
 112:	87 95       	ror	r24
 114:	b6 95       	lsr	r27
 116:	a7 95       	ror	r26
 118:	97 95       	ror	r25
 11a:	87 95       	ror	r24
 11c:	90 93 8b 00 	sts	0x008B, r25
 120:	80 93 8a 00 	sts	0x008A, r24
	
	uint8_t i;
	for (i=0;i<dur; i++){
 124:	cc 23       	and	r28, r28
 126:	69 f0       	breq	.+26     	; 0x142 <playFrequency+0x86>
 128:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	9f e9       	ldi	r25, 0x9F	; 159
 12c:	26 e8       	ldi	r18, 0x86	; 134
 12e:	31 e0       	ldi	r19, 0x01	; 1
 130:	91 50       	subi	r25, 0x01	; 1
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <playFrequency+0x74>
 138:	00 c0       	rjmp	.+0      	; 0x13a <playFrequency+0x7e>
 13a:	00 00       	nop
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	8c 13       	cpse	r24, r28
 140:	f4 cf       	rjmp	.-24     	; 0x12a <playFrequency+0x6e>
		
		_delay_ms(500);
	}
	TIMER2_CLK &= ~(1<<0);
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	80 83       	st	Z, r24
	//OCR2A = (freq>>1);                        // set timer 2 pwm frequency
	//OCR2B = freq; 

}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <set_DB_input>:
	DDR(E_PORT) |= (1<<E_LOC);
}

static void set_DB_input()
{
	DDR(DB0_PORT) &= ~(1<<DB0_LOC);
 150:	21 98       	cbi	0x04, 1	; 4
	DDR(DB1_PORT) &= ~(1<<DB1_LOC);
 152:	24 98       	cbi	0x04, 4	; 4
	DDR(DB2_PORT) &= ~(1<<DB2_LOC);
 154:	25 98       	cbi	0x04, 5	; 4
	DDR(DB3_PORT) &= ~(1<<DB3_LOC);
 156:	57 98       	cbi	0x0a, 7	; 10
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 158:	29 9a       	sbi	0x05, 1	; 5
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 15a:	2c 9a       	sbi	0x05, 4	; 5
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 15c:	2d 9a       	sbi	0x05, 5	; 5
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 15e:	5f 9a       	sbi	0x0b, 7	; 11
 160:	08 95       	ret

00000162 <set_DB_output>:
}

static void set_DB_output()
{
	DDR(DB0_PORT) |= (1<<DB0_LOC);
 162:	21 9a       	sbi	0x04, 1	; 4
	DDR(DB1_PORT) |= (1<<DB1_LOC);
 164:	24 9a       	sbi	0x04, 4	; 4
	DDR(DB2_PORT) |= (1<<DB2_LOC);
 166:	25 9a       	sbi	0x04, 5	; 4
	DDR(DB3_PORT) |= (1<<DB3_LOC);
 168:	57 9a       	sbi	0x0a, 7	; 10
 16a:	08 95       	ret

0000016c <pulse_E>:
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
}

static void set_E()
{
	PORT(E_PORT) |= (1<<E_LOC);
 16c:	5c 9a       	sbi	0x0b, 4	; 11
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <pulse_E+0x6>
 176:	00 c0       	rjmp	.+0      	; 0x178 <pulse_E+0xc>
 178:	00 00       	nop
}

static bool get_DB0()
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
 17a:	83 b1       	in	r24, 0x03	; 3
static uint8_t pulse_E()
{
	uint8_t num=0;
	set_E();
	_delay_ms(10);
	if(get_DB0()) num |= (1<<0);
 17c:	86 95       	lsr	r24
 17e:	81 70       	andi	r24, 0x01	; 1
	if(get_DB1()) num|= (1<<1);
 180:	1c 99       	sbic	0x03, 4	; 3
 182:	82 60       	ori	r24, 0x02	; 2
	if(get_DB2()) num |= (1<<2);
 184:	1d 99       	sbic	0x03, 5	; 3
 186:	84 60       	ori	r24, 0x04	; 4
	if(get_DB3()) num |= (1<<3);
 188:	4f 99       	sbic	0x09, 7	; 9
 18a:	88 60       	ori	r24, 0x08	; 8
	PORT(RW_PORT) &= ~(1<<RW_LOC);
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 18c:	5c 98       	cbi	0x0b, 4	; 11
	if(get_DB1()) num|= (1<<1);
	if(get_DB2()) num |= (1<<2);
	if(get_DB3()) num |= (1<<3);
	clear_E();
	return num;
}
 18e:	08 95       	ret

00000190 <nibble_out>:
	while(num&(BUSY_FLAG));

}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
 190:	80 ff       	sbrs	r24, 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <nibble_out+0x8>
{
	return PIN(DB0_PORT)&(1<<DB0_LOC);
}
static void set_DB0()
{
	PORT(DB0_PORT) |= (1<<DB0_LOC);
 194:	29 9a       	sbi	0x05, 1	; 5
 196:	01 c0       	rjmp	.+2      	; 0x19a <nibble_out+0xa>
	PORT(E_PORT) &= ~(1<<E_LOC);
}

static void clear_DB0()
{
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
 198:	29 98       	cbi	0x05, 1	; 5
}
static void nibble_out(uint8_t num)
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
 19a:	81 ff       	sbrs	r24, 1
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <nibble_out+0x12>
	PORT(DB0_PORT) |= (1<<DB0_LOC);
}

static void set_DB1()
{
	PORT(DB1_PORT) |= (1<<DB1_LOC);
 19e:	2c 9a       	sbi	0x05, 4	; 5
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <nibble_out+0x14>
	PORT(DB0_PORT) &= ~(1<<DB0_LOC);
}

static void clear_DB1()
{
	PORT(DB1_PORT) &= ~(1<<DB1_LOC);
 1a2:	2c 98       	cbi	0x05, 4	; 5
{
	if(num&(1<<0)) set_DB0();
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
 1a4:	82 ff       	sbrs	r24, 2
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <nibble_out+0x1c>
	PORT(DB1_PORT) |= (1<<DB1_LOC);
}

static void set_DB2()
{
	PORT(DB2_PORT) |= (1<<DB2_LOC);
 1a8:	2d 9a       	sbi	0x05, 5	; 5
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <nibble_out+0x1e>
	PORT(DB3_PORT) |= (1<<DB3_LOC);
}

static void clear_DB2()
{
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
 1ac:	2d 98       	cbi	0x05, 5	; 5
	else clear_DB0();
	if(num&(1<<1)) set_DB1();
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
 1ae:	83 ff       	sbrs	r24, 3
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <nibble_out+0x26>
	PORT(DB2_PORT) |= (1<<DB2_LOC);
}

static void set_DB3()
{
	PORT(DB3_PORT) |= (1<<DB3_LOC);
 1b2:	5f 9a       	sbi	0x0b, 7	; 11
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <nibble_out+0x28>
	PORT(DB2_PORT) &= ~(1<<DB2_LOC);
}

static void clear_DB3()
{
	PORT(DB3_PORT) &= ~(1<<DB3_LOC);
 1b6:	5f 98       	cbi	0x0b, 7	; 11
	else clear_DB1();
	if(num&(1<<2)) set_DB2();
	else clear_DB2();
	if(num&(1<<3)) set_DB3();
	else clear_DB3();
	pulse_E();
 1b8:	0e 94 b6 00 	call	0x16c	; 0x16c <pulse_E>
 1bc:	08 95       	ret

000001be <write_reg>:
}
static void write_reg(uint8_t num, uint8_t rs)
{
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
 1c6:	16 2f       	mov	r17, r22
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 1c8:	5a 98       	cbi	0x0b, 2	; 11
 1ca:	83 ec       	ldi	r24, 0xC3	; 195
 1cc:	99 e0       	ldi	r25, 0x09	; 9
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <write_reg+0x10>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <write_reg+0x16>
 1d4:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 1d6:	0e 94 a8 00 	call	0x150	; 0x150 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 1da:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1dc:	0e 94 b6 00 	call	0x16c	; 0x16c <pulse_E>
 1e0:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 1e2:	0e 94 b6 00 	call	0x16c	; 0x16c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 1e6:	c2 95       	swap	r28
 1e8:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 1ea:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 1ec:	6c f3       	brlt	.-38     	; 0x1c8 <write_reg+0xa>
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 1ee:	28 98       	cbi	0x05, 0	; 5
}
static void write_reg(uint8_t num, uint8_t rs)
{
	busywait();
	clear_RW();
	if(rs) set_RS();
 1f0:	11 23       	and	r17, r17
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <write_reg+0x3a>
	return PIN(DB3_PORT)&(1<<DB3_LOC);
}

static void set_RS()
{
	PORT(RS_PORT) |= (1<<RS_LOC);
 1f4:	5a 9a       	sbi	0x0b, 2	; 11
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <write_reg+0x3c>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 1f8:	5a 98       	cbi	0x0b, 2	; 11
{
	busywait();
	clear_RW();
	if(rs) set_RS();
	else clear_RS();
	set_DB_output();
 1fa:	0e 94 b1 00 	call	0x162	; 0x162 <set_DB_output>
	nibble_out(num>>4);
 1fe:	8d 2f       	mov	r24, r29
 200:	82 95       	swap	r24
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	0e 94 c8 00 	call	0x190	; 0x190 <nibble_out>
	nibble_out(num);
 208:	8d 2f       	mov	r24, r29
 20a:	0e 94 c8 00 	call	0x190	; 0x190 <nibble_out>
	set_DB_input();
 20e:	0e 94 a8 00 	call	0x150	; 0x150 <set_DB_input>
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	08 95       	ret

0000021a <lcd_initialize>:
static void nibble_out(uint8_t num);
static void write_reg(uint8_t num, uint8_t rs);


void lcd_initialize()
{
 21a:	cf 93       	push	r28
	PORT(RS_PORT) &= ~(1<<RS_LOC);
}

static void clear_RW()
{
	PORT(RW_PORT) &= ~(1<<RW_LOC);
 21c:	28 98       	cbi	0x05, 0	; 5
}

static void clear_E()
{
	PORT(E_PORT) &= ~(1<<E_LOC);
 21e:	5c 98       	cbi	0x0b, 4	; 11
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 220:	5a 98       	cbi	0x0b, 2	; 11
	while(*str) lcd_putc(*str++);
}

static void setup_RS_RW_E()
{
	DDR(RS_PORT) |= (1<<RS_LOC);
 222:	52 9a       	sbi	0x0a, 2	; 10
	DDR(RW_PORT) |= (1<<RW_LOC);
 224:	20 9a       	sbi	0x04, 0	; 4
	DDR(E_PORT) |= (1<<E_LOC);
 226:	54 9a       	sbi	0x0a, 4	; 10
{
	clear_RW();
	clear_E();
	clear_RS();
	setup_RS_RW_E();
	set_DB_output();
 228:	0e 94 b1 00 	call	0x162	; 0x162 <set_DB_output>
 22c:	83 ec       	ldi	r24, 0xC3	; 195
 22e:	99 e0       	ldi	r25, 0x09	; 9
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_initialize+0x16>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_initialize+0x1c>
 236:	00 00       	nop
	
	_delay_ms(10);
	nibble_out(0x3);
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 c8 00 	call	0x190	; 0x190 <nibble_out>
 23e:	83 ec       	ldi	r24, 0xC3	; 195
 240:	99 e0       	ldi	r25, 0x09	; 9
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_initialize+0x28>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_initialize+0x2e>
 248:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	0e 94 c8 00 	call	0x190	; 0x190 <nibble_out>
 250:	83 ec       	ldi	r24, 0xC3	; 195
 252:	99 e0       	ldi	r25, 0x09	; 9
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_initialize+0x3a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_initialize+0x40>
 25a:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x3);
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	0e 94 c8 00 	call	0x190	; 0x190 <nibble_out>
 262:	83 ec       	ldi	r24, 0xC3	; 195
 264:	99 e0       	ldi	r25, 0x09	; 9
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_initialize+0x4c>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_initialize+0x52>
 26c:	00 00       	nop
	_delay_ms(10);
	nibble_out(0x2);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 c8 00 	call	0x190	; 0x190 <nibble_out>
	PORT(RW_PORT) |= (1<<RW_LOC);
}

static void clear_RS()
{
	PORT(RS_PORT) &= ~(1<<RS_LOC);
 274:	5a 98       	cbi	0x0b, 2	; 11
 276:	83 ec       	ldi	r24, 0xC3	; 195
 278:	99 e0       	ldi	r25, 0x09	; 9
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_initialize+0x60>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_initialize+0x66>
 280:	00 00       	nop
{
	uint8_t num;
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
 282:	0e 94 a8 00 	call	0x150	; 0x150 <set_DB_input>
	PORT(RS_PORT) |= (1<<RS_LOC);
}

static void set_RW()
{
	PORT(RW_PORT) |= (1<<RW_LOC);
 286:	28 9a       	sbi	0x05, 0	; 5
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 288:	0e 94 b6 00 	call	0x16c	; 0x16c <pulse_E>
 28c:	c8 2f       	mov	r28, r24
	num |= pulse_E();
 28e:	0e 94 b6 00 	call	0x16c	; 0x16c <pulse_E>
	if(reg) set_RS();
	else clear_RS();
	_delay_ms(10);
	set_DB_input();
	set_RW();
	num = (pulse_E()<<4);
 292:	c2 95       	swap	r28
 294:	c0 7f       	andi	r28, 0xF0	; 240
	num |= pulse_E();
 296:	8c 2b       	or	r24, r28
	uint8_t num;
	do
	{
		num=read_register(0);
	}
	while(num&(BUSY_FLAG));
 298:	6c f3       	brlt	.-38     	; 0x274 <lcd_initialize+0x5a>
	_delay_ms(10);
	nibble_out(0x3);
	_delay_ms(10);
	nibble_out(0x2);
	busywait();
	write_reg(0x28,0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	88 e2       	ldi	r24, 0x28	; 40
 29e:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
	write_reg(0x08,0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
	write_reg(0x01,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
	write_reg(0x06,0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <lcd_goto_xy>:

void lcd_goto_xy(uint8_t col, uint8_t row)
{
	uint8_t num=0x80;
	row = row%2;
	col = col%8;
 2be:	87 70       	andi	r24, 0x07	; 7
	if(row==1) num |= (1<<6);
 2c0:	60 ff       	sbrs	r22, 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <lcd_goto_xy+0xa>
 2c4:	90 ec       	ldi	r25, 0xC0	; 192
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <lcd_goto_xy+0xc>
	write_reg(0x06,0);
}

void lcd_goto_xy(uint8_t col, uint8_t row)
{
	uint8_t num=0x80;
 2c8:	90 e8       	ldi	r25, 0x80	; 128
	row = row%2;
	col = col%8;
	if(row==1) num |= (1<<6);
	num |= col;
	write_reg(num,0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	89 2b       	or	r24, r25
 2ce:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
 2d2:	08 95       	ret

000002d4 <lcd_display_on>:
	set_DB_input();
}

void lcd_display_on()
{
	write_reg(0x0C, 0);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
 2dc:	08 95       	ret

000002de <lcd_putc>:
}


void lcd_putc(const char x)
{
	write_reg(x,1);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	0e 94 df 00 	call	0x1be	; 0x1be <write_reg>
 2e4:	08 95       	ret

000002e6 <lcd_puts>:
}

void lcd_puts(const char *str)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
	while(*str) lcd_putc(*str++);
 2ec:	88 81       	ld	r24, Y
 2ee:	88 23       	and	r24, r24
 2f0:	31 f0       	breq	.+12     	; 0x2fe <lcd_puts+0x18>
 2f2:	21 96       	adiw	r28, 0x01	; 1
 2f4:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_putc>
 2f8:	89 91       	ld	r24, Y+
 2fa:	81 11       	cpse	r24, r1
 2fc:	fb cf       	rjmp	.-10     	; 0x2f4 <lcd_puts+0xe>
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <main>:

#include "main.h"

int main()
{
	lcd_initialize();
 304:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_initialize>
	lcd_display_on();
 308:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_display_on>
	configure_left_motor();
 30c:	0e 94 a4 01 	call	0x348	; 0x348 <configure_left_motor>
	configure_right_motor();
 310:	0e 94 ad 01 	call	0x35a	; 0x35a <configure_right_motor>
	init_buzzer();
 314:	0e 94 52 00 	call	0xa4	; 0xa4 <init_buzzer>
	configure_reflectance_sensors();
 318:	0e 94 b9 01 	call	0x372	; 0x372 <configure_reflectance_sensors>
	configure_push_button_array();
 31c:	0e 94 4b 00 	call	0x96	; 0x96 <configure_push_button_array>
	
	playFrequency(500,1); //Code Uploaded
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	64 ef       	ldi	r22, 0xF4	; 244
 324:	71 e0       	ldi	r23, 0x01	; 1
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 5e 00 	call	0xbc	; 0xbc <playFrequency>
	
	lcd_puts("Final");
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_puts>
	lcd_goto_xy(0,1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_goto_xy>
	lcd_puts("Project");
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_puts>
		time = get_discharge_time(1);
		lcd_goto_xy(0,0);
		itoa(time,val,10);
		lcd_puts(val);
		*/
	}
 346:	ff cf       	rjmp	.-2      	; 0x346 <main+0x42>

00000348 <configure_left_motor>:
	 configure_right_motor();
}

void configure_left_motor()
{
	DDR(LMOTORA_PORT) |= (1<<LMOTORA_LOC);
 348:	56 9a       	sbi	0x0a, 6	; 10
	DDR(LMOTORB_PORT) |= (1<<LMOTORB_LOC);
 34a:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = 0x03;
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((TCCR0B&0xC0)|0x01);
 350:	85 b5       	in	r24, 0x25	; 37
 352:	80 7c       	andi	r24, 0xC0	; 192
 354:	81 60       	ori	r24, 0x01	; 1
 356:	85 bd       	out	0x25, r24	; 37
 358:	08 95       	ret

0000035a <configure_right_motor>:
}

void configure_right_motor()
{
	DDR(RMOTORA_PORT) |= (1<<RMOTORA_LOC);
 35a:	23 9a       	sbi	0x04, 3	; 4
	DDR(RMOTORB_PORT) |= (1<<RMOTORB_LOC);
 35c:	53 9a       	sbi	0x0a, 3	; 10
	TCCR2A = 0x03;
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = ((TCCR2B&0xC0)|0x01);
 364:	e1 eb       	ldi	r30, 0xB1	; 177
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 7c       	andi	r24, 0xC0	; 192
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret

00000372 <configure_reflectance_sensors>:
#include "sensor.h"

void configure_reflectance_sensors()
{
	DDR(SENSORS_PORT) &= ~SENSORS_PIN;
 372:	87 b1       	in	r24, 0x07	; 7
 374:	80 7e       	andi	r24, 0xE0	; 224
 376:	87 b9       	out	0x07, r24	; 7
	PORT(SENSORS_PORT) |= SENSORS_PIN;
 378:	88 b1       	in	r24, 0x08	; 8
 37a:	8f 61       	ori	r24, 0x1F	; 31
 37c:	88 b9       	out	0x08, r24	; 8
 37e:	08 95       	ret

00000380 <__udivmodsi4>:
 380:	a1 e2       	ldi	r26, 0x21	; 33
 382:	1a 2e       	mov	r1, r26
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	fd 01       	movw	r30, r26
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <__udivmodsi4_ep>

0000038c <__udivmodsi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	ee 1f       	adc	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	a2 17       	cp	r26, r18
 396:	b3 07       	cpc	r27, r19
 398:	e4 07       	cpc	r30, r20
 39a:	f5 07       	cpc	r31, r21
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__udivmodsi4_ep>
 39e:	a2 1b       	sub	r26, r18
 3a0:	b3 0b       	sbc	r27, r19
 3a2:	e4 0b       	sbc	r30, r20
 3a4:	f5 0b       	sbc	r31, r21

000003a6 <__udivmodsi4_ep>:
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	1a 94       	dec	r1
 3b0:	69 f7       	brne	.-38     	; 0x38c <__udivmodsi4_loop>
 3b2:	60 95       	com	r22
 3b4:	70 95       	com	r23
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	9b 01       	movw	r18, r22
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	cf 01       	movw	r24, r30
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
